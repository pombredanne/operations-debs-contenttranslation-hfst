#line 2 "xfst-lexer.cc"

#line 4 "xfst-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer hxfst_create_buffer
#define yy_delete_buffer hxfst_delete_buffer
#define yy_flex_debug hxfst_flex_debug
#define yy_init_buffer hxfst_init_buffer
#define yy_flush_buffer hxfst_flush_buffer
#define yy_load_buffer_state hxfst_load_buffer_state
#define yy_switch_to_buffer hxfst_switch_to_buffer
#define yyin hxfstin
#define yyleng hxfstleng
#define yylex hxfstlex
#define yylineno hxfstlineno
#define yyout hxfstout
#define yyrestart hxfstrestart
#define yytext hxfsttext
#define yywrap hxfstwrap
#define yyalloc hxfstalloc
#define yyrealloc hxfstrealloc
#define yyfree hxfstfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hxfstrestart(hxfstin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int hxfstleng;

extern FILE *hxfstin, *hxfstout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hxfsttext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up hxfsttext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hxfstrestart()), so that the user can continue scanning by
	 * just pointing hxfstin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when hxfsttext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int hxfstleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow hxfstwrap()'s to do buffer switches
 * instead of setting up a fresh hxfstin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void hxfstrestart (FILE *input_file  );
void hxfst_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE hxfst_create_buffer (FILE *file,int size  );
void hxfst_delete_buffer (YY_BUFFER_STATE b  );
void hxfst_flush_buffer (YY_BUFFER_STATE b  );
void hxfstpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void hxfstpop_buffer_state (void );

static void hxfstensure_buffer_stack (void );
static void hxfst_load_buffer_state (void );
static void hxfst_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER hxfst_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE hxfst_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE hxfst_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE hxfst_scan_bytes (yyconst char *bytes,int len  );

void *hxfstalloc (yy_size_t  );
void *hxfstrealloc (void *,yy_size_t  );
void hxfstfree (void *  );

#define yy_new_buffer hxfst_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hxfstensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hxfst_create_buffer(hxfstin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hxfstensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hxfst_create_buffer(hxfstin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define hxfstwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *hxfstin = (FILE *) 0, *hxfstout = (FILE *) 0;

typedef int yy_state_type;

extern int hxfstlineno;

int hxfstlineno = 1;

extern char *hxfsttext;
#define yytext_ptr hxfsttext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up hxfsttext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	hxfstleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 162
#define YY_END_OF_BUFFER 163
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2648] =
    {   0,
      153,  153,  140,  140,    0,    0,  139,  139,  163,  161,
      151,  153,  152,  152,  154,  150,  150,  161,  146,  148,
      147,  161,  161,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  153,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  140,  140,  162,  141,  139,
      139,  153,  154,  158,  154,  155,  156,  150,  150,  155,
      150,  155,  155,  155,  155,  155,  155,  155,  155,  150,
        0,  150,    0,    0,    0,    0,    0,    0,    0,    0,

      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      145,    0,  143,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  142,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  115,  116,  117,
      150,  150,  123,  124,  127,  150,  150,    0,    0,    0,
        0,    0,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,   96,   97,  150,  150,  150,  150,  150,  101,  150,
      150,  116,  127,  150,  150,    3,  150,  150,  150,  150,
      150,  150,  137,  150,  140,  140,  141,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  139,  139,  159,  157,
      150,  155,  155,  155,  155,  155,  155,  155,  155,  144,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  150,    0,    0,    0,

        0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  143,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  143,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  149,  150,  150,  150,  110,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  118,  119,  120,  121,

      122,  125,  126,  150,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   96,   97,    0,    0,    0,    0,    0,  101,
        0,    0,    0,    0,    0,    0,    3,    0,    0,    0,
        0,    0,    0,  137,    0,    1,  150,  150,  150,  150,
      150,  150,   62,   90,  150,  150,  150,  150,  150,  150,
      150,  150,   61,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,    6,  150,  150,  150,  150,  150,
       70,   71,  150,   54,  150,  150,   80,   79,  150,  150,
      150,  150,  150,  150,  150,  150,   94,  150,  150,  102,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  129,
      150,  150,  150,  150,  150,    0,    2,    0,  150,  150,
      150,  150,  150,  135,  150,  150,  150,  141,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  155,  155,  155,  155,  155,  155,  155,
      144,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,    0,
        0,    0,    0,    0,    0,    0,  144,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  143,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  142,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      149,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,    1,    0,    0,    0,    0,
        0,    0,   62,   90,    0,    0,    0,    0,    0,    0,
        0,    0,   61,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,    0,    0,    0,    0,    0,
       70,   71,    0,   54,    0,    0,   80,   79,    0,    0,
        0,    0,    0,    0,    0,    0,   94,    0,    0,  102,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      135,    0,    0,    0,    0,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,    5,   30,   31,  150,  150,  150,  150,  150,   38,
      150,  150,  150,  150,  150,   91,   45,   47,  150,  150,
      150,  150,  150,   51,  150,  150,  150,  150,    0,  150,
      150,   89,  150,  150,  150,  150,  150,  150,  150,  101,
      150,  104,  150,  150,  150,   84,  107,  150,  150,  150,
      150,  128,  150,  150,  150,  150,  150,  150,   58,  150,
      150,  150,  150,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  150,   29,  150,  150,   37,
        0,    0,   39,  150,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  150,  150,  150,  150,  150,  150,    0,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,   30,   31,
        0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
        0,   91,   45,   47,    0,    0,    0,    0,    0,   51,

        0,    0,    0,    0,    0,    0,   89,    0,    0,    0,
        0,    0,    0,    0,  101,    0,  104,    0,    0,    0,
       84,  107,    0,    0,    0,    0,  128,    0,    0,    0,
        0,    0,    0,   58,    0,    0,    0,    0,    0,    8,
      150,  150,  150,  150,  150,  150,   13,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,    0,
        4,    0,   29,    0,  150,  150,  150,  150,   64,   37,
      150,  150,  150,  150,  150,    0,   46,  150,  150,  150,
      150,   50,    0,  150,  150,  150,   73,    0,  150,   88,
        0,  150,    0,   95,  150,  150,  150,  150,    0,  100,

      150,    0,  150,   81,  150,    0,  150,   85,  150,  150,
        0,  150,  150,  132,  150,  150,    0,   59,   87,  150,
      150,  150,    0,    0,    0,  155,  155,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  150,   29,   29,
      150,  150,   37,   37,  150,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      150,  150,  150,  150,  150,  150,    0,    0,    0,    0,
        0,    0,    0,    0,  150,    8,    0,    0,    0,    0,
        0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   30,    0,    0,    0,    0,

       64,   38,    0,    0,    0,    0,    0,   46,    0,    0,
        0,    0,   50,    0,    0,    0,   73,    0,   88,    0,
       95,    0,    0,    0,    0,  100,    0,    0,   81,    0,
        0,   85,    0,    0,    0,    0,  132,    0,    0,   59,
       87,    0,    0,    0,    0,  150,  150,    0,  150,  150,
       11,  150,    0,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,   29,    0,  150,  150,  150,
      150,   37,   40,  150,  150,   43,    0,  150,   65,    0,
        0,  150,  150,  150,  150,    0,    0,   52,  150,  150,
        0,    0,    0,    0,  150,    0,    0,    0,    0,    0,

        0,  150,  150,   99,   93,    0,    0,  150,    0,  150,
        0,  150,  150,    0,  108,  150,  150,  150,    0,  150,
      150,    0,  131,  150,    0,    0,  150,  150,    0,  150,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  150,  150,  150,  150,  150,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  150,  150,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,    0,    0,   43,    0,   65,    0,    0,
        0,    0,   52,    0,    0,    0,    0,    0,   99,   93,

        0,    0,    0,    0,  108,    0,    0,    0,    0,    0,
      131,    0,    0,    0,    0,   55,  150,    0,    0,    0,
       10,  150,   12,    0,  150,  150,  150,  150,  150,   19,
      150,  150,  150,  150,  150,  150,    0,  150,  150,  150,
      150,    0,   42,  150,    0,    0,  150,  150,    0,    0,
      150,  150,  150,  150,  150,  150,    0,    0,    0,  150,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  150,    0,    0,    0,    0,    0,
        0,  150,   98,    0,    0,    0,  150,    0,  105,    0,
      150,   82,    0,  150,  150,  150,    0,  150,  150,    0,

      150,  150,    0,    0,    0,    0,    0,    0,  150,  150,
       27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      150,  150,    0,    0,    0,  117,  150,  150,  150,  150,
        0,    0,  114,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  150,  150,   55,    0,   10,    0,
       12,    0,    0,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   42,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,  105,    0,   82,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  150,    0,    0,    3,

        9,  150,    0,    0,    0,    0,    0,  150,   18,    0,
      150,   41,  150,  150,  150,  132,    0,  150,  150,    0,
      150,    0,    0,  150,    0,    0,  150,  150,    0,    0,
      150,  150,  150,  150,   49,   49,    0,   51,    0,   53,
       57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  150,  150,  150,   92,    0,    0,    0,    0,
        0,  150,    0,    0,    0,    0,  150,    0,    0,    0,
      150,  107,  150,  150,   50,    0,  150,  130,    0,  150,
      150,  134,    0,    0,    0,    0,    0,    0,  150,  150,

        0,   25,    0,   27,    0,   24,    0,    0,    0,    0,
        0,    0,    0,    0,   27,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      150,  150,  150,  150,  150,  150,    0,    0,    0,    0,
        0,    0,  122,    0,    0,    0,    0,  150,  150,    0,
        0,    0,   18,    0,   41,    0,    0,    0,  132,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
       49,   53,   57,    0,    0,    0,    0,    0,    0,    0,
        0,   50,    0,  130,    0,    0,    0,    0,    0,    7,
        0,    9,    9,   56,    0,    0,    0,    0,    0,    0,

      150,    0,    0,  150,  150,  150,   60,    0,  150,  150,
      150,    0,    0,   63,    0,    0,   41,    0,   44,  150,
      150,    0,    0,  150,  150,  150,  150,    0,    0,    0,
       54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   74,    0,    0,    0,    0,    0,    0,    0,
        0,   88,    0,  150,  150,  150,    0,    0,    0,    0,
      150,    0,    0,    0,    0,  150,    0,    0,  106,  150,
      150,  113,    0,    0,  150,  150,   62,    0,    0,    0,
        0,  150,  138,   27,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   27,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  150,  150,  150,  150,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  150,  150,    7,   56,    0,
        0,    0,    0,   60,    0,    0,    0,   63,   41,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  113,    0,    0,    0,  138,    0,    0,    0,
        0,    0,    0,    0,    0,  150,    0,    0,  150,  150,
      150,  150,    0,    0,  150,  150,    0,    0,   40,    0,
        0,   43,   66,  150,    0,   47,  150,  150,   48,  150,

        0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
       68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  150,  150,  150,    0,    0,    0,  150,    0,    0,
        0,  150,    0,    0,  150,  150,    0,  128,    0,  133,
      150,    0,    0,    0,  150,    0,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  150,  150,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  150,  150,    0,    0,    0,    0,    0,    0,    0,

       66,    0,    0,    0,   48,    0,    0,    0,    0,    0,
        0,    0,    0,  133,    0,    0,    0,    0,   12,   13,
        0,    0,    0,    0,  150,    0,   19,   20,  150,   28,
       28,    0,    0,  150,  150,    0,    0,   42,    0,   67,
        0,  150,  150,    0,   72,    0,    0,    0,    0,    0,
        0,    0,    0,   69,    0,    0,    0,   75,    0,    0,
       81,    0,    0,  150,  150,  150,    0,    0,  150,   98,
        0,    0,  150,    0,  105,    0,    0,    0,    0,   86,
        0,    0,    0,  150,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,

      150,  150,    0,    0,    0,    0,    0,    0,    0,  123,
        0,    0,    0,    0,  150,  150,    0,   20,    0,   28,
       28,    0,    0,   67,    0,    0,   72,    0,    0,    0,
        0,    0,   86,    0,    0,    0,    0,    0,    0,    0,
      150,   18,    0,   23,    0,    0,    0,    0,  150,  150,
        0,    0,    0,  150,  150,    0,   53,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       89,   76,   77,   78,    0,    0,  150,   99,  150,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  136,    0,
        0,    0,    0,    0,  150,  150,    0,    0,  117,    0,

        0,    0,  121,    0,    0,    0,    0,  150,    0,   23,
        0,    0,    0,    0,   76,   77,   78,    0,    0,  136,
        0,    0,    0,   16,   17,   15,  150,    0,    0,    0,
        0,    0,    0,   14,  150,    0,    0,  150,  150,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  150,  150,  104,    0,    0,
        0,  113,    0,    0,    0,    0,  138,    0,  150,  150,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
        0,   14,    0,    0,    0,    0,    0,    1,    0,    0,
      150,    0,    0,    0,    0,    0,   32,   34,    0,    0,

       70,  150,  150,   48,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  150,  150,  150,  103,    0,    0,    0,    0,  133,
        0,    0,    0,  150,  115,  116,    0,    0,    0,    0,
        0,    0,    0,    0,   34,   70,    0,    0,    0,    0,
        0,    7,    0,  150,   20,    0,   28,   31,   33,    0,
        0,    0,  150,   21,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  150,  150,   80,
        0,    0,    0,    0,    0,    0,    0,  150,    0,    0,
        0,    0,  124,  127,    0,    0,    0,    0,   21,    0,

        0,   80,    0,    0,   23,    0,    0,    0,  150,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
      150,  150,    0,  111,    0,    0,   58,    0,    0,  150,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   35,    0,  150,    0,    0,    0,
        0,    0,    0,  150,  150,  150,    0,  112,    0,    0,
      150,    0,    0,  119,    0,  125,    0,    0,    0,    0,
        0,    0,    0,    0,   34,    0,  150,    0,    0,    0,
      150,  150,  150,  109,    0,    0,  150,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   36,    0,

        0,    0,   22,  150,    0,  118,    0,    0,  120,  126,
       22,    0,    0,    0,    0,   70,    0,    0,    0,    0,
        0,    0,   80,    0,    0,    0,    0,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   10,   10,   12,
       13,   10,   10,   14,   15,   10,   10,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   16,   17,   18,
       10,   19,   10,   10,   20,   20,   20,   21,   22,   20,
       20,   20,   20,   20,   20,   20,   20,   23,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        8,   10,    8,   10,   14,   10,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   10,   10,   10,   10,    1,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   53,   53,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   57,   58,   58,   59,
       60,   60,   60,   61,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53
    } ;

static yyconst flex_int32_t yy_meta[62] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    6,    7,    7,
        7,    8,    9,   10,    7,    6,   11,    6,    6,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,    1,
        1,    1,    1,    7,    7,    7,    7,    7,    7,    7,
        7
    } ;

static yyconst flex_int16_t yy_base[2685] =
    {   0,
        0,   59, 5971, 5970,  108,    0, 5969, 5968, 5972, 5977,
     5977,   60, 5977, 5977,   60,  169,  220,   14, 5958, 5977,
     5977,  279,  338,  389,   53,   66,  209,  210,  213,   55,
      211,  214,  260,  218, 5977,  192, 5918,  209,   29,  213,
      194,  216, 5919,  448,  264,   59,  273,  287,  319,  286,
      226,  290,  324,  300,  327,  249,  330,  225,  363,  475,
      331,  341,  261,  380,  303, 5963, 5962, 5977,  370, 5961,
     5960,  267, 5960, 5977,  366,    0, 5977,  297,  375,  523,
      584,  358, 5911,  363,  201,  382,  331,  385, 5912,  346,
      401,  409,  388, 5909,  450,  338,  458,  365,  464, 5910,

     5936,  470, 5906,  479,  391,  482,  401,  485, 5907, 5943,
     5977,  643,  484,  492,  504, 5903,  507,  431,  510,  453,
      513, 5904,  702,  660,  601,  516, 5901,  519,  461,  600,
      596,  613, 5902,  651,  652,  653,  662,  655,  672,  707,
      665,  708,  709,  718,  711,  667,  668,  712,  671,  722,
      725,  728,  729,  732,  751,  752, 5928,  727,  730,  733,
      736,  742,  746,  749,    0,  775, 5902,  768,  641,  786,
      693, 5921,  292,  791,  661,  725, 5911,  793, 5903,  808,
      817,  761,  731, 5914,  815, 5917,  847,  848,  850,  849,
      853,  854,  863,  866,  869,  868,  829,  870,  885,  872,

      886,  887,  897,  899,  901,  908,  913,  915,  917,  919,
      924,  930,  936,  942,  940,  937,  953,  960,  958,  969,
      970,  972,  976,  979,  983,  985,  986,  998, 1007, 1001,
     1005, 1011, 1018, 1024, 1027, 1030, 1033, 1034, 1036, 1043,
     1039, 1050, 1056, 1057, 1069, 1083, 1079, 1088, 1068, 1070,
     1095, 1097, 1098, 1100, 5939, 5938, 1088, 1074,  788, 5890,
      919,  661,  953,  775, 1087, 5891, 5935, 5934, 5977, 5977,
     1110, 1100, 5886, 1103, 1010, 1106, 1108, 1111, 5887, 1160,
     1175, 1115, 5884, 1120, 1123, 1131, 1133, 1136, 5885, 1139,
     1142, 1145, 1148, 1151, 1154, 1157, 1195, 1161, 5882, 1164,

     1169, 1171, 1186, 1189, 5883, 1227, 1197, 1193, 5880, 1196,
     1209, 1211, 1213, 1216, 5881, 1219, 1222, 1225, 1228, 1231,
     1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258, 1300,
     1258, 1270, 5878, 1273, 1276, 1278, 1280, 1283, 5879,    0,
     1286, 5876, 1289, 1292, 1294, 1296, 1299, 5877, 1312, 1315,
     1318, 1321, 1324, 1327, 1330, 1341, 1329, 1341, 5874, 1353,
     1356, 1358, 1360, 1363, 5875,    0, 1366, 5872, 1369, 1372,
     1374, 1376, 1379, 5873, 1382, 1385, 1388, 1391, 1394, 1397,
     1400, 1438, 1439, 1441, 1442, 1443, 1444, 1445, 1454, 1457,
     1458, 1460, 1463, 1470, 1472, 1476, 1477, 1483, 1486, 1487,

     1488, 1493, 1497, 1498, 1472, 1477, 1480, 5895, 5889, 5895,
      732, 5893, 5876, 5874, 5888, 5887, 1498, 5876, 5870, 1476,
      964, 5881, 5879, 5878, 5867,  903, 5873, 5883, 5871, 5868,
     1494, 5879, 5856, 5860, 1514, 5874, 5863, 5863, 5868, 5869,
     5868,  429, 5871, 5855,  985, 1075, 5851, 5860, 5854, 1517,
     5847, 1441, 5977, 5977, 5844, 5845, 1502, 1512, 1504, 5977,
     5863, 5861, 5858, 5843, 5845, 1522, 1560, 5854,  883, 5840,
     5845, 5847, 5839, 5977, 5836, 1544, 1553, 1555, 1556, 1557,
     1558, 1560, 1559, 1569, 1570, 1574, 1575, 1585, 1581, 1587,
     1597, 1598, 1601, 1604, 1607, 1611, 1613, 1614, 1617, 1620,

     1624, 1627, 1633, 1636, 1640, 1643, 1647, 1650, 1654, 1653,
     1666, 1667, 1668, 1671, 1669, 1672, 1683, 1685, 1690, 1692,
     1695, 1697, 1699, 1711, 1704, 1708, 1709, 1710, 1713, 1714,
     1715, 1724, 1725, 1731, 1735, 1737, 1741, 1744, 1747, 1750,
     1751, 1756, 1753, 1757, 1763, 1772, 1773, 1775, 1784, 1779,
     1785, 1788, 1789, 1790, 1801, 1831, 5977, 5872, 1795, 1806,
     1816, 1817, 1823, 1826, 1828, 1832, 1838,    0, 1555, 5823,
     1807, 1493, 1812, 1732, 1815, 5824, 1818, 1822, 1827, 1830,
     1833, 1836, 1839, 1842, 1845, 1848, 1851, 1854, 1857, 1860,
     1629, 1863, 5821, 1866, 1869, 1871, 1873, 1876, 5822, 1879,

     1882, 1885, 1888, 1891, 1894, 1897, 1900, 1903, 1906, 1909,
     1912, 1915, 1918, 1921, 1924, 1927, 1965, 1931, 5819, 1934,
     1939, 1941, 1943, 1946, 5820, 1949, 1952, 1955, 1958, 1961,
     1964, 1967, 1970, 1973, 1976, 1979, 1982, 1985,    0, 1988,
     5817, 1991, 1994, 1996, 1998, 2001, 5818, 2004, 2007, 2010,
     2013, 2016, 2019, 2022, 2025, 2028, 2031, 2034, 2037, 2040,
     2043, 2046, 2049, 2052,    0, 2055, 5815, 2058, 2061, 2063,
     2065, 2068, 5816, 2071, 2074, 2077, 2080, 2083, 2086, 2089,
     2092, 2095, 2098, 2101, 2104, 2107, 2110, 2113, 2116, 2119,
     5977, 2157, 2170, 2159, 2160, 2175, 2204, 2251, 2164, 2252,

     2253, 2173, 2254, 2264, 2257, 5859, 5840, 5831, 5827, 5823,
     5845, 5831, 5977, 5977, 5834, 5822,  943, 1191, 5814, 5827,
     5826, 5820, 5977, 5815, 5813, 5807, 5813, 5816, 5804, 5805,
     5817, 5814, 5804, 5804, 5802, 5812, 5811, 5810, 5811, 5793,
     5808, 5804, 5799, 5804, 5977, 1711, 5803, 5806, 5814, 5799,
     5977, 5977, 5791, 5820, 5788, 5787, 5977, 5977, 5792, 5779,
     5794, 5793, 5791, 5780, 5789, 5792, 5977, 5777, 5786, 5977,
     1779, 5784, 5776, 5787, 5782, 5766, 5767, 5781, 2149, 5977,
     5769, 5763, 5776, 5765, 5770, 5773, 5754, 5770, 5755, 5770,
     5977, 5753, 5771, 5756, 5754, 2258, 2269, 2263, 2268, 2274,

     2280, 2281, 2286, 2287, 2300, 2310, 2293, 2297, 2290, 2304,
     2321, 2337, 2343, 2339, 2332, 2333, 2346, 2336, 2348, 2369,
     2358, 2359, 2362, 2363, 2365, 2368, 2374, 2387, 2383, 2386,
     2390, 2392, 2393, 2406, 2402, 2403, 2404, 2409, 5750, 2418,
     2423, 2433, 2429, 2434, 2432, 2435, 2445, 2439, 2448, 2458,
     2451, 2469, 2454, 2473, 2455, 2476, 2483, 2478, 2480, 2485,
     2490, 2496, 2492, 2494, 2495, 2497, 2506, 2510, 2507, 2511,
     2512, 2522, 2521, 2344, 2491, 2500, 2504, 2507, 2510, 2513,
     2516, 2519, 2522, 2525, 2528, 2531, 2534, 2537, 2540, 2543,
     2546, 2549, 2552, 2555, 2558, 2561, 2564, 2567, 2570, 2573,

     2576, 2579, 2582, 2585, 2588, 2591, 2594, 2597, 2600, 2603,
     2606, 2609, 2612, 2615, 2618, 2621, 2624, 2627, 2630, 2633,
     2636, 2639, 2642, 2645, 2648, 2651, 2654, 2657, 2660, 2663,
     2666, 2669, 2672, 2675, 2678, 2716, 1661, 2717, 2719, 1682,
     5787, 2196, 5977, 1803, 2751, 2729,  359, 2732, 2372, 2739,
     2734, 2742, 1699, 2734, 2735, 2523, 2745, 2722, 2798, 2787,
     2747, 5748, 5759, 5740, 5748, 5743, 5744,  767, 5756, 5742,
     2739, 5758, 5737, 5738, 5738, 5752, 5733, 2792, 2183, 5770,
     5743, 5739, 5749, 5757, 5729, 2323, 5729, 5741, 5727, 5726,
     5731, 5977, 5977,  816, 5737, 5720, 5722, 5726, 5719, 5754,

     5716, 5719, 5725, 5728, 5712, 5726, 5747, 5714, 5745, 5703,
     5704, 5707, 5704, 5707, 1848, 5702, 5738, 5714, 5718, 5706,
     5977, 5734, 5713, 5704, 5694, 5695, 5729, 5702, 5704, 5695,
     5689, 5689, 5723, 5686, 5685, 5698, 5699, 5709, 5682, 2750,
     2803, 2817, 2749, 2812, 2805, 2815, 2827, 2826, 2828, 2831,
     2830, 2840, 2843, 2846, 2847, 2849, 2856, 2852, 2859, 2894,
     5977, 5718, 2347, 5682, 2868, 2863, 2887, 2858, 2888, 2811,
     2889, 2892, 2891, 2893, 2914, 1559, 2904, 2907, 2908, 2909,
     2911, 2929, 5683, 2923, 2925, 2927, 2930, 5676, 2948, 2951,
     5691, 2944, 2934, 2947, 2963, 2964, 2966, 2967, 2734, 2969,

     2970, 5672, 2973, 2989, 2982, 5679, 2987, 2984, 2988, 2998,
     5673, 3001, 3003, 3008, 3004, 3010, 5677, 3015, 3017, 3028,
     3021, 3022, 3002, 3005, 3008, 3012, 3015, 3018, 3021, 3024,
     3027, 3030, 3033, 3036, 3039, 3042, 3045, 3095,    0, 2874,
     3084, 3085,    0, 2922, 2962, 3098, 1565, 3101, 3105, 3107,
     3109, 3112, 2889, 3116, 3120, 3123, 3126, 3129, 3132, 3135,
     3089, 3091, 3173, 3102, 3114, 3186, 5673, 5668, 2330, 5673,
     1804, 5665, 5665,  999, 3179, 5680, 5663, 5700, 5667, 5680,
     5660, 5658, 5695, 5674, 5671, 5672, 5662, 5668, 5653, 5651,
     5656, 5653, 5655, 5647, 5652, 3036, 5651, 5649, 5660, 5653,

     5977, 3125, 5656, 5657, 5640, 5638, 3184, 5977, 5638, 5640,
     5663, 5645, 5670, 5647, 5639, 5636, 5977, 5666, 5665, 5634,
     5977, 5641, 5626, 5639, 5624, 5977, 5637, 5629,  370, 5628,
     5634, 5977,  866, 5637, 5633, 5627, 5652, 5614, 5641, 5977,
     5977, 5649, 5626, 5614, 5614, 3123, 3180, 3099, 3182, 3185,
     3191, 3192, 5609, 3196, 3198, 3207, 3210, 3212, 3213, 3217,
     3228, 3219, 3229, 3233, 3242, 3139, 5609, 3243, 3247, 3249,
     3254, 3243, 3267, 3260, 3265, 3272, 5612, 3266, 3271, 5620,
     5604, 3281, 3282, 3283, 3284, 5609, 5617, 3295, 3296, 3300,
     5620, 3317, 5606, 5614, 3297, 5598, 5612, 5598, 5610, 5598,

     5608, 3298, 3307, 3328, 3316, 5607, 5591, 3322, 5609, 3327,
     5595, 3334, 3345, 5603, 3347, 3351, 3350, 3352, 5587, 3356,
     3365, 5592, 3366, 3372, 5600, 3380, 3376, 3375, 3421, 3377,
     3394, 3392, 3397, 3402, 3407, 3411, 3416, 3421, 3433, 3436,
     3441, 3398, 3411, 3413, 3418, 3474, 3492, 5583, 5589, 5597,
     5595, 5577, 5585, 5586, 5592, 5594, 5594, 5578, 3479, 3484,
     5574, 5577, 5572, 5578, 5977, 5573, 5568, 5571, 5566, 5580,
     5564, 5578, 5577, 5578, 5562, 5570, 5563, 5574, 5575, 5561,
     5554, 5559, 5589, 5551, 5565, 5586, 1453, 5977, 5548, 5575,
     2430, 1465, 5583, 5544, 5559, 5571, 5570, 5556, 5577, 5977,

     5540, 5553, 5537, 5531, 5977, 5535, 5545, 5550, 5547, 5537,
     5977, 3004, 5546, 5537, 5532, 3415, 3485, 5532, 5541, 5529,
     3500, 3489, 3499, 5524, 3504, 3505, 3510, 3441, 3511, 3525,
     3515, 3520, 3521, 3527, 3526, 3522, 5528, 3531, 3486, 3545,
     3532, 5528, 3547, 3543, 5527, 5535, 3556, 3558, 5533, 5537,
     3560, 3561, 3562, 3563, 3572, 3574, 5532, 5516, 5521, 3573,
     3583, 5531, 2418, 3184, 3244, 3579, 3235, 5515, 5531, 3561,
     5515, 5515, 5524, 5522, 3590, 5507, 5502, 5510, 5517, 5522,
     5498, 3593, 3603, 5502, 5514, 5518, 3597, 5500, 3615, 5512,
     3599, 3604, 5496, 3609, 3614, 3618, 5514, 3620, 3627, 5509,

     3631, 3629, 5493, 5492, 3310, 5493, 5494, 5504, 3633, 3634,
     3676, 3614, 3608, 5479, 3614, 2697, 3633, 2748, 3638, 5480,
     3671, 3676, 3672, 3688, 3691, 3681, 3682, 3683, 3686, 3687,
     5525, 3709, 5977, 5496, 5501, 5489, 5493, 5496, 5508, 5487,
     5480, 5485, 5481, 5488, 3705, 3729, 5977, 5471, 3311, 5462,
     5488, 5475, 5463, 5462, 5451, 5421, 5442, 5409, 5401, 5405,
     5374, 5359, 5325, 5307, 5334, 5333, 5309, 5329, 5308, 5293,
     5282, 5276, 5252, 5244, 5237, 5245, 5243, 5228, 5240, 3710,
     5228, 5258, 5219, 5255, 5233, 5977, 5212, 5218, 5202, 5217,
       49,  239,  278,  328,  452,  499, 3706,  526,  561, 3754,

     3366, 3732,  616,  705,  761, 2399,  782, 3747, 3758,  829,
     3748, 3751, 3752, 3753, 3754, 3763,  843, 3767, 3768, 2897,
     3769,  897,  919, 3774,  944,  971, 3781, 3778, 1023, 1064,
     3783, 3785, 3795, 3796, 3800, 3806, 1065, 5977, 1112, 3820,
     3813, 1134, 1147, 1223, 1324, 1353, 1428, 1501, 1531, 1516,
     3339, 1567, 1610, 1663, 1740, 1755, 2241, 1820, 1948, 2136,
     2141, 2163, 3815, 3816, 3818, 5977, 2259, 3297, 2278, 2353,
     2377, 3819, 2428, 2692, 2743, 2762, 3817, 2805, 2802, 2801,
     3829, 5977, 3831, 3836, 3834, 2834, 3854, 3847, 2833, 3848,
     3850, 5977, 2844, 2865, 2866, 2917, 2937, 2925, 3853, 3857,

     3878, 5977, 2979, 3897, 3861, 5977, 3835, 2948, 3838, 3071,
     3842, 3418, 3854, 2951, 3956, 3860, 2989, 3873, 3506, 3876,
     3539, 3879, 2998, 3882, 3885, 3888, 3891, 3894, 3897, 3913,
     3951, 3953, 3954, 3955, 3956, 3957, 3058, 3072, 3097, 3110,
     3113, 3132, 5977, 3156, 3169, 3185, 3188, 3960, 3975, 3205,
     3205, 3233, 3279, 3276, 5977, 3289, 3315, 3305, 5977, 3355,
     3394, 3348, 3365, 3373, 3415, 3418, 3426, 3447, 3449, 5977,
     3507, 3526, 5977, 3534, 3568, 3590, 3600, 3630, 3627, 3634,
     3673, 5977, 3701, 5977, 3687, 3675, 3676, 3683, 3685, 3976,
     3709,    0, 3747, 3966, 3723, 3739, 3748, 3756, 3760, 3773,

     3980, 3777, 3788, 3981, 4003, 4004, 3970, 3799, 4015, 4010,
     4008, 3809, 3810, 4014, 3805, 3822, 4026, 3818, 5977, 4019,
     4020, 3830, 3844, 4029, 4035, 4036, 4039, 3842, 3854, 3861,
     5977, 3883, 3898, 3918, 3956, 3958, 3970, 3977, 3963, 3977,
     3981, 3994, 5977, 3989, 4012, 3999, 4009, 4028, 4031, 4032,
     4036, 5977, 4028, 4052, 4053, 4054, 4032, 4043, 4026, 4046,
     4064, 4052, 4057, 4045, 4049, 4070, 4060, 4058, 5977, 4073,
     4074, 4088, 4056, 4062, 4086, 4090, 5977, 4067, 4065, 4080,
     4067, 4100, 4110, 4131, 4095, 4105, 4069, 4070, 4079, 4076,
     4088, 4093, 4107, 4074,    0, 4110, 4080, 4113, 4096, 4116,

     4118, 4121, 4091, 4124, 4127, 4130, 4143, 4146, 4149, 4152,
     4155, 4158, 4161, 4164, 4167, 4170, 4173, 4176, 4179, 4182,
     4220, 4230, 4223, 4224, 4226, 4159, 4152, 4205, 4208, 4227,
     4200, 4224, 4214, 4223, 4241, 4242, 4243, 4253, 5977, 4232,
     4218, 4218, 4221, 5977, 4258, 4229, 4240, 5977, 4266, 4231,
     4239, 4232, 4233, 4249, 4251, 4233, 4241, 4240, 4239, 4241,
     4249, 4257, 4280, 4259, 4261, 4261, 4284, 4248, 4248, 4250,
     4260, 4253, 4250, 4258, 4268, 4284, 4272, 4258, 4287, 4288,
     4289, 4290, 4265, 4279, 4301, 4304, 4284, 4296, 5977, 4278,
     4285, 5977, 4310, 4311, 4300, 5977, 4314, 4315, 4326, 4320,

     4303, 5977, 4308, 4300, 4301, 4308, 4320, 4333, 4308, 4316,
     4310, 4325, 4313, 4328, 4319, 4315, 4336, 4327, 4322, 4322,
     4337, 4351, 4352, 4354, 4338, 4330, 4345, 4361, 4330, 4352,
     4354, 4368, 4360, 4343, 4372, 4382, 4352, 5977, 4355, 4386,
     4379, 4359, 4360, 4371, 4385, 4366,    0, 4362, 4352, 4365,
     4356, 4372, 4367, 4375, 4360, 4415, 5977, 4379, 4383, 4386,
     4389, 4392, 4395, 4398, 4401, 4404, 4407, 4410, 4413, 4416,
     4419, 4422, 4425, 4428, 4431, 4434, 4437, 4466, 4476, 4478,
     4479, 4457, 4457, 4453, 4454, 4473, 4468, 4465, 4475, 4477,
     4483, 4495, 4496, 4470, 4484, 4487, 4486, 4487, 4478, 4485,

     5977, 4474, 4483, 4493, 4520, 4486, 4501, 4502, 4504, 4500,
     4490, 4486, 4529, 4530, 4496, 4492, 4508, 4502, 5977, 5977,
     4510, 4515, 4516, 4509, 4531, 4504, 5977, 4542, 4535, 4545,
     4546, 4506, 4518, 4540, 4544, 4524, 4526, 5977, 4536, 4557,
     4543, 4558, 4560, 4534, 4561, 4531, 4534, 4557, 4562, 4559,
     4545, 4557, 4576, 5977, 4550, 4578, 4553, 5977, 4559, 4569,
     4583, 4584, 4573, 4586, 4587, 4588, 4561, 4590, 4593, 5977,
     4572, 4580, 4597, 4578, 5977, 4590, 4586, 4591, 4582, 4608,
     4589, 4592, 4597, 4611, 4605, 4585, 4589, 4592, 4595, 4598,
     4601, 4605, 4608, 4611, 4614, 4617, 4620, 4623, 4640, 4662,

     4663, 4664, 4652, 4644, 4634, 4655, 4646, 4651, 4654, 5977,
     4647, 4648, 4655, 4657, 4680, 4681, 4662, 4693, 4657, 4695,
     4696, 4666, 4670, 5977, 4677, 4674, 5977, 4670, 4671, 4671,
     4678, 4674, 5977, 4673, 4689, 4679, 4684, 4679, 4680, 4698,
     4709, 5977, 4688, 4720, 4690, 4691, 4697, 4706, 4716, 4719,
     4706, 4712, 4695, 4725, 4729, 4713, 5977, 4703, 4711, 4720,
     4711, 4713, 4717, 4708, 4708, 4712, 4741, 4715, 4720, 4713,
     5977, 4750, 4752, 4753, 4737, 4727, 4756, 5977, 4757, 4746,
     4749, 4754, 4733, 4739, 4753, 4756, 4742, 4771, 4772, 4747,
     4741, 4746, 4749, 4769, 4787, 4790, 4766, 4780, 5977, 4771,

     4763, 4776, 5977, 4785, 4773, 4771, 4784, 4802, 4794, 4813,
     4778, 4776, 4785, 4791, 5977, 5977, 5977, 4792, 4795, 5977,
     4786, 4801, 4792, 5977, 5977, 5977, 4816, 4804, 4796, 4806,
     4807, 4808, 4807, 4823, 4825, 4797, 4811, 4829, 4832, 4802,
     4814, 4809, 4822, 4830, 4832, 4842, 4820, 4828, 4826, 4819,
     4839, 4826, 4827, 4838, 4839, 4853, 4854, 4829, 4844, 4850,
     4842, 5977, 4864, 4837, 4850, 4840, 5977, 4852, 4871, 4870,
     4844, 4853, 4841, 4853, 4847, 4866, 4853, 4861, 4854, 4885,
     4875, 5977, 4876, 4876, 4865, 4867, 4873, 5977, 4870, 4875,
     4898, 4872, 4889, 4875, 4876, 4880, 4881, 4918, 4887, 4897,

     4913, 4914, 4915, 5977, 4883, 4884, 4896, 4896, 4904, 4898,
     4903, 4917, 4908, 4908, 4910, 4934, 4915, 4910, 4911, 4911,
     4907, 4940, 4942, 4944, 5977, 4924, 4930, 4935, 4934, 5977,
     4924, 4940, 4939, 4955, 5977, 5977, 4965, 4945, 4945, 4947,
     4934, 4950, 4951, 4953, 4976, 4968, 4956, 4958, 4963, 4964,
     4959, 5977, 4975, 4985, 5977, 4949, 5977, 5977, 5977, 4956,
     4950, 4951, 4981, 4982, 4956, 4964, 4958, 4975, 4961, 4960,
     4968, 4968, 4968, 4976, 4985, 4986, 4971, 5001, 5002, 5003,
     4978, 4984, 4982, 4989, 4985, 4980, 4984, 5014, 5006, 5007,
     5004, 4992, 5977, 5977, 5006, 4994, 5030, 4996, 5977, 4996,

     4997, 5026, 5007, 5008, 5977, 5018, 5005, 5010, 5034, 5002,
     5010, 5011, 5026, 5027, 5029, 5016, 5012, 5046, 5020, 5048,
     5049, 5050, 5039, 5977, 5033, 5045, 5028, 5031, 5037, 5061,
     5041, 5042, 5052, 5040, 5056, 5043, 5054, 5055, 5056, 5047,
     5052, 5053, 5054, 5051, 5977, 5051, 5081, 5065, 5057, 5059,
     5059, 5061, 5060, 5090, 5091, 5092, 5081, 5977, 5083, 5066,
     5096, 5087, 5091, 5977, 5093, 5977, 5094, 5071, 5083, 5084,
     5091, 5087, 5080, 5088, 5977, 5089, 5118, 5095, 5102, 5111,
     5121, 5122, 5124, 5977, 5097, 5100, 5128, 5116, 5117, 5115,
     5117, 5125, 5117, 5118, 5107, 5118, 5132, 5133, 5977, 5132,

     5126, 5129, 5151, 5152, 5133, 5977, 5138, 5139, 5977, 5977,
     5977, 5143, 5130, 5135, 5136, 5163, 5149, 5146, 5139, 5139,
     5140, 5143, 5171, 5139, 5156, 5151, 5152, 5159, 5157, 5977,
     5167, 5150, 5151, 5147, 5169, 5166, 5158, 5159, 5160, 5175,
     5167, 5156, 5176, 5179, 5165, 5178, 5977, 5209, 5220, 5231,
     5236, 5242, 5249, 5258, 5267, 5277, 5282, 5292, 5303, 5314,
     5321, 5326, 5330, 5336, 5341, 5347, 5354, 5365, 5372, 5379,
     5386, 5397, 5408, 5419, 5430, 5440, 5450, 5460, 5467, 5478,
     5488, 5495, 5502, 5509
    } ;

static yyconst flex_int16_t yy_def[2685] =
    {   0,
     2647,    1, 2648, 2648, 2647,    5, 2649, 2649, 2647, 2647,
     2647, 2647, 2647, 2647, 2650, 2647, 2651, 2652, 2653, 2647,
     2647, 2654, 2655, 2651,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       33,   24,   24,   24,   24, 2656, 2656, 2647, 2657, 2658,
     2658, 2647, 2650, 2647, 2650, 2659, 2647,   16,   16, 2660,
     2647, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659,   24,
     2661, 2662, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

       24, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2653,
     2647, 2654, 2663, 2664, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2655, 2665, 2666, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,   44, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24, 2656, 2656, 2657, 2667, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2658, 2658, 2647, 2647,
       16, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659,   16,
     2668, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659,
     2659, 2659, 2659, 2659, 2659, 2659,   24, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647,   24, 2669, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2663,
     2670, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,  330,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2665, 2671, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,  356, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2647, 2647, 2647,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  257, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2659, 2659, 2659, 2659, 2659, 2659, 2659,
       16, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659,

     2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2647,
     2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,  330, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,  356, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647,   24,   24,   24,   24,   24, 2647,   24,   24,   24,

       24,   24,   24,   24,   24, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24, 2647,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2659, 2659, 2659, 2659, 2659, 2659, 2659,
     2659, 2659, 2659, 2659, 2659, 2659, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24, 2672,   24,   24, 2673,
     2674, 2674, 2647,  697, 2675, 2674, 2674, 2674, 2674, 2674,
     2674, 2674, 2674,   24,   24,   24,   24,   24,   24, 2647,
       24, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, 2647,
     2647, 2647, 2672, 2647,   24,   24,   24,   24,   24, 2673,
       24,   24,   24,   24,   24, 2647,   24,   24,   24,   24,
       24,   24, 2647,   24,   24,   24,   24, 2647,   24,   24,
     2647,   24, 2647,   24,   24,   24,   24,   24, 2647,   24,

       24, 2647,   24,   24,   24, 2647,   24,   24,   24,   24,
     2647,   24,   24,   24,   24,   24, 2647,   24,   24,   24,
       24,   24, 2647, 2647, 2647, 2659, 2659, 2659, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647,   24, 2672, 2672,
       24,   24, 2673, 2673,  697, 2674, 2674, 2674, 2674, 2674,
     2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674,
       24,   24,   24,   24,   24,   24, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,   24, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24,   24, 2647,   24,   24,
       24,   24, 2647,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24, 2672, 2647,   24,   24,   24,
       24, 2673,   24,   24,   24,   24, 2647,   24,   24, 2647,
     2647,   24,   24,   24,   24, 2647, 2647,   24,   24,   24,
     2647, 2647, 2647, 2647,   24, 2647, 2647, 2647, 2647, 2647,

     2647,   24,   24,   24,   24, 2647, 2647,   24, 2647,   24,
     2647,   24,   24, 2647,   24,   24,   24,   24, 2647,   24,
       24, 2647,   24,   24, 2647, 2647,   24,   24, 2676,   24,
       24, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674,
     2674,   24,   24,   24,   24,   24, 2677, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,   24,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24,   24, 2647, 2647, 2647,
       24,   24,   24, 2647,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24, 2647,   24,   24,   24,
       24, 2647,   24,   24, 2647, 2647,   24,   24, 2647, 2647,
       24,   24,   24,   24,   24,   24, 2647, 2647, 2647,   24,
       24, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,   24, 2647, 2647, 2647, 2647, 2647,
     2647,   24,   24, 2647, 2647, 2647,   24, 2647,   24, 2647,
       24,   24, 2647,   24,   24,   24, 2647,   24,   24, 2647,

       24,   24, 2647, 2647, 2647, 2647, 2647, 2647,   24,   24,
     2678, 2679, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
       24,   24, 2674, 2674, 2674,   24,   24,   24,   24,   24,
     2677, 2677, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,   24,   24, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647, 2647,

     2680,   24, 2647, 2647, 2647, 2647, 2647,   24,   24, 2647,
       24,   24,   24,   24,   24,   24, 2647,   24,   24, 2647,
       24, 2647, 2647,   24, 2647, 2647,   24,   24, 2647, 2647,
       24,   24,   24,   24,   24,   24, 2647, 2647, 2647,   24,
       24, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647,   24,   24,   24, 2647, 2647, 2647, 2647, 2647,
     2647,   24, 2647, 2647, 2647, 2647,   24, 2647, 2647, 2647,
       24, 2647,   24,   24,   24, 2647,   24,   24, 2647,   24,
       24, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,   24,

     2647, 2647, 2647, 2681, 2682, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2678, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
       24,   24,   24,   24,   24,   24, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,   24, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,
     2647, 2680, 2680,   24, 2647, 2647, 2647, 2647, 2647, 2647,

       24, 2647, 2647,   24,   24,   24,   24, 2647,   24,   24,
       24, 2647, 2647,   24, 2647, 2647,   24, 2647, 2647,   24,
       24, 2647, 2647,   24,   24,   24,   24, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647,   24,   24,   24, 2647, 2647, 2647, 2647,
       24, 2647, 2647, 2647, 2647,   24, 2647, 2647, 2647,   24,
       24,   24, 2647, 2647,   24,   24, 2647, 2647, 2647, 2647,
     2647,   24,   24, 2681, 2683, 2684, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 1884, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
       24,   24,   24,   24,   24, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24,   24, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24, 2647, 2647,   24,   24,
       24,   24, 2647, 2647,   24,   24, 2647, 2647, 2647, 2647,
     2647, 2647,   24,   24, 2647, 2647,   24,   24,   24,   24,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647,   24,   24,   24, 2647, 2647, 2647,   24, 2647, 2647,
     2647,   24, 2647, 2647,   24,   24, 2647, 2647, 2647,   24,
       24, 2647, 2647, 2647,   24, 2647, 1884, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2684, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,   24,
       24, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,   24, 2647, 2647,   24,   24,   24,
       24, 2647, 2647,   24,   24, 2647, 2647, 2647, 2647,   24,
     2647,   24,   24, 2647,   24, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647,   24,   24,   24, 2647, 2647,   24, 2647,
     2647, 2647,   24, 2647, 2647, 2647, 2647, 2647, 2647,   24,
     2647, 2647, 2647,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,

       24,   24, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647,   24,   24, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
       24, 2647, 2647,   24, 2647, 2647, 2647, 2647,   24,   24,
     2647, 2647, 2647,   24,   24, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647,   24,   24,   24, 2647, 2647,   24, 2647,   24, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24, 2647,
     2647, 2647, 2647, 2647,   24,   24, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647, 2647,
     2647, 2647, 2647,   24,   24, 2647, 2647,   24,   24, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647,   24,   24, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,   24,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
       24, 2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647,

       24,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647,   24,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,   24,   24,
     2647, 2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,
       24,   24, 2647, 2647, 2647, 2647, 2647, 2647, 2647,   24,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647, 2647,
     2647, 2647, 2647,   24,   24,   24, 2647, 2647, 2647, 2647,
       24, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647,   24, 2647, 2647, 2647,
       24,   24,   24, 2647, 2647, 2647,   24, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647,   24,   24, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647,    0, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647
    } ;

static yyconst flex_int16_t yy_nxt[6039] =
    {   0,
       10,   11,   12,   13,   14,   12,   15,   10,   16,   17,
       18,   19,   10,   17,   17,   20,   21,   22,   23,   17,
       17,   24,   17,   17,   17,   17,   25,   26,   27,   17,
       28,   29,   17,   17,   30,   17,   17,   31,   17,   17,
       17,   32,   33,   34,   17,   17,   17,   17,   17,   35,
       35,   35,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   72,   74,   44,   72,   75,  102,  103,  104,
      105,  106,  107,  108,  109,   90, 1784,   90,  160,  160,
      135,   90,   45,   46,   47,   48,   49,   50,   90,   51,
       52,  136,  144,   53,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,  137,  194,   65,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   76,
       76,   76,   77,   76,   76,   76,   76,   78,   79,   80,
       76,   76,   79,   81,   76,   76,   76,   76,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   76,   76,
       76,   76,   82,   83,   84,   85,   86,   87,   88,   89,
       91,   90,   90,   90,   92,   90,   90,  140,  141,  142,
       90,  157,  157,  157,  162,  162,  138,   90,   90,  143,
      292,  292,  139,  208,  141,  145,  156,  146,  159,  159,
      159,  147,  161,  161,  161,  163,  163,  163,  227,   72,
     1785,   90,   72,   93,   94,   95,   96,   97,   98,   99,
      100,  112,   90,   90,  112,  219,   90,  148,  149,  114,
      187,  150,  247,  145,  151,   90,  152,  153,  188,  189,

      270,  154,  190,  155,  191,  192,  193,  195,   90,   90,
      196,   79,   90,  197,  198, 1786,  142,  206,  199,  209,
      207,  430,   90,  138,  200,   90,  210,  215,  431,  139,
      254,  216,  115,  116,  117,  118,  119,  120,  121,  122,
      123,   90, 1787,  123,  201,  202,   90,  211,  125,   90,
      217,  212,   90,  203,  218,  213,  220,  204,  137,  242,
       90,  214,  943,   90,  221,  205,  222,  223,   90,  269,
      224,  225,   75,  226,  243, 1311,  244,  245, 2647,  246,
      258,  294,  294,   79, 1403,   90,  228,  318,  318,   79,
      229,  126,  127,  128,  129,  130,  131,  132,  133,   91,

      230,  231,   90,   92,  232,  233,  248,   79,   79,   79,
     1154,  134,  291,  291,  291,  320,  320,  249,  250,  307,
      251,  252,  253,  259,  260,  261,  262,  263,  264,  265,
      266,  293,  293,  293,  295,  295,  295,   90,   90,   90,
      325,  325,   93,   94,   95,   96,   97,   98,   99,  100,
      165,  327,  327,  165,  298,  299,  300,  301,  302,  303,
      304,  305,  308,  309,  310,  311,  312,  313,  314,  315,
      751,  166,  167,  168,  169,  170,  171,  752,  172,  173,
      351,  351,  174,  175,  176,  177,  178,  179,  180,  181,
      182,  183,  184,  185,  331, 1788,  186,   90,  234,  317,

      317,  317,  235,  353,  353,  236,  237,  319,  319,  319,
      377,  377,  238,  321,  321,  321,  239,  240,  241,  101,
      101,  101,  147,   76,   76,   76, 1789,   76,  324,  324,
      324,  326,  326,  326,  328,  328,  328,  332,  333,  334,
      335,  336,  337,  338,  339,  341,  342,  343,  344,  345,
      346,  347,  348,  113,  113,  113,  350,  350,  350,  352,
      352,  352,  354,  354,  354,  124,  124,  124,  376,  376,
      376, 1791,   76,   76,   76,   76,  272,  273,  274,  275,
      276,  277,  278,  279,   76,   76,   76,  745,   76,   76,
       76,   76,  280,  280,  281,   76,   76,  280,  280,   76,

       76,   76,   76,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,   76,   76,   76,   76,  282,  283,  284,
      285,  286,  287,  288,  289,  112,  379,  379,  112,  378,
      378,  378, 1795,  114,  367,  368,  369,  370,  371,  372,
      373,  374,  380,  380,  380,   90,   90,   90,  419,   90,
      357,  382,  420,   90,   90,   90,   90,   90,  421,   90,
      383,   90,   90,  384,   90,   90,   90,   90,  436,   90,
       90,  394,  437,   90,   90,  386,  115,  116,  117,  118,

      119,  120,  121,  122,  123,  385,  389,  123,  387,  395,
      579,  579,  125,  358,  359,  360,  361,  362,  363,  364,
      365,   90,   90,   90,  427,   90,   90,  428, 1796,   90,
       90,   90,   90,   90,   90,  390,   90,  391,  393,   90,
       90,  388,   90,   90,   90,  397,   90,   90,  438,  398,
       90,   90,  439,  396,   90,  126,  127,  128,  129,  130,
      131,  132,  133,  392,  400,   90,   90,  466,  399,  467,
      709,  401,  710,   90,   90,  402,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157, 1797,  463,
      404,  405,  405,  405,  403,  406,  406,  406,  407,  407,

      407,  408,  416, 1182,  464,  417,  465, 1183,  418,  409,
      410,  422,  423,  411,  432,  412,  413,  414,  433,  441,
      424, 1076,  434, 1800,  425,  581,  581,  442,  435,  443,
      444,  449,  426,  445,  446,  450,  447,  257,  257,  257,
      455,  469, 1208,   90,  456,  451,  452,  457,  458,  453,
      454,   90,  470,  471,  459,  472,  473,  474,  460,  461,
      462,   90,   90,   90,   90, 1803,  489,   90,   90,   90,
       90,   90,   90,  476,  478,   90,   90,   90,  481,  477,
       90, 1808,   90,   90,   90,   90,   90,  479,   90,  480,
       90,   90,   90,  484,   90,  482,  485, 1406,  383,   90,

       90,   90,  486,  487,  488,  483, 1407,   90,   90,   90,
      788,   90,  490,   90,  493,   90,  495,  494,  496,   90,
      789,   90,   90,   90, 1815,  491,  492,   90,  497,   90,
       90,   90,  499,   90,  729,   90,  502,   90,   90,   90,
      498,   90,  501,  500,   90,  730,   90,  391,  508,  503,
       90,   90,   90,  504,   90, 1816,   90,  970,   90,   90,
      505,  506,   90,  507,   90,  511,  515,   90,  578,  578,
      578, 1818,   90,  516,   90,   90,  509,  510,  512,  513,
       90,  971,   90,   90,   90,  519,   90,  514,  517,  518,
       90,   90,   90,   90,   90,  523,  520,   90,   90,   90,

       90,   90,  580,  580,  580,   90,  723,   90,   90,  724,
      525,  521,   90, 1819,  524,   90,  755,  530,  522,   90,
       90,   90,  526,   90,  527,   90,  529,   90,  756,   90,
      532,  528,   90,   90,  531, 1357,  533, 1358,   90,  537,
       90,   90,  534,  536,   90,  538,   90,   90,   90,   90,
       90,  535,   90,   90, 1822,   90,   90,   90,   90,  586,
      586,   90,  543,  549,   90,   90,  548,  541,  539,  540,
       90,   90,   90,  542,  546,  544,  550,  547,   90,   90,
      402,  545,   90,   90,   90,  556,  557,  558,  556, 1823,
       90,   90,   90,   90,  552,  553,  551,   90,  258,  403,

      554,   90,   90,  555,  564,   90,  560, 1782,  563,   90,
       90,   90,   90, 2647,   90,  561,  757,   90,   79,   90,
       90,  559,   90,  758,   79,  562,  565,  569,  570,  571,
      572,  573,  574,  575,  576,  566,  582,  582,  582, 1829,
      567,  259,  260,  261,  262,  263,  264,  265,  266,  271,
      271,  271,  585,  585,  585,  587,  587,  587,  588,  588,
      589,  589,  589, 2647,  280,  280,  280, 1831,   79,  601,
      601,  601,  602,  602,   79,   76,   76,   76, 1832,   76,
      603,  603,  603,  604,  604,  605,  605,  605,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

      607,  607,  607,  608,  608,  608,  609,  609,  609,   90,
      297,  297,  297,  611,  611,  611,  972,   90,  612,  612,
      613,  613,  613,  973,   76,   76,   76,   76,  592,  593,
      594,  595,  596,  597,  598,  599,  614,  614,  615,  615,
      615,   90,  306,  306,  306,  627,  627,  627, 1833,   90,
      618,  619,  620,  621,  622,  623,  624,  625,  628,  628,
      629,  629,  629,  630,  630,  631,  631,  631,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
      633,  633,  633,  634,  634,  634,  635,  635,  635,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  636,  636,  636,  637,  637,  637,  638,  638,  638,
      331,  640,  641,  642,  643,  644,  645,  646,  647,  330,
      330,  330,  649,  649,  649,  650,  650,  651,  651,  651,
      652,  652,  653,  653,  653,  340,  340,  340,  656,  656,
      656,  657,  657,  658,  658,  658,  659,  659,  660,  660,
      660,  357, 1834,  332,  333,  334,  335,  336,  337,  338,
      339,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  662,  662,  662,  663,  663,  663,  664,
      664,  664,  666,  667,  668,  669,  670,  671,  672,  673,
      356,  356,  356, 1835,  358,  359,  360,  361,  362,  363,

      364,  365,  675,  675,  675,  676,  676,  677,  677,  677,
      678,  678,  679,  679,  679,  366,  366,  366,  682,  682,
      682,  683,  683,  684,  684,  684,  685,  685,  686,  686,
      686,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  688,  688,  688,  689,  689,  689,  690,
      690,  690,   90,   90,  691,   90,   90,   90,   90,   90,
       90,   90, 1836,   90,   90,   90,   90,   90,   90,  695,
      692,   90,   90,  694,   90,  767,   90,   90,  693,   90,
       90,  768,   90,  696,   90,   90,   90,  700, 1570,  699,
       90,   90,   90,  698,   90, 1571,  697,   90,   90,   90,

       90,   90,   90,  701,  702,   90, 1576,   90,   90,   90,
       90,   90,   90, 1577,  703,   90,  721,  722,  704,   90,
       90,  157,  157,  157, 1837,  705,  157,  157,  157,  157,
      157,  157,  716,  717,  718,  735,  736,  741,  737,  771,
      762,  773,  876,  876,  776,  772,  763,  777,  783,  795,
      742,  743,  764,  784,  774, 1838,  785, 1839,   90,  744,
      775,  765,  556,  557,  558,  556,   90,   90,  943,   90,
       90,   90,  800,   90,   90,   90,  796,   90,   90,   90,
       90,   90,   90,   90,   90, 1280,  797,  801,   90,  804,
      798,   90,   90,  802,  799,   90,   90,   90,  786,   90,

     1281,   90, 1842,   90,  568,  568,  568,   90,  803,   90,
      806,   90,   90,  805,  809,   90, 1332,  807,   90,   90,
       90,   90,  808,   90,  810,   90,   90,   90,   90,   90,
      811,   90, 2647,   90,   90,   90,   90,   79,   90,   90,
      812,   90,   90,   79,  813,  816,   90,   90,  815,   90,
       90,  818, 1843,  814,   90,   90,  819,   90,   90,  484,
      817,   90,   90, 1140,   90,   90, 1140,   90,   90,   90,
      823,  820,   90,  821,  824,   90,   90,  825,  822,  826,
       90,   90,   90,   90, 1144,   90,   90, 1144,   90,   90,
       90,   90,  828,   90,   90,  827,  829,   90,  831,   90,

     1844,  830,  943,  832,  836,   90,   90,   90,  835,   90,
      834,   90,   90,   90,   90,  833,  839,   90,   90,   90,
      837,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,  838,   90,   90,   90,   90,   90,
      840,  843,  998,  842,  841,   90,   90,   90, 1160,   90,
      844,   90,  845,   90,  999,   90,  484,   90,   90,   90,
      848,   90,  847,   90,   90,   90,   90,   90,  846,   90,
       90,   90,   90,   90,  850,   90, 1845,   90,   90,   90,
      855,  849,  878,  878,  853,   90,   90,   90,  854,   90,
      856,  851, 1846,   90,   90,   90,  852,   90,   90,   90,

      859,   90,   90,   90,   90,  941,   90,   90,  941,   90,
       90,   90,   90,  858,  857,   90,  864,   90,  702, 1016,
       90,  862,  867,   90, 1017,  860,  861,  865,   90,  863,
       90,   90,  866,  556,  557,  558,  556,   90,   90,   90,
       90, 1353,   90, 1849,  869,   90,   90, 1354,   90,  870,
       90,  868,   90, 1099,   90,  872,  875,  875,  875,  493,
       90,  877,  877,  877,  879,  879,  879,  257,  257,  257,
      871,  257,  257,  257, 1226,  873,  257,  257,  257,  257,
      257,  257,  881,  881,  881,  882,  882,  882,  883,  883,
      883,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  884,  884,  884,  885,  885,  885,  886,
      886,  886,  591,  591,  591,  888,  888,  888,  889,  889,
      890,  890,  890,  891,  891,  892,  892,  892,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      894,  894,  894,  895,  895,  895,  896,  896,  896,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      897,  897,  897,  898,  898,  898,  899,  899,  899,   90,
      617,  617,  617,  901,  901,  901, 1850,   90,  902,  902,
      903,  903,  903,  904,  904,  905,  905,  905,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      907,  907,  907,  908,  908,  908,  909,  909,  909,   90,
       90,   90,   90,   90,   90,   90,   90,   90,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  639,  639,  639,
      911,  911,  911,  912,  912,  913,  913,  913,  914,  914,
      915,  915,  915,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  917,  917,  917,  918,  918,
      918,  919,  919,  919,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  920,  920,  920,  921,
      921,  921,  922,  922,  922,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  665,  665,  665,  924,  924,  924,
      925,  925,  926,  926,  926,  927,  927,  928,  928,  928,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  930,  930,  930,  931,  931,  931,  932,  932,
      932,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  933,  933,  933,  934,  934,  934,  935,
      935,  935,  124,  124,  124,  124,  124,  124,  124,  124,
      124,   90,  937,   90,   90,  937, 1851,  940,   90,   90,
      940,   90,   90, 1852,   90, 1196,   90,   90, 1196,   90,
     1025, 1026,   90,  936, 1853,   90,  958,   90,  942,  943,

      955,  942,  939,  938,  941,  941,  942,  943,  941,  942,
      941,  941,  944,  944,  945,  941,  941,  944,  944,  941,
      941,  941,  941,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  941,  941,  941,  941,  946,  947,  948,
      949,  950,  951,  952,  953,   90,   90,   90,   90,  960,
     1847,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,  959,   90,   90,  992,   90,   90,  957,   90, 1848,
       90,   90,  956,  954,   90,   90,   90,  961, 1041, 1040,

       90,   90,   90,   90,   90, 1859, 1043,   90,   90,   90,
     1042,   90,   90, 1048,   90,   90, 1044, 1046,   90,   90,
     1045, 1047,   90, 1050,   90, 1202,   90, 1049, 1202, 1058,
     1057, 1051,   90, 1054, 1052,   90, 1055, 1053, 1056, 1060,
     1061, 1062, 1060,   90, 1064, 1063,   90,   90, 1063, 1266,
     1068,   90, 1266,   90,   90,   90, 1350,   90,   90,   90,
       90,   90,   90, 1065, 1059,   90, 1351, 1066,   90, 1067,
       90, 1070,   90,   90, 1070,  943,   90,   90, 1860,   90,
       90,   90,   90,   90,   90,   90, 1072,   90,   90, 1069,
       90,   90, 1076,  568,  568,  568,   90,   90, 1071, 1075,

       90,   90, 1073, 1074,   90,   90,   90,   90,   90,   90,
     1078, 1083,   90, 1077,   90,   90,   90,   90,   90,  454,
       90, 1156, 1156,   90,   90,   90,   90, 1081,   90, 1079,
     1080,   90,   90, 1798, 1082, 1086, 1087,   90, 1091, 1093,
       90, 1085, 1799,   90, 1084,   90,   90,   90,   90,   90,
     1090,   90, 1643,   90,   90,   90,   90,   90, 1644,   90,
     1089,   90,   90, 1099, 1862,   90, 1092,   90,   90,   90,
       90, 1574,   90,   90, 1102, 1575,   90,   90, 1094, 1095,
       90, 1097, 1103,   90, 1100, 1096, 1098,   90, 1106, 1105,
       90,   90,   90, 1101,   90,   90, 1104,   90,   90,   90,

       90, 1111,   90, 1107,   90,   90,   90,   90,   90,   90,
       90,   90,   90, 1108,   90, 1117,   90,   90,   90,   90,
       90,   90, 1113, 1112,   90,   90,   90, 1109,   90,   90,
     1110, 1114,   90,   90,   90, 1122,   90, 1163, 1115, 1120,
      568,  568,  568,   90,   90,   90, 1116, 1121, 1118,  568,
      568,  568, 1119,  568,  568,  568, 1123, 1123, 1123, 1124,
     1124, 1124, 1125, 1125, 1125,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591, 1126, 1126, 1126, 1127, 1127,

     1127, 1128, 1128, 1128,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617, 1129, 1129, 1129, 1130, 1130, 1130,
     1131, 1131, 1131,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639, 1132, 1132, 1132, 1133, 1133, 1133,
     1134, 1134, 1134,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  665,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  665,  665, 1135, 1135, 1135, 1136, 1136, 1136, 1137,
     1137, 1137,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  366,  366,  366,  366,  366,  366,  366,  366,  366,
       90,   90,  943,   90, 1863,  943,   90,  943,   90,   90,
     1141,   90,  943, 1138,   90,  943, 1726, 1726,   90,   90,
     1142,  941,  941,  941,  943,  941,   90,   90, 1165,   90,
     1306, 1175, 1186,   90,   90, 1161, 1162,   90, 1164,   90,
     1187,   90,   90, 1188, 1864, 1307, 1189, 1246,  944,  944,
      944, 1155, 1155, 1155, 1158, 1158, 1249, 1865, 1157, 1157,
     1157, 1159, 1159, 1159, 1060, 1061, 1062, 1060, 1728, 1728,

      941,  941,  941,  941, 1146, 1147, 1148, 1149, 1150, 1151,
     1152, 1153,   90, 1272, 1167, 1168, 1272,   90, 1169,   90,
       90, 1170, 1248, 1171, 1172,   90,   90,   90, 1173,   90,
     1174,   90, 1253, 1166,   90, 1250, 1867,   90, 1868,   90,
       90,   90,   90, 1869,   90,   90, 1247, 1251,   90,   90,
       90, 1254,   90,   90,   90, 1255, 1256,   90, 1252, 1873,
       90,   90,   90,   90, 1257,   90,   90, 1258,   90,   90,
       90,   90,   90,   90,   90, 1759, 1140,   90,   90, 1140,
       90,   90,   90, 1261, 1259,   90, 1877, 1262, 1260, 1271,
       90, 1263,  943, 1878, 1264, 1265, 1060, 1061, 1062, 1060,

     1269,   90,   90,   90, 1268,   90,   90,   90,  723,   90,
       90,   90, 1270,   90,   90,   90, 1273, 1274,   90, 1277,
     1812,   90,   90, 1284, 1144,   90,   90, 1144, 1278,   90,
       90,   90, 1275,   90, 1286, 1276,   90,   90, 1338,   90,
     1813,   90, 1285,   90,   90,   90, 1283,   90, 1282,   90,
     1288,   90,   90, 1292, 1879, 1279, 1293, 1296,   90, 1289,
     1880,   90,   90, 1290,  941,   90,   90,  941, 1297,   90,
       90, 1881, 1298,   90, 1299, 1300, 1301,   90,   90, 1295,
       90,   90, 1702,   90,   90,   90,   90,   90,   90,   90,
     1302,   90,   90, 1304, 1311,   90,   90, 1308,   90, 1904,

     1910,   90,   90, 1312,   90, 1303,   90, 1310, 1305,   90,
       90,   90,   90, 1322, 1315,   90, 1313,   90,   90, 1316,
       90, 1318,   90,   90, 1324,   90,   90, 1320, 1317,   90,
       90,   90,   90, 1326, 1321,   90,   90,   90, 1196,   90,
     1911, 1196,   90,   90,   90, 1592, 1323, 1917, 1327, 1593,
       90,  568,  568,  568,  568,  568,  568,  568,  568,  568,
     1328,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  665,  665,
      665,  665,  665,  665,  665,  665,  665, 1329,   90,   90,

     1329,  943, 1926,   90,  943,   90,   90,   90,  943,   90,
      943,   90,  943,   90, 1927,  943,   90,   90, 1330,  943,
     1906, 1906, 1331,  943,   90, 1418,  943, 1202,   90,  943,
     1202, 1342,  943, 1343, 1419,  943,   90,   90,  943, 1928,
      153, 1266, 1420, 1346, 1266,   90, 1929, 1145, 1145, 1145,
     1333, 1333, 1333, 1930, 1334, 1334, 1335, 1335, 1335, 1336,
     1336, 1337, 1337, 1337, 1416,  944,  944,  944, 1931,  944,
      944,  944,  944,  944,  944,  944,  944,  944, 1339, 1339,
     1339, 1340, 1340, 1340, 1341, 1341, 1341,   90, 1347, 1277,
     1932, 1347, 1933,   90,   90,   90,   90, 1344, 1387,   90,

       90,   90,   90, 1359,   90,   90,   90,   90,   90, 1934,
       90, 1645,   90,   90,   90, 1646, 1345, 1417,   90, 1422,
       90,   90, 1360, 1421,   90, 1388,   90,   90, 1935,   90,
     1423,   90,   90,   90,   90,   90, 1426, 1428, 1425,   90,
     1430,   90,   90,   90, 1431, 1272, 1938,   90, 1272, 1427,
       90,   90, 1939, 1432, 1429,   90,   90,   90, 1652, 1433,
     1434,   90, 1653,   90,   90,   90, 1438, 1436,   90,   90,
     1435,   90, 1442, 1940,   90, 1647,   90, 1445, 1648,   90,
       90,   90,   90, 1439, 1802,   90,   90,   90,   90,   90,
     1441, 1440, 1444,   90,   90,   90, 1452,   90,   90, 1941,

     1459, 1447, 1443,   90,   90,   90,   90, 1344, 1448,   90,
       90, 1475, 1482, 1601,   90, 1942, 1601,   90,   90,   90,
       90,   90,   90, 1451, 1453, 1455, 1345, 1461, 1454,   90,
       90, 1857, 1456, 1484, 1483, 1858,   90, 1694,   90, 1460,
     1463,   90,   90, 1464,   90, 1465, 1943, 1695,   90,   90,
       90, 1466, 1944, 1467, 1489, 1468,   90, 1469, 1470,   90,
     1471,   90, 1472, 1487,   90,   90,   90,   90, 1793,   90,
       90, 1793,   90,   90,   90, 1840, 1491, 1496,   90,   90,
       90, 1495, 1945, 1498, 1841, 1948,   90,   90,   90,   90,
       90,   90, 1492, 1494,   90,  943, 1359,   90,   90,   90,

      943, 1499, 1509, 1504, 1521,  943, 1505, 1949,   90, 1510,
      943, 1950,   90, 1501,  943, 1360,   90, 1502, 1506,  943,
       90, 1507, 1508, 1329,  943,   90, 1329,   90, 1946,   90,
     1522, 1512,   90,   90, 1947,   90,  943,   90, 1527,  943,
       90, 1145, 1145, 1145,  943, 1526, 1145, 1145, 1145, 1951,
     1528, 1145, 1145, 1145, 1529, 1608, 1145, 1145, 1145, 1952,
     1523, 1523, 1523,   90, 1953, 1524, 1524, 1524, 1908, 1908,
     1525, 1525, 1525, 1954, 1513, 1514, 1515, 1516, 1517, 1518,
     1519, 1520,  944,  944,  944,  944,  944,  944,   90, 1955,
      944,  944,  944,   90, 1532, 1533,   90, 1532,   90,   90,

     1619,   90, 1601,   90, 1603, 1601,   90,   90,   90, 1605,
     1606,   90, 1828,   90,   90, 1607, 1545, 1530,   90,   90,
     1546,   90,   90, 1602,   90,   90,   90,   90, 1597,   90,
     1610, 1830,   90,   90,   90,   90,   90,   90, 1609,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
     1620, 1611, 1623,   90,   90, 1913, 1913,   90, 1613,   90,
     1621,   90, 1612, 1614, 1616,   90, 1615,   90, 1624,   90,
       90, 1956,   90, 1618, 1631,   90,   90,   90,   90, 1627,
       90, 1628,   90,   90,   90,   90,   90,   90,   90, 1915,
     1915, 1656, 1657, 1633,   90,   90,   90,   90, 1632, 1635,

     1634, 1636, 1649, 1658,   90,   90, 1957,   90, 1673, 1641,
     1650,   90,   90,   90, 1640,   90, 1651,   90,   90,   90,
     1679,   90, 1681,   90, 1663,   90,   90, 1958,   90,   90,
     1672,   90,   90, 1664,   90, 1665,   90,   90, 1959, 1677,
       90,   90,   90,   90, 1960,   90, 1687, 1699,   90,   90,
     1684,   90, 1683,   90, 1688,   90,   90, 1511, 1511, 1511,
     1685, 1961, 1690, 1725, 1725, 1725, 1691, 1716, 1717, 1718,
     1719, 1720, 1721, 1722, 1723,  943, 1962, 1700, 1701, 1702,
     1703, 1701, 1727, 1727, 1727,   90, 1705, 1729, 1729, 1729,
       90,  943, 1706,   90,  943,   90,   90,   90,   90, 1732,

       90,   90, 1963,   90,   90,   90, 1874, 1731,   90,   90,
     1736, 1532, 1533, 1964, 1532, 1965, 1733, 1735, 1966,   90,
       90, 1145, 1145, 1145, 1967, 1968, 1734,   90,   90, 1707,
     1708, 1709, 1710, 1711, 1712, 1713, 1714, 1145, 1145, 1145,
     1145, 1145, 1145,   90, 1774,  978,   90, 1790, 1748, 1793,
     1970,   90, 1793, 1775,   90, 1776,  556,  557,  558,  556,
     1749,   90,   90, 1802, 1971,   90,   90,   90,   90,   90,
       90, 1804,   90,   90,   90,   90,   90,   90, 1805, 1794,
       90,   90,   90,   90, 1806,   90, 1972, 1801,   90,   90,
       90,   90,   90, 1973, 1809,   90,   90,   90, 1974,   90,

       90, 1807, 1810,   90, 1975,   90, 1814,   90, 1811,   90,
       90, 1828, 1821, 1977,   90, 1978, 1817,   90,   90, 1820,
       90, 1826,   90, 1825, 1824, 1830, 1983,   90,   90,   90,
       90, 1866,   90,   90,   90,   90, 1827,   90,   90,   90,
       90,   90,   90,   90, 1987,   90, 1988, 1989,   90, 1990,
       90,   90, 1854,   90, 1855, 1856,   90, 1861,   90, 1874,
     1992,   90,   90, 1870,   90, 1872, 1995,   90,   90,   90,
       90,   90,   90, 1871, 1875,   90,   90, 1996, 2001,   90,
     1701, 1702, 1703, 1701, 1704, 1704, 1704, 1905, 1905, 1905,
     1876, 1907, 1907, 1907, 1706, 1882, 2002, 2003, 1883, 1701,

     1702, 1703, 1701, 1909, 1909, 1909, 2004, 1885, 1886, 1715,
     1715, 1715, 2005, 1706, 1896, 1897, 1898, 1899, 1900, 1901,
     1902, 1903, 1912, 1912, 1912, 1914, 1914, 1914, 1916, 1916,
     1916, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1918, 1918, 1918, 1919, 1919, 1919, 2006,
     1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1701, 1702,
     1703, 1701, 1920, 1920, 1920,   90, 1705,   90,   90,   90,
       90,   90, 1706,   90,   90,   90,   90,   90,   90,   90,
       90, 1969,   90, 2007,   90, 2008, 1925,  149,   90,   90,
       90, 1923,   90, 1921,   90,   90, 1936,   90,   90, 2009,

     1924, 1922,   90,   90, 2010, 2011, 2012, 1976, 2013, 1707,
     1708, 1709, 1710, 1711, 1712, 1713, 1714,   90,   90, 1937,
     1984, 1217,   90, 1979,   90,   90,   90, 2014,   90,   90,
       90, 1991,   90,   90,   90, 1986,   90,   90, 2015, 2016,
       90,   90,   90,   90, 2017, 1981, 1980, 1985,   90,   90,
       90,   90, 1982,   90, 1994, 1021, 2018,   90,   90, 2019,
     1993,   90, 2020, 1999, 2021, 2000,   90,   90,   90, 2025,
     2026, 1997, 1221, 2027,   90,   90,   90, 1998,   90, 2029,
     2030, 2031,  460, 2033,   90, 2034,   90,   90,   90, 2038,
     2039, 2023,   90, 2037, 2024,   90,   90, 2022, 2042, 2043,

       90, 2036,   90, 2014,   90, 2044, 2028, 2035,   90,  474,
       90, 2032,   90, 2040,   90, 2046, 2041, 2057, 1884, 1884,
     1884, 2058,   90, 2064,   90, 2060, 2060, 2045, 2059, 2059,
     2059, 2065,   90, 1701, 1702, 1703, 1701, 2061, 2061, 2061,
     2071, 1885, 1886, 2062, 2062, 2067, 2067, 1706, 2048, 2049,
     2050, 2051, 2052, 2053, 2054, 2055, 2063, 2063, 2063, 1895,
     1895, 1895, 2066, 2066, 2066, 2068, 2068, 2068, 2069, 2069,
     2070, 2070, 2070, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 2082, 2083, 1887, 1888, 1889, 1890, 1891, 1892,
     1893, 1894, 1704, 1704, 1704, 2072, 2072, 2072, 2073, 2073,

     2073, 2074, 2074, 2074, 1715, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 2075, 2075, 2075, 2076,
     2076, 2076, 2077, 2077, 2077, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511,   90, 2078, 2084,   90,   90, 2085,
       90, 2086,   90, 2087, 2079,   90,   90, 2088,   90, 2080,
     2089, 2081,   90,  154, 2090, 2091,   90,   90, 1969, 2094,
     2095, 2096, 2097, 1984,   90,   90, 2099, 2100, 2092, 2098,
     2093, 1991, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
     2109, 2110, 2111, 2112, 2113, 2037, 2114, 2115, 2116, 2046,
     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,   90, 2126,

     2127,   90,   90,   90,   90, 2132,   90, 2133, 2136,   90,
       90,   90,   90, 2129, 2128,   90, 2130, 2131,   90, 2137,
     2138, 2139, 2125,   90,   90,   90,   90, 2141,   90,   90,
     2146, 2144,   90,   90,   90, 2147,   90,   90, 2134, 2135,
       90, 2148,   90, 2149, 2150, 2151, 2143, 2152,   90, 1201,
     2153, 2154, 2155, 2156, 2142, 2157, 2159, 2160, 2140, 2161,
     1232, 2145, 2162, 1241, 2163,   90,   90,  767,   90, 2158,
     2167, 2168, 2170,   90,   90,   90,   90, 2171, 2164, 2165,
     2166, 2172,   90,   90, 2174, 2175,   90, 2176, 2177, 2178,
       90, 2179, 2169,   90,   90, 2181,   90, 2182, 2183,   90,

       90,   90, 2185, 2186,   90, 2188, 2188,   90,   90, 2192,
     2173, 2047, 2047, 2047, 2187, 2187, 2187, 2190, 2190, 1492,
     2180, 2189, 2189, 2189, 2191, 2191, 2191, 2057, 1884, 1884,
     1884, 2184, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
     1884, 2193, 2193, 2193, 2194, 2194, 2194, 2195, 2195, 2195,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 2196, 2196, 2196, 2197, 2197, 2197, 2198, 2198,
     2198, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 2199,
       90, 2203,   90,   90, 2204, 2205, 2206, 2207,   90, 2200,

       90,   90, 2209, 2210, 2211, 2201, 2212, 2213, 2217,   90,
       90, 2218, 2219, 2220, 2221, 2222, 2208,   90,   90, 2202,
     2223, 2224, 2215, 2225, 2226, 2144, 2214, 2227, 2228, 2229,
     2230, 2231, 2232, 1586, 2176, 2179, 2216, 2233, 2234, 2235,
     2236, 2237, 2238, 2239, 2240,   90, 2242, 2243, 2247,   90,
     2245, 2246, 2248,   90,   90, 2251,   90,   90,   90,   90,
       90, 2252,   90, 2253,   90, 2241,   90,   90,   90, 1208,
     2256,   90,   90, 1770,   90,   90, 2257, 2244, 2249,   90,
       90, 2250,   90,   90, 2258, 2259, 2260, 2261, 2262, 2254,
     2263, 2264, 2265, 2266, 2267, 2255, 2268, 2269, 2270, 2271,

       90,   90,   90, 2275, 2276, 2278, 1226,   90,   90,   90,
       90,   90, 2280, 2284, 2285,   90, 2281, 1388, 2286,   90,
     2287,  791,   90, 2288, 2282,   90, 2272, 2273, 2277, 2274,
       90, 2283, 2290,   90, 2047, 2047, 2047, 2279, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2291, 2291, 2291,
     2292, 2292, 2292, 2289, 2293, 2293, 2293, 1884, 1884, 1884,
     1884, 1884, 1884, 1884, 1884, 1884, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 2294,   90,   90,   90, 2297,
     2298, 2299, 2300, 2301,   90,   90,   90, 2302, 2303,  398,
     2304, 2305, 2306, 2307,   90,   90, 2309, 2295, 2243, 2310,

     2245, 2246,   90,   90, 2311, 2296,  402, 2312, 2313, 2314,
     2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324,
     2325, 2326, 2308,   90, 2328, 2329, 2330, 2331, 2332, 2333,
       90,   90, 2327,   90,   90, 2336, 2337, 1755,   90,   90,
     2340,   90,   90,   90, 1547, 2341, 1773,   90, 2342, 2343,
     2346,   90, 2344, 2347, 2348, 2349, 2350, 2334, 2353, 2345,
     2339, 2338, 2351, 2335,   90, 2352,   90,   90, 2354, 2355,
       90,   90,   90, 2358,   90,   90, 2359, 2360,   90,   90,
     2361, 2362, 2363, 2364, 2365, 2366,   90, 2356, 2357, 2367,
     2047, 2047, 2047, 2368,   90, 2047, 2047, 2047, 2047, 2047,

     2047,   90, 2371, 2372,   90, 2373, 2374, 2375, 2376,   90,
     2377, 2369,   90, 2370, 2378, 2379,   90, 2381, 2329, 2382,
     2383, 2384, 2385, 2386,   90, 2380, 2387, 2388, 2389, 2390,
       90, 2392, 2393, 2394, 2395, 2396, 2397,   90,   90,   90,
     2399, 2391, 2400,   90, 2404,   90,   90,   90, 2405, 2406,
     2407,   90, 2398, 2408,   90, 2409, 2410, 2411, 2401, 2412,
     2413, 2416, 2417, 2418, 2419, 2420, 2421,   90,   90, 2414,
     2425, 2415, 2426, 2402, 2427,   90,   90, 2428, 2429, 2430,
     2403, 2431, 2432, 2433,   90,   90, 2435, 2436, 2437, 2438,
     2424, 2439,   90,   90, 2422, 2440, 2441, 2442, 2443,   90,

     2444, 2423, 2434, 2445,  399, 2446, 2447,   90, 2449, 2451,
     2452, 2453,   90, 2448, 2455, 2450, 2456, 2457, 2457,  403,
       90, 2458, 2459, 2460, 2461, 2454, 2462, 2463,   90,   90,
     1939, 1944,   90, 1948, 2465,   90,   90,   90, 2466, 2467,
       90, 2464, 2464, 2468, 2469, 2470, 2471, 2472, 2473, 2474,
     2475, 2476, 1400, 2477,   90, 2481,   90, 2482,   90, 2483,
     2484, 2485,   90, 2478,   90, 2479,   90, 2486, 2487,   90,
     2489, 2491, 2492, 2480, 2493, 2494, 2495,   90, 2496, 2490,
     2497, 2460, 2498, 2499, 2488, 2499, 2500, 2501, 2502, 2503,
     2504, 2505, 2506, 2507, 2508,   90,   90, 2101, 2510,   90,

     2511, 2512, 2158,   90,   90, 2513, 2514,   90, 2515, 2516,
     2517, 2518, 2519,  453, 2523,   90,   90, 2522, 2524, 2525,
     2526, 2527, 2509,   90,   90,   90, 2528, 2529,   90, 2531,
     2532, 2533, 2534, 2535, 2536, 2504,   90, 2537, 2538, 2539,
     2540, 2541, 2542, 2520, 2521, 2544, 2545, 2546,   90, 2224,
     2548, 2543, 2227, 2549, 2550, 2551,   90, 2530, 2552, 1586,
     2553, 2233,   90,   90,   90, 2547, 2557, 2558, 2559, 1240,
       90,   90,   90, 2320, 2560,   90, 2562, 2563, 2564, 2554,
     2555, 2565, 2566,   90, 2567, 2568, 2569, 2570, 2571, 2572,
     2573, 2556, 2574, 2575, 2576,   90, 2578, 2315, 2561, 2316,

     2317, 2579, 2580,   90,   90,   90,   90, 2584, 2585, 2586,
       90, 2588,   90,   90,   90, 2589, 2590, 2591,   90, 2592,
     2593, 2594, 2595, 2583, 2596, 2597, 2598, 2581, 2582, 2577,
     2599, 2600,   90, 2601, 2602,   90,   90, 2605,   90, 2587,
       90, 2606,   90,   90,   90,  522,   90, 2607, 2608, 2609,
       90, 2610,  752, 2611, 2611, 2612, 2613, 2603, 2603, 2614,
     2615, 2616, 2617, 2618, 2619,   90,   90, 2620, 2621,  397,
      758, 2382, 2604,   90,   90, 2324, 2325, 2622, 2623,  528,
     2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633,
     2634, 2635, 2637, 2638, 2639, 2640, 2641, 2642, 2636,  780,

     2606, 2606,  752, 2643, 2644, 2645,  758, 2646,  758,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   90, 1783, 1782,   90,  101,  101,  101,  101,
      101,  101,  101,  110, 1781, 1780, 1779,  110,  110,  113,
     1679, 1778,  113, 1673,  113, 1777, 1773,  113,  124, 1772,
     1771,  124, 1770,  124, 1769, 1768,  124,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  257, 1767,
     1766,  257,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,   76,   76, 1765,   76,   76,   76,   76,
       76,   76,   76,   76,  271,  271, 1764,  271,  271,  271,
      271,  271,  271,  271,  271,  297,  297,  297,  297,  297,
      297,  297,  306, 1763, 1623,  306,  330, 1762, 1620,  330,
      340,  340,  340,  340,  340,  340,  340,  356, 1761, 1760,
      356,  366,  366,  366,  366,  366,  366,  366,  568,  568,
      568,  568,  568,  568,  568,  591,  591, 1759,  591,  591,
      591,  591,  591,  591,  591,  591,  617,  617,  617,  617,
      617,  617,  617,  639,  639,  639,  639,  639,  639,  639,
      665,  665,  665,  665,  665,  665,  665, 1139, 1139, 1758,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1143, 1143,
     1757, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1511, 1756, 1755, 1511, 1754, 1511, 1610, 1753, 1511,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1531, 1704, 1704, 1704, 1704, 1752, 1704, 1607, 1606, 1704,
     1704, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1792, 1792,
     1605, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1884,
     1884, 1884, 1884, 1603, 1884, 1884, 1751, 1884, 1884, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2056, 1750, 1747, 1746, 2056, 2056, 1745,
     1744, 1743, 1742, 1741, 1740, 1739, 1738, 1737, 1533, 1730,
     1724, 1698, 1697, 1696, 1693, 1692, 1689, 1686, 1682, 1680,
     1678, 1676, 1675, 1674, 1671, 1670, 1669, 1668, 1667, 1666,
     1662, 1661, 1660, 1659, 1655, 1654, 1642, 1639, 1638, 1637,
     1630, 1629, 1626, 1625, 1622, 1617, 1604, 1600, 1599, 1598,
     1596, 1595, 1594, 1591, 1590, 1589, 1588, 1587, 1586, 1585,
     1584, 1583, 1484, 1582, 1581, 1580, 1579, 1578, 1459, 1573,
     1572, 1445, 1569, 1568, 1442, 1567, 1566, 1565, 1564, 1563,

     1562, 1561, 1560, 1559, 1558, 1557, 1556, 1555, 1554, 1553,
     1552, 1551, 1550, 1549, 1548, 1547, 1544, 1543, 1542, 1541,
     1540, 1539, 1538, 1537, 1536, 1535, 1534, 1503, 1500, 1497,
     1493, 1490, 1488, 1486, 1485, 1481, 1480, 1479, 1478, 1477,
     1476, 1474, 1473, 1462, 1458, 1457, 1450, 1449, 1446, 1437,
     1424, 1415, 1414, 1413, 1326, 1412, 1411, 1322, 1410, 1409,
     1408, 1405, 1404, 1402, 1401, 1400, 1399, 1398, 1397, 1396,
     1293, 1292, 1395, 1394, 1393, 1286, 1392, 1391, 1390, 1389,
     1386, 1385, 1384, 1383, 1382, 1381, 1380, 1379, 1378, 1377,
     1376, 1375, 1374, 1373, 1372, 1371, 1370, 1369, 1368, 1367,

     1253, 1366, 1365, 1364, 1363, 1248, 1362, 1361, 1356, 1355,
     1352, 1349, 1348, 1325, 1319, 1314, 1309, 1294, 1291, 1287,
     1267, 1061, 1245, 1244, 1243, 1242, 1241, 1240, 1117, 1239,
     1238, 1237, 1236, 1235, 1111, 1234, 1233, 1232, 1231, 1106,
     1230, 1229, 1228, 1102, 1227, 1225, 1224, 1223, 1222, 1221,
     1093, 1220, 1091, 1219, 1218, 1217, 1216, 1215, 1214, 1083,
     1213, 1212, 1211, 1210, 1209, 1207, 1206, 1205, 1204, 1203,
     1201, 1200, 1199, 1198, 1197, 1064, 1195, 1194, 1193, 1192,
     1191, 1190, 1185, 1184, 1181, 1180, 1179, 1178, 1177, 1176,
      943, 1088, 1039, 1038, 1037, 1036, 1035,  723, 1034, 1033,

     1032, 1031, 1030, 1029, 1028, 1027, 1024, 1023, 1022, 1021,
     1020, 1019, 1018, 1015, 1014, 1013, 1012, 1011, 1010, 1009,
     1008,  714, 1007, 1006, 1005,  839, 1004, 1003, 1002, 1001,
     1000,  997,  996,  995,  994,  993,  992,  991,  990,  989,
      988,  987,  986,  985,  984,  983,  714,  982,  981,  980,
      979,  978,  977,  976,  975,  974,  969,  968,  967,  966,
      965,  964,  963,  962,  795,  929,  923,  916,  910,  906,
      900,  893,  887,  880,  874,  557,  794,  793,  792,  791,
      790,  787,  782,  781,  780,  779,  778,  770,  769,  766,
      761,  760,  759,  754,  753,  750,  749,  748,  747,  746,

      745,  740,  739,  738,  734,  733,  732,  731,  728,  727,
      726,  725,  720,  719,  715,  714,  713,  712,  711,  708,
      707,  706,  687,  681,  680,  674,  661,  655,  654,  648,
      632,  626,  616,  610,  606,  600,  590,  584,  268,  268,
      583,  577,  256,  256,  475,  468,  448,  440,  429,  415,
       90,  381,  375,  355,  349,  111,  329,  323,   90,  322,
      316,  296,  290, 2647,  268,  268,  256,  256,  164,  158,
      111, 2647,   71,   71,   67,   67,    9, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647
    } ;

static yyconst flex_int16_t yy_chk[6039] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,   12,   15,    2,   12,   15,   18,   18,   18,
       18,   18,   18,   18,   18,   25, 1591,   30,   39,   39,
       25,   46,    2,    2,    2,    2,    2,    2,   26,    2,
        2,   26,   30,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,   26,   46,    2,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       17,   27,   28,   31,   17,   29,   32,   28,   28,   29,
       34,   36,   36,   36,   41,   41,   27,   58,   51,   29,
       85,   85,   27,   51,   51,   31,   34,   32,   38,   38,
       38,   32,   40,   40,   40,   42,   42,   42,   58,   72,
     1592,   56,   72,   17,   17,   17,   17,   17,   17,   17,
       17,   22,   33,   63,   22,   56,   45,   33,   33,   22,
       45,   33,   63,   56,   33,   47,   33,   33,   45,   45,

       78,   33,   45,   33,   45,   45,   45,   47,   50,   48,
       47,   78,   52,   47,   48, 1593,   52,   50,   48,   52,
       50,  173,   54,   50,   48,   65,   52,   54,  173,   50,
       65,   54,   22,   22,   22,   22,   22,   22,   22,   22,
       23,   49, 1594,   23,   49,   49,   53,   53,   23,   55,
       55,   53,   57,   49,   55,   53,   57,   49,   49,   61,
       90,   53,  947,   62,   57,   49,   57,   57,   90,   75,
       57,   57,   75,   57,   61, 1229,   61,   62,   79,   62,
       69,   87,   87,   79, 1229,   59,   59,   96,   96,   79,
       59,   23,   23,   23,   23,   23,   23,   23,   23,   24,

       59,   59,   64,   24,   59,   59,   64,   82,   82,   82,
      947,   24,   84,   84,   84,   98,   98,   64,   64,   92,
       64,   64,   64,   69,   69,   69,   69,   69,   69,   69,
       69,   86,   86,   86,   88,   88,   88,   93,   93,   93,
      105,  105,   24,   24,   24,   24,   24,   24,   24,   24,
       44,  107,  107,   44,   91,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,   92,   92,   92,   92,   92,
      442,   44,   44,   44,   44,   44,   44,  442,   44,   44,
      118,  118,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,  113, 1595,   44,   60,   60,   95,

       95,   95,   60,  120,  120,   60,   60,   97,   97,   97,
      129,  129,   60,   99,   99,   99,   60,   60,   60,  102,
      102,  102,   60,   80,   80,   80, 1596,   80,  104,  104,
      104,  106,  106,  106,  108,  108,  108,  113,  113,  113,
      113,  113,  113,  113,  113,  114,  114,  114,  114,  114,
      114,  114,  114,  115,  115,  115,  117,  117,  117,  119,
      119,  119,  121,  121,  121,  126,  126,  126,  128,  128,
      128, 1598,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   81,   81,   81, 1599,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,  112,  131,  131,  112,  130,
      130,  130, 1603,  112,  125,  125,  125,  125,  125,  125,
      125,  125,  132,  132,  132,  134,  135,  136,  169,  138,
      124,  134,  169,  134,  135,  136,  137,  138,  169,  141,
      135,  146,  147,  136,  137,  149,  139,  141,  175,  146,
      147,  146,  175,  149,  139,  138,  112,  112,  112,  112,

      112,  112,  112,  112,  123,  137,  141,  123,  139,  147,
      262,  262,  123,  124,  124,  124,  124,  124,  124,  124,
      124,  140,  142,  143,  171,  145,  148,  171, 1604,  140,
      142,  143,  144,  145,  148,  142,  150,  143,  145,  151,
      144,  140,  152,  153,  150,  150,  154,  151,  176,  151,
      152,  153,  176,  148,  154,  123,  123,  123,  123,  123,
      123,  123,  123,  144,  152,  155,  156,  183,  151,  183,
      411,  152,  411,  155,  156,  155,  158,  158,  158,  159,
      159,  159,  160,  160,  160,  161,  161,  161, 1605,  182,
      156,  162,  162,  162,  155,  163,  163,  163,  164,  164,

      164,  166,  168,  968,  182,  168,  182,  968,  168,  166,
      166,  170,  170,  166,  174,  166,  166,  166,  174,  178,
      170,  994,  174, 1607,  170,  264,  264,  178,  174,  178,
      178,  180,  170,  178,  178,  180,  178,  259,  259,  259,
      181,  185,  994,  197,  181,  180,  180,  181,  181,  180,
      180,  197,  185,  185,  181,  185,  185,  185,  181,  181,
      181,  187,  188,  190,  189, 1610,  197,  191,  192,  187,
      188,  190,  189,  187,  189,  191,  192,  193,  191,  188,
      194, 1617,  196,  195,  198,  193,  200,  190,  194,  190,
      196,  195,  198,  194,  200,  192,  195, 1233,  198,  199,

      201,  202,  196,  196,  196,  193, 1233,  199,  201,  202,
      469,  203,  198,  204,  200,  205,  201,  200,  202,  203,
      469,  204,  206,  205, 1622,  199,  199,  207,  203,  208,
      206,  209,  205,  210,  426,  207,  207,  208,  211,  209,
      204,  210,  206,  205,  212,  426,  211,  210,  211,  208,
      213,  216,  212,  209,  215, 1623,  214,  717,  213,  216,
      210,  210,  215,  210,  214,  214,  215,  217,  261,  261,
      261, 1625,  219,  216,  218,  217,  212,  213,  214,  214,
      219,  717,  218,  220,  221,  219,  222,  214,  217,  218,
      223,  220,  221,  224,  222,  222,  220,  225,  223,  226,

      227,  224,  263,  263,  263,  225,  421,  226,  227,  421,
      224,  221,  228, 1626,  223,  230,  445,  227,  221,  231,
      228,  229,  224,  230,  225,  232,  226,  231,  445,  229,
      229,  225,  233,  232,  228, 1174,  229, 1174,  234,  231,
      233,  235,  229,  230,  236,  231,  234,  237,  238,  235,
      239,  229,  236,  241, 1629,  237,  238,  240,  239,  275,
      275,  241,  237,  241,  242,  240,  240,  236,  234,  235,
      243,  244,  242,  236,  238,  237,  242,  238,  243,  244,
      243,  237,  249,  245,  250,  246,  246,  246,  246, 1630,
      249,  245,  250,  247,  244,  245,  243,  246,  257,  243,

      245,  247,  248,  245,  250,  246,  247, 1637,  249,  251,
      248,  252,  253,  271,  254,  248,  446,  251,  271,  252,
      253,  246,  254,  446,  271,  248,  251,  258,  258,  258,
      258,  258,  258,  258,  258,  252,  265,  265,  265, 1639,
      254,  257,  257,  257,  257,  257,  257,  257,  257,  272,
      272,  272,  274,  274,  274,  276,  276,  276,  277,  277,
      278,  278,  278,  280,  282,  282,  282, 1642,  280,  284,
      284,  284,  285,  285,  280,  281,  281,  281, 1643,  281,
      286,  286,  286,  287,  287,  288,  288,  288,  290,  290,
      290,  291,  291,  291,  292,  292,  292,  293,  293,  293,

      294,  294,  294,  295,  295,  295,  296,  296,  296,  297,
      298,  298,  298,  300,  300,  300,  718,  297,  301,  301,
      302,  302,  302,  718,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  303,  303,  304,  304,
      304,  306,  308,  308,  308,  310,  310,  310, 1644,  306,
      307,  307,  307,  307,  307,  307,  307,  307,  311,  311,
      312,  312,  312,  313,  313,  314,  314,  314,  316,  316,
      316,  317,  317,  317,  318,  318,  318,  319,  319,  319,
      320,  320,  320,  321,  321,  321,  322,  322,  322,  323,
      323,  323,  324,  324,  324,  325,  325,  325,  326,  326,

      326,  327,  327,  327,  328,  328,  328,  329,  329,  329,
      330,  331,  331,  331,  331,  331,  331,  331,  331,  332,
      332,  332,  334,  334,  334,  335,  335,  336,  336,  336,
      337,  337,  338,  338,  338,  341,  341,  341,  343,  343,
      343,  344,  344,  345,  345,  345,  346,  346,  347,  347,
      347,  356, 1645,  330,  330,  330,  330,  330,  330,  330,
      330,  349,  349,  349,  350,  350,  350,  351,  351,  351,
      352,  352,  352,  353,  353,  353,  354,  354,  354,  355,
      355,  355,  357,  357,  357,  357,  357,  357,  357,  357,
      358,  358,  358, 1646,  356,  356,  356,  356,  356,  356,

      356,  356,  360,  360,  360,  361,  361,  362,  362,  362,
      363,  363,  364,  364,  364,  367,  367,  367,  369,  369,
      369,  370,  370,  371,  371,  371,  372,  372,  373,  373,
      373,  375,  375,  375,  376,  376,  376,  377,  377,  377,
      378,  378,  378,  379,  379,  379,  380,  380,  380,  381,
      381,  381,  382,  383,  382,  384,  385,  386,  387,  388,
      382,  383, 1647,  384,  385,  386,  387,  388,  389,  387,
      383,  390,  391,  385,  392,  452,  389,  393,  384,  390,
      391,  452,  392,  388,  394,  393,  395,  392, 1387,  391,
      396,  397,  394,  390,  395, 1387,  389,  398,  396,  397,

      399,  400,  401,  393,  394,  398, 1392,  402,  399,  400,
      401,  403,  404, 1392,  395,  402,  420,  420,  396,  403,
      404,  405,  405,  405, 1648,  404,  406,  406,  406,  407,
      407,  407,  417,  417,  417,  431,  431,  435,  431,  457,
      450,  458,  572,  572,  459,  457,  450,  459,  466,  476,
      435,  435,  450,  466,  458, 1649,  466, 1650,  476,  435,
      458,  450,  467,  467,  467,  467,  476,  477, 1147,  478,
      479,  480,  481,  483,  482,  477,  477,  478,  479,  480,
      481,  483,  482,  484,  485, 1076,  478,  482,  486,  487,
      479,  484,  485,  485,  480,  489,  486,  487,  467,  488,

     1076,  490, 1652,  489,  569,  569,  569,  488,  486,  490,
      488,  491,  492,  487,  490,  493, 1147,  488,  494,  491,
      492,  495,  489,  493,  491,  496,  494,  497,  498,  495,
      492,  499,  591,  496,  500,  497,  498,  591,  501,  499,
      494,  502,  500,  591,  495,  498,  501,  503,  497,  502,
      504,  501, 1653,  496,  505,  503,  502,  506,  504,  499,
      500,  507,  505,  937,  508,  506,  937,  510,  509,  507,
      506,  503,  508,  504,  507,  510,  509,  508,  505,  509,
      511,  512,  513,  515,  940,  514,  516,  940,  511,  512,
      513,  515,  511,  514,  516,  510,  512,  517,  514,  518,

     1654,  513,  953,  516,  519,  517,  520,  518,  518,  521,
      517,  522,  519,  523,  520,  516,  524,  521,  525,  522,
      520,  523,  526,  527,  528,  524,  525,  529,  530,  531,
      526,  527,  528,  524,  523,  529,  530,  531,  532,  533,
      525,  531,  746,  529,  526,  534,  532,  533,  953,  535,
      532,  536,  533,  534,  746,  537,  530,  535,  538,  536,
      536,  539,  535,  537,  540,  541,  538,  543,  534,  539,
      542,  544,  540,  541,  539,  543, 1655,  545,  542,  544,
      544,  538,  574,  574,  542,  545,  546,  547,  543,  548,
      545,  541, 1656,  550,  546,  547,  541,  548,  549,  551,

      548,  550,  552,  553,  554,  944,  549,  551,  944,  559,
      552,  553,  554,  547,  546,  555,  553,  559,  549,  771,
      560,  551,  559,  555,  771,  549,  549,  554,  560,  552,
      561,  562,  555,  556,  556,  556,  556,  563,  561,  562,
      564, 1171,  565, 1658,  561,  563,  566, 1171,  564,  563,
      565,  560,  567, 1015,  566,  566,  571,  571,  571,  562,
      567,  573,  573,  573,  575,  575,  575,  577,  577,  577,
      565,  578,  578,  578, 1015,  567,  579,  579,  579,  580,
      580,  580,  581,  581,  581,  582,  582,  582,  583,  583,
      583,  584,  584,  584,  585,  585,  585,  586,  586,  586,

      587,  587,  587,  588,  588,  588,  589,  589,  589,  590,
      590,  590,  592,  592,  592,  594,  594,  594,  595,  595,
      596,  596,  596,  597,  597,  598,  598,  598,  600,  600,
      600,  601,  601,  601,  602,  602,  602,  603,  603,  603,
      604,  604,  604,  605,  605,  605,  606,  606,  606,  607,
      607,  607,  608,  608,  608,  609,  609,  609,  610,  610,
      610,  611,  611,  611,  612,  612,  612,  613,  613,  613,
      614,  614,  614,  615,  615,  615,  616,  616,  616,  617,
      618,  618,  618,  620,  620,  620, 1659,  617,  621,  621,
      622,  622,  622,  623,  623,  624,  624,  624,  626,  626,

      626,  627,  627,  627,  628,  628,  628,  629,  629,  629,
      630,  630,  630,  631,  631,  631,  632,  632,  632,  633,
      633,  633,  634,  634,  634,  635,  635,  635,  636,  636,
      636,  637,  637,  637,  638,  638,  638,  640,  640,  640,
      642,  642,  642,  643,  643,  644,  644,  644,  645,  645,
      646,  646,  646,  648,  648,  648,  649,  649,  649,  650,
      650,  650,  651,  651,  651,  652,  652,  652,  653,  653,
      653,  654,  654,  654,  655,  655,  655,  656,  656,  656,
      657,  657,  657,  658,  658,  658,  659,  659,  659,  660,
      660,  660,  661,  661,  661,  662,  662,  662,  663,  663,

      663,  664,  664,  664,  666,  666,  666,  668,  668,  668,
      669,  669,  670,  670,  670,  671,  671,  672,  672,  672,
      674,  674,  674,  675,  675,  675,  676,  676,  676,  677,
      677,  677,  678,  678,  678,  679,  679,  679,  680,  680,
      680,  681,  681,  681,  682,  682,  682,  683,  683,  683,
      684,  684,  684,  685,  685,  685,  686,  686,  686,  687,
      687,  687,  688,  688,  688,  689,  689,  689,  690,  690,
      690,  692,  693,  694,  695,  693, 1660,  696,  699,  692,
      696,  694,  695, 1661,  693,  979,  699,  702,  979,  696,
      779,  779,  693,  692, 1662,  702,  702,  696,  942,  942,

      699,  942,  695,  694,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  698,  700,  701,  703,  704,
     1657,  705,  796,  698,  700,  701,  703,  798,  704,  705,
      796,  703,  799,  797, 1667,  798,  704,  701,  800, 1657,
      799,  797,  700,  698,  801,  802,  800,  705,  797,  796,

      803,  804,  801,  802,  809, 1669,  799,  807,  803,  804,
      798,  808,  809,  803,  805,  807,  800,  802,  810,  808,
      801,  802,  805,  805,  806,  986,  810,  804,  986,  810,
      809,  805,  806,  806,  805,  811,  807,  805,  808,  812,
      812,  812,  812,  811,  814,  813,  815,  816,  813, 1063,
      818,  812, 1063,  814,  815,  816, 1169,  813,  818,  812,
      817,  814,  819,  815,  811,  813, 1169,  816,  817,  817,
      819,  820,  821,  822,  820,  949,  823,  824, 1670,  825,
      821,  822,  826,  820,  823,  824,  822,  825,  827,  819,
      826,  820,  828,  874,  874,  874,  827,  829,  821,  825,

      830,  828,  823,  824,  831,  829,  832,  833,  830,  828,
      829,  834,  831,  828,  832,  833,  835,  836,  837, 1671,
      834,  949,  949,  838,  835,  836,  837,  832,  834,  830,
      831,  838,  840, 1606,  833,  837,  838,  841,  842,  844,
      840,  836, 1606,  843,  835,  841,  845,  842,  844,  846,
      841,  843, 1463,  848,  845,  842,  844,  846, 1463,  847,
      840,  848,  849,  850, 1673,  851,  843,  847,  853,  855,
      849, 1391,  850,  851,  852, 1391,  853,  855,  845,  846,
      850,  848,  853,  852,  850,  847,  849,  854,  857,  855,
      856,  852,  858,  851,  859,  854,  854,  857,  856,  860,

      858,  862,  859,  858,  861,  857,  863,  860,  864,  865,
      862,  866,  861,  859,  863,  868,  864,  865,  862,  866,
      867,  869,  864,  863,  868,  870,  871,  860,  867,  869,
      861,  865,  868,  870,  871,  873,  872,  956,  866,  871,
      875,  875,  875,  873,  872,  956,  867,  872,  869,  876,
      876,  876,  870,  877,  877,  877,  878,  878,  878,  879,
      879,  879,  880,  880,  880,  881,  881,  881,  882,  882,
      882,  883,  883,  883,  884,  884,  884,  885,  885,  885,
      886,  886,  886,  887,  887,  887,  888,  888,  888,  889,
      889,  889,  890,  890,  890,  891,  891,  891,  892,  892,

      892,  893,  893,  893,  894,  894,  894,  895,  895,  895,
      896,  896,  896,  897,  897,  897,  898,  898,  898,  899,
      899,  899,  900,  900,  900,  901,  901,  901,  902,  902,
      902,  903,  903,  903,  904,  904,  904,  905,  905,  905,
      906,  906,  906,  907,  907,  907,  908,  908,  908,  909,
      909,  909,  910,  910,  910,  911,  911,  911,  912,  912,
      912,  913,  913,  913,  914,  914,  914,  915,  915,  915,
      916,  916,  916,  917,  917,  917,  918,  918,  918,  919,
      919,  919,  920,  920,  920,  921,  921,  921,  922,  922,
      922,  923,  923,  923,  924,  924,  924,  925,  925,  925,

      926,  926,  926,  927,  927,  927,  928,  928,  928,  929,
      929,  929,  930,  930,  930,  931,  931,  931,  932,  932,
      932,  933,  933,  933,  934,  934,  934,  935,  935,  935,
      936,  938,  946,  939, 1674,  948,  958,  951,  936,  938,
      938,  939,  950,  936,  958,  952, 1516, 1516,  954,  955,
      939,  945,  945,  945,  945,  945,  954,  955,  958,  957,
     1099,  961,  971, 1043, 1040,  954,  955,  957,  957,  961,
      971, 1043, 1040,  971, 1675, 1099,  971, 1040,  946,  946,
      946,  948,  948,  948,  951,  951, 1043, 1676,  950,  950,
      950,  952,  952,  952,  978,  978,  978,  978, 1518, 1518,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  959, 1070,  960,  960, 1070, 1041,  960, 1045,
      959,  960, 1042,  960,  960, 1041, 1044, 1045,  960, 1046,
      960, 1042, 1047,  959, 1044, 1044, 1678, 1046, 1679, 1042,
     1048, 1047, 1049, 1680, 1051, 1050, 1041, 1045, 1048, 1047,
     1049, 1048, 1051, 1050, 1052, 1049, 1050, 1053, 1046, 1686,
     1054, 1055, 1052, 1056, 1051, 1053, 1058, 1052, 1054, 1055,
     1057, 1056, 1068, 1059, 1058, 1689, 1140, 1066, 1057, 1140,
     1068, 1059, 1065, 1055, 1053, 1066, 1693, 1056, 1054, 1068,
     1065, 1057, 1153, 1694, 1058, 1059, 1060, 1060, 1060, 1060,

     1066, 1067, 1069, 1071, 1065, 1073, 1072, 1074, 1695, 1067,
     1069, 1071, 1067, 1073, 1072, 1074, 1071, 1072, 1077, 1075,
     1620, 1078, 1079, 1080, 1144, 1081, 1077, 1144, 1075, 1078,
     1079, 1080, 1073, 1081, 1082, 1074, 1075, 1084, 1153, 1085,
     1620, 1086, 1081, 1082, 1087, 1084, 1079, 1085, 1078, 1086,
     1084, 1082, 1087, 1089, 1696, 1075, 1090, 1093, 1092, 1085,
     1697, 1094, 1089, 1086, 1145, 1090, 1092, 1145, 1093, 1094,
     1089, 1698, 1093, 1090, 1093, 1093, 1093, 1095, 1096, 1092,
     1097, 1098, 1703, 1100, 1101, 1095, 1096, 1103, 1097, 1098,
     1095, 1100, 1101, 1097, 1104, 1103, 1105, 1101, 1108, 1708,

     1714, 1107, 1109, 1104, 1105, 1096, 1108, 1103, 1098, 1107,
     1109, 1104, 1110, 1114, 1107, 1112, 1105, 1113, 1115, 1109,
     1110, 1110, 1114, 1112, 1116, 1113, 1115, 1112, 1109, 1118,
     1114, 1119, 1116, 1120, 1113, 1121, 1122, 1118, 1196, 1119,
     1717, 1196, 1120, 1121, 1122, 1412, 1115, 1723, 1121, 1412,
     1120, 1123, 1123, 1123, 1124, 1124, 1124, 1125, 1125, 1125,
     1122, 1126, 1126, 1126, 1127, 1127, 1127, 1128, 1128, 1128,
     1129, 1129, 1129, 1130, 1130, 1130, 1131, 1131, 1131, 1132,
     1132, 1132, 1133, 1133, 1133, 1134, 1134, 1134, 1135, 1135,
     1135, 1136, 1136, 1136, 1137, 1137, 1137, 1138, 1141, 1142,

     1138, 1146, 1737, 1161, 1148, 1162, 1141, 1142, 1149, 1138,
     1150, 1161, 1151, 1162, 1738, 1152, 1164, 1138, 1141, 1154,
     1710, 1710, 1142, 1155, 1164, 1248, 1156, 1202, 1165, 1157,
     1202, 1161, 1158, 1162, 1248, 1159, 1165, 1246, 1160, 1739,
     1164, 1266, 1248, 1165, 1266, 1246, 1740, 1146, 1146, 1146,
     1148, 1148, 1148, 1741, 1149, 1149, 1150, 1150, 1150, 1151,
     1151, 1152, 1152, 1152, 1246, 1154, 1154, 1154, 1742, 1155,
     1155, 1155, 1156, 1156, 1156, 1157, 1157, 1157, 1158, 1158,
     1158, 1159, 1159, 1159, 1160, 1160, 1160, 1163, 1166, 1207,
     1744, 1166, 1745, 1175, 1247, 1163, 1249, 1163, 1207, 1250,

     1166, 1175, 1247, 1175, 1249, 1251, 1252, 1250, 1166, 1746,
     1254, 1464, 1255, 1251, 1252, 1464, 1163, 1247, 1254, 1250,
     1255, 1256, 1175, 1249, 1257, 1207, 1258, 1259, 1747, 1256,
     1252, 1260, 1257, 1262, 1258, 1259, 1255, 1257, 1254, 1260,
     1259, 1262, 1261, 1263, 1260, 1272, 1750, 1264, 1272, 1256,
     1261, 1263, 1751, 1261, 1258, 1264, 1265, 1268, 1467, 1262,
     1263, 1269, 1467, 1270, 1265, 1268, 1268, 1265, 1271, 1269,
     1264, 1270, 1273, 1752, 1274, 1465, 1271, 1276, 1465, 1275,
     1278, 1273, 1274, 1269, 1753, 1279, 1276, 1275, 1278, 1273,
     1271, 1270, 1275, 1279, 1276, 1282, 1283, 1284, 1285, 1754,

     1288, 1278, 1274, 1282, 1283, 1284, 1285, 1284, 1278, 1288,
     1289, 1295, 1302, 1549, 1290, 1756, 1549, 1288, 1289, 1295,
     1302, 1303, 1290, 1282, 1284, 1285, 1284, 1290, 1284, 1303,
     1305, 1668, 1285, 1304, 1303, 1668, 1308, 1505, 1305, 1289,
     1292, 1310, 1304, 1292, 1308, 1292, 1757, 1505, 1312, 1310,
     1304, 1292, 1758, 1292, 1310, 1292, 1312, 1292, 1292, 1313,
     1292, 1315, 1292, 1308, 1317, 1316, 1318, 1313, 1601, 1315,
     1320, 1601, 1317, 1316, 1318, 1651, 1312, 1318, 1320, 1321,
     1323, 1317, 1760, 1320, 1651, 1762, 1324, 1321, 1323, 1328,
     1327, 1330, 1313, 1316, 1324, 1332, 1324, 1328, 1327, 1330,

     1333, 1321, 1327, 1326, 1330, 1334, 1326, 1763, 1331, 1328,
     1335, 1764, 1342, 1324, 1336, 1324, 1331, 1324, 1326, 1337,
     1342, 1326, 1326, 1329, 1338, 1343, 1329, 1344, 1761, 1416,
     1331, 1329, 1345, 1343, 1761, 1344, 1339, 1416, 1343, 1340,
     1345, 1332, 1332, 1332, 1341, 1342, 1333, 1333, 1333, 1765,
     1344, 1334, 1334, 1334, 1345, 1428, 1335, 1335, 1335, 1766,
     1336, 1336, 1336, 1428, 1767, 1337, 1337, 1337, 1712, 1712,
     1338, 1338, 1338, 1768, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1339, 1339, 1339, 1340, 1340, 1340, 1346, 1769,
     1341, 1341, 1341, 1359, 1347, 1347, 1346, 1347, 1360, 1417,

     1439, 1359, 1421, 1422, 1423, 1421, 1360, 1417, 1439, 1425,
     1426, 1422, 1771, 1423, 1421, 1427, 1359, 1346, 1425, 1426,
     1360, 1423, 1421, 1422, 1427, 1429, 1425, 1426, 1417, 1431,
     1430, 1772, 1427, 1429, 1432, 1433, 1436, 1431, 1429, 1430,
     1435, 1434, 1432, 1433, 1436, 1438, 1441, 1430, 1435, 1434,
     1440, 1431, 1443, 1438, 1441, 1719, 1719, 1444, 1433, 1440,
     1441, 1443, 1432, 1434, 1436, 1444, 1435, 1440, 1444, 1443,
     1447, 1774, 1448, 1438, 1451, 1452, 1453, 1454, 1447, 1447,
     1448, 1448, 1451, 1452, 1453, 1454, 1455, 1460, 1456, 1721,
     1721, 1470, 1470, 1453, 1455, 1460, 1456, 1461, 1452, 1455,

     1454, 1456, 1466, 1470, 1475, 1461, 1775, 1482, 1483, 1461,
     1466, 1487, 1475, 1491, 1460, 1482, 1466, 1483, 1492, 1487,
     1489, 1491, 1491, 1494, 1475, 1483, 1492, 1776, 1495, 1489,
     1482, 1494, 1496, 1475, 1498, 1475, 1495, 1489, 1777, 1487,
     1496, 1499, 1498, 1502, 1778, 1501, 1498, 1509, 1510, 1499,
     1495, 1502, 1494, 1501, 1499, 1509, 1510, 1513, 1513, 1513,
     1496, 1779, 1501, 1515, 1515, 1515, 1502, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1523, 1780, 1510, 1511, 1511,
     1511, 1511, 1517, 1517, 1517, 1521, 1511, 1519, 1519, 1519,
     1522, 1524, 1511, 1521, 1525, 1526, 1527, 1528, 1522, 1522,

     1529, 1530, 1781, 1526, 1527, 1528, 1783, 1521, 1529, 1530,
     1530, 1532, 1532, 1785, 1532, 1786, 1527, 1529, 1787, 1545,
     1597, 1523, 1523, 1523, 1788, 1789, 1528, 1545, 1597, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1524, 1524, 1524,
     1525, 1525, 1525, 1546, 1580, 1791, 1602, 1597, 1545, 1793,
     1795, 1546, 1793, 1580, 1602, 1580, 1600, 1600, 1600, 1600,
     1546, 1608, 1611, 1609, 1796, 1612, 1613, 1614, 1615, 1608,
     1611, 1611, 1609, 1612, 1613, 1614, 1615, 1616, 1613, 1602,
     1609, 1618, 1619, 1621, 1614, 1616, 1797, 1608, 1624, 1618,
     1619, 1621, 1628, 1798, 1618, 1627, 1624, 1631, 1799, 1632,

     1628, 1615, 1619, 1627, 1800, 1631, 1621, 1632, 1619, 1633,
     1634, 1636, 1628, 1802, 1635, 1803, 1624, 1633, 1634, 1627,
     1636, 1633, 1635, 1632, 1631, 1640, 1808, 1641, 1636, 1663,
     1664, 1677, 1665, 1672, 1640, 1641, 1634, 1663, 1664, 1677,
     1665, 1672, 1640, 1681, 1812, 1683, 1813, 1815, 1685, 1816,
     1684, 1681, 1663, 1683, 1664, 1665, 1685, 1672, 1684, 1687,
     1818, 1688, 1690, 1681, 1691, 1684, 1822, 1699, 1687, 1688,
     1690, 1700, 1691, 1683, 1690, 1699, 1687, 1823, 1828, 1700,
     1701, 1701, 1701, 1701, 1707, 1707, 1707, 1709, 1709, 1709,
     1691, 1711, 1711, 1711, 1701, 1699, 1829, 1830, 1700, 1704,

     1704, 1704, 1704, 1713, 1713, 1713, 1832, 1704, 1704, 1716,
     1716, 1716, 1833, 1704, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1718, 1718, 1718, 1720, 1720, 1720, 1722, 1722,
     1722, 1724, 1724, 1724, 1725, 1725, 1725, 1726, 1726, 1726,
     1727, 1727, 1727, 1728, 1728, 1728, 1729, 1729, 1729, 1834,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1715, 1715,
     1715, 1715, 1730, 1730, 1730, 1731, 1715, 1732, 1733, 1734,
     1735, 1736, 1715, 1731, 1748, 1732, 1733, 1734, 1735, 1736,
     1794, 1790, 1748, 1835, 1807, 1836, 1736, 1732, 1794, 1749,
     1790, 1734, 1807, 1731, 1801, 1804, 1748, 1749, 1790, 1837,

     1735, 1733, 1801, 1804, 1838, 1839, 1840, 1801, 1841, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1805, 1806, 1749,
     1809, 1842, 1811, 1804, 1810, 1805, 1806, 1844, 1814, 1809,
     1811, 1817, 1810, 1820, 1821, 1811, 1814, 1809, 1845, 1846,
     1817, 1820, 1821, 1824, 1847, 1806, 1805, 1810, 1817, 1825,
     1826, 1824, 1806, 1827, 1821, 1848, 1849, 1825, 1826, 1850,
     1820, 1827, 1851, 1826, 1853, 1827, 1854, 1855, 1856, 1857,
     1858, 1824, 1859, 1860, 1854, 1855, 1856, 1825, 1861, 1862,
     1863, 1864, 1865, 1867, 1866, 1868, 1861, 1870, 1871, 1873,
     1874, 1855, 1866, 1872, 1856, 1870, 1871, 1854, 1878, 1879,

     1875, 1871, 1872, 1879, 1876, 1880, 1861, 1870, 1875, 1881,
     1872, 1866, 1876, 1875, 1882, 1883, 1876, 1886, 1887, 1887,
     1887, 1888, 1882, 1894, 1883, 1890, 1890, 1882, 1889, 1889,
     1889, 1897, 1883, 1884, 1884, 1884, 1884, 1891, 1891, 1891,
     1903, 1884, 1884, 1892, 1892, 1899, 1899, 1884, 1885, 1885,
     1885, 1885, 1885, 1885, 1885, 1885, 1893, 1893, 1893, 1896,
     1896, 1896, 1898, 1898, 1898, 1900, 1900, 1900, 1901, 1901,
     1902, 1902, 1902, 1904, 1904, 1904, 1905, 1905, 1905, 1906,
     1906, 1906, 1926, 1927, 1884, 1884, 1884, 1884, 1884, 1884,
     1884, 1884, 1907, 1907, 1907, 1908, 1908, 1908, 1909, 1909,

     1909, 1910, 1910, 1910, 1911, 1911, 1911, 1912, 1912, 1912,
     1913, 1913, 1913, 1914, 1914, 1914, 1915, 1915, 1915, 1916,
     1916, 1916, 1917, 1917, 1917, 1918, 1918, 1918, 1919, 1919,
     1919, 1920, 1920, 1920, 1921, 1922, 1928, 1923, 1924, 1929,
     1925, 1930, 1921, 1931, 1922, 1923, 1924, 1932, 1925, 1923,
     1933, 1924, 1922, 1925, 1934, 1935, 1936, 1937, 1938, 1940,
     1941, 1942, 1943, 1945, 1936, 1937, 1946, 1947, 1936, 1943,
     1937, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
     1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
     1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,

     1978, 1979, 1980, 1981, 1982, 1983, 1976, 1984, 1987, 1979,
     1980, 1981, 1982, 1980, 1979, 1985, 1981, 1982, 1986, 1988,
     1990, 1991, 1976, 1985, 1993, 1994, 1986, 1995, 1997, 1998,
     2001, 1999, 1993, 1994, 2000, 2003, 1997, 1998, 1985, 1986,
     1999, 2004, 2000, 2005, 2006, 2007, 1998, 2008, 1999, 2009,
     2010, 2011, 2012, 2013, 1997, 2014, 2015, 2016, 1994, 2017,
     2018, 2000, 2019, 2020, 2021, 2022, 2023, 2025, 2024, 2014,
     2026, 2027, 2029, 2022, 2023, 2028, 2024, 2030, 2022, 2023,
     2024, 2031, 2032, 2028, 2033, 2034, 2035, 2036, 2037, 2039,
     2032, 2040, 2028, 2041, 2035, 2042, 2036, 2043, 2044, 2045,

     2040, 2041, 2046, 2049, 2036, 2051, 2051, 2045, 2040, 2055,
     2032, 2048, 2048, 2048, 2050, 2050, 2050, 2053, 2053, 2035,
     2041, 2052, 2052, 2052, 2054, 2054, 2054, 2056, 2058, 2058,
     2058, 2045, 2059, 2059, 2059, 2060, 2060, 2060, 2061, 2061,
     2061, 2062, 2062, 2062, 2063, 2063, 2063, 2064, 2064, 2064,
     2065, 2065, 2065, 2066, 2066, 2066, 2067, 2067, 2067, 2068,
     2068, 2068, 2069, 2069, 2069, 2070, 2070, 2070, 2071, 2071,
     2071, 2072, 2072, 2072, 2073, 2073, 2073, 2074, 2074, 2074,
     2075, 2075, 2075, 2076, 2076, 2076, 2077, 2077, 2077, 2078,
     2079, 2082, 2080, 2081, 2083, 2084, 2085, 2086, 2079, 2079,

     2080, 2081, 2087, 2088, 2089, 2080, 2090, 2091, 2094, 2092,
     2093, 2095, 2096, 2097, 2098, 2099, 2086, 2092, 2093, 2081,
     2100, 2102, 2092, 2103, 2104, 2105, 2091, 2106, 2107, 2108,
     2109, 2110, 2111, 2112, 2113, 2114, 2093, 2115, 2116, 2117,
     2118, 2121, 2122, 2123, 2124, 2125, 2126, 2128, 2132, 2129,
     2130, 2131, 2133, 2125, 2134, 2136, 2128, 2129, 2135, 2130,
     2131, 2137, 2134, 2139, 2128, 2125, 2135, 2130, 2131, 2141,
     2144, 2140, 2142, 2146, 2143, 2145, 2147, 2129, 2134, 2140,
     2142, 2135, 2143, 2145, 2148, 2149, 2150, 2151, 2152, 2142,
     2153, 2155, 2156, 2157, 2159, 2143, 2160, 2161, 2162, 2163,

     2164, 2165, 2166, 2167, 2168, 2171, 2172, 2169, 2164, 2165,
     2166, 2173, 2174, 2177, 2178, 2169, 2176, 2153, 2179, 2173,
     2181, 2182, 2180, 2183, 2176, 2184, 2164, 2165, 2169, 2166,
     2180, 2176, 2185, 2184, 2186, 2186, 2186, 2173, 2187, 2187,
     2187, 2188, 2188, 2188, 2189, 2189, 2189, 2190, 2190, 2190,
     2191, 2191, 2191, 2184, 2192, 2192, 2192, 2193, 2193, 2193,
     2194, 2194, 2194, 2195, 2195, 2195, 2196, 2196, 2196, 2197,
     2197, 2197, 2198, 2198, 2198, 2199, 2200, 2201, 2202, 2203,
     2204, 2205, 2206, 2207, 2200, 2201, 2202, 2208, 2209, 2201,
     2211, 2212, 2213, 2214, 2215, 2216, 2217, 2200, 2218, 2219,

     2220, 2221, 2215, 2216, 2222, 2202, 2215, 2223, 2225, 2226,
     2228, 2229, 2230, 2231, 2232, 2234, 2235, 2236, 2237, 2238,
     2239, 2240, 2216, 2241, 2243, 2244, 2245, 2246, 2247, 2248,
     2249, 2241, 2241, 2250, 2244, 2251, 2252, 2253, 2249, 2254,
     2256, 2250, 2244, 2255, 2258, 2259, 2260, 2254, 2261, 2262,
     2264, 2255, 2263, 2265, 2266, 2267, 2268, 2249, 2270, 2263,
     2255, 2254, 2269, 2250, 2272, 2269, 2273, 2274, 2275, 2276,
     2277, 2279, 2272, 2280, 2273, 2274, 2281, 2282, 2277, 2279,
     2283, 2284, 2285, 2286, 2287, 2288, 2289, 2277, 2279, 2290,
     2291, 2291, 2291, 2294, 2289, 2292, 2292, 2292, 2293, 2293,

     2293, 2295, 2297, 2298, 2296, 2300, 2301, 2302, 2304, 2295,
     2305, 2295, 2296, 2296, 2306, 2307, 2308, 2309, 2310, 2311,
     2312, 2313, 2314, 2318, 2308, 2308, 2319, 2321, 2322, 2323,
     2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2327, 2335,
     2336, 2327, 2337, 2338, 2340, 2334, 2339, 2335, 2341, 2342,
     2343, 2338, 2335, 2344, 2339, 2345, 2346, 2347, 2338, 2348,
     2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2349,
     2358, 2349, 2359, 2339, 2360, 2356, 2357, 2361, 2363, 2364,
     2339, 2365, 2366, 2368, 2370, 2369, 2371, 2372, 2373, 2374,
     2357, 2375, 2370, 2369, 2356, 2376, 2377, 2378, 2379, 2380,

     2381, 2356, 2369, 2383, 2370, 2384, 2385, 2380, 2386, 2387,
     2389, 2390, 2391, 2385, 2392, 2386, 2393, 2394, 2395, 2380,
     2391, 2396, 2397, 2398, 2399, 2391, 2400, 2401, 2402, 2403,
     2405, 2406, 2398, 2407, 2408, 2401, 2402, 2403, 2409, 2410,
     2398, 2402, 2403, 2411, 2412, 2413, 2414, 2415, 2416, 2417,
     2418, 2419, 2420, 2421, 2422, 2426, 2423, 2427, 2424, 2428,
     2429, 2431, 2422, 2422, 2423, 2423, 2424, 2432, 2433, 2434,
     2437, 2438, 2439, 2424, 2440, 2441, 2442, 2434, 2443, 2437,
     2444, 2445, 2446, 2447, 2434, 2448, 2449, 2450, 2451, 2453,
     2454, 2456, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2454,

     2467, 2468, 2469, 2463, 2464, 2470, 2471, 2454, 2472, 2473,
     2474, 2475, 2476, 2477, 2481, 2478, 2479, 2480, 2482, 2483,
     2484, 2485, 2463, 2478, 2479, 2480, 2486, 2487, 2488, 2489,
     2490, 2491, 2492, 2495, 2496, 2497, 2488, 2498, 2500, 2501,
     2502, 2503, 2504, 2478, 2479, 2506, 2507, 2508, 2509, 2510,
     2511, 2504, 2512, 2513, 2514, 2515, 2509, 2488, 2516, 2517,
     2518, 2519, 2520, 2521, 2522, 2509, 2523, 2525, 2526, 2527,
     2520, 2521, 2522, 2528, 2529, 2530, 2531, 2532, 2533, 2520,
     2521, 2534, 2535, 2530, 2536, 2537, 2538, 2539, 2540, 2541,
     2542, 2522, 2543, 2544, 2546, 2547, 2548, 2549, 2530, 2550,

     2551, 2552, 2553, 2547, 2554, 2555, 2556, 2557, 2559, 2560,
     2561, 2562, 2554, 2555, 2556, 2563, 2565, 2567, 2561, 2568,
     2569, 2570, 2571, 2556, 2572, 2573, 2574, 2554, 2555, 2547,
     2576, 2578, 2577, 2579, 2580, 2581, 2582, 2585, 2583, 2561,
     2577, 2586, 2587, 2581, 2582, 2577, 2583, 2588, 2589, 2590,
     2587, 2591, 2592, 2593, 2594, 2595, 2596, 2581, 2582, 2597,
     2598, 2600, 2601, 2602, 2605, 2603, 2604, 2607, 2608, 2587,
     2612, 2613, 2583, 2603, 2604, 2614, 2615, 2616, 2617, 2604,
     2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627,
     2628, 2629, 2631, 2632, 2633, 2634, 2635, 2636, 2629, 2637,

     2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2648,
     2648, 2648, 2648, 2648, 2648, 2648, 2648, 2648, 2648, 2648,
     2649, 2649, 2649, 2649, 2649, 2649, 2649, 2649, 2649, 2649,
     2649, 2650, 2650, 2650, 2650, 2650, 2650, 2650, 2650, 2650,
     2650, 2650, 2651, 1590, 1589, 2651, 2652, 2652, 2652, 2652,
     2652, 2652, 2652, 2653, 1588, 1587, 1585, 2653, 2653, 2654,
     1584, 1583, 2654, 1582, 2654, 1581, 1579, 2654, 2655, 1578,
     1577, 2655, 1576, 2655, 1575, 1574, 2655, 2656, 2656, 2656,
     2656, 2656, 2656, 2656, 2656, 2656, 2656, 2656, 2657, 1573,
     1572, 2657, 2658, 2658, 2658, 2658, 2658, 2658, 2658, 2658,

     2658, 2658, 2658, 2659, 2659, 1571, 2659, 2659, 2659, 2659,
     2659, 2659, 2659, 2659, 2660, 2660, 1570, 2660, 2660, 2660,
     2660, 2660, 2660, 2660, 2660, 2661, 2661, 2661, 2661, 2661,
     2661, 2661, 2662, 1569, 1568, 2662, 2663, 1567, 1566, 2663,
     2664, 2664, 2664, 2664, 2664, 2664, 2664, 2665, 1565, 1564,
     2665, 2666, 2666, 2666, 2666, 2666, 2666, 2666, 2667, 2667,
     2667, 2667, 2667, 2667, 2667, 2668, 2668, 1563, 2668, 2668,
     2668, 2668, 2668, 2668, 2668, 2668, 2669, 2669, 2669, 2669,
     2669, 2669, 2669, 2670, 2670, 2670, 2670, 2670, 2670, 2670,
     2671, 2671, 2671, 2671, 2671, 2671, 2671, 2672, 2672, 1562,

     2672, 2672, 2672, 2672, 2672, 2672, 2672, 2672, 2673, 2673,
     1561, 2673, 2673, 2673, 2673, 2673, 2673, 2673, 2673, 2674,
     2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674,
     2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675,
     2675, 2676, 1560, 1559, 2676, 1558, 2676, 1557, 1556, 2676,
     2677, 2677, 2677, 2677, 2677, 2677, 2677, 2677, 2677, 2677,
     2677, 2678, 2678, 2678, 2678, 1555, 2678, 1554, 1553, 2678,
     2678, 2679, 2679, 2679, 2679, 2679, 2679, 2679, 2680, 2680,
     1552, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2681,
     2681, 2681, 2681, 1551, 2681, 2681, 1550, 2681, 2681, 2682,

     2682, 2682, 2682, 2682, 2682, 2682, 2683, 2683, 2683, 2683,
     2683, 2683, 2683, 2684, 1548, 1544, 1543, 2684, 2684, 1542,
     1541, 1540, 1539, 1538, 1537, 1536, 1535, 1534, 1531, 1520,
     1514, 1508, 1507, 1506, 1504, 1503, 1500, 1497, 1493, 1490,
     1488, 1486, 1485, 1484, 1481, 1480, 1479, 1478, 1477, 1476,
     1474, 1473, 1472, 1471, 1469, 1468, 1462, 1459, 1458, 1457,
     1450, 1449, 1446, 1445, 1442, 1437, 1424, 1420, 1419, 1418,
     1415, 1414, 1413, 1410, 1409, 1408, 1407, 1406, 1404, 1403,
     1402, 1401, 1399, 1398, 1397, 1396, 1395, 1394, 1393, 1390,
     1389, 1386, 1385, 1384, 1383, 1382, 1381, 1380, 1379, 1378,

     1377, 1376, 1375, 1374, 1373, 1372, 1371, 1370, 1369, 1368,
     1367, 1366, 1364, 1363, 1362, 1361, 1358, 1357, 1356, 1355,
     1354, 1353, 1352, 1351, 1350, 1349, 1348, 1325, 1322, 1319,
     1314, 1311, 1309, 1307, 1306, 1301, 1300, 1299, 1298, 1297,
     1296, 1294, 1293, 1291, 1287, 1286, 1281, 1280, 1277, 1267,
     1253, 1245, 1244, 1243, 1242, 1239, 1238, 1237, 1236, 1235,
     1234, 1231, 1230, 1228, 1227, 1225, 1224, 1223, 1222, 1220,
     1219, 1218, 1216, 1215, 1214, 1213, 1212, 1211, 1210, 1209,
     1206, 1205, 1204, 1203, 1200, 1199, 1198, 1197, 1195, 1194,
     1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184,

     1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 1173, 1172,
     1170, 1168, 1167, 1117, 1111, 1106, 1102, 1091, 1088, 1083,
     1064, 1062, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032,
     1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022,
     1020, 1019, 1018, 1017, 1016, 1014, 1013, 1012, 1011, 1010,
     1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000,
      999,  998,  997,  996,  995,  991,  990,  989,  988,  987,
      985,  984,  983,  982,  981,  980,  977,  976,  975,  974,
      973,  972,  970,  969,  967,  966,  965,  964,  963,  962,
      941,  839,  795,  794,  793,  792,  790,  789,  788,  787,

      786,  785,  784,  783,  782,  781,  778,  777,  776,  775,
      774,  773,  772,  769,  768,  766,  765,  764,  763,  762,
      761,  760,  759,  756,  755,  754,  753,  750,  749,  748,
      747,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  722,  721,  720,  719,  716,  715,  712,  711,
      710,  709,  708,  707,  706,  673,  667,  647,  641,  625,
      619,  599,  593,  576,  570,  558,  475,  473,  472,  471,
      470,  468,  465,  464,  463,  462,  461,  456,  455,  451,
      449,  448,  447,  444,  443,  441,  440,  439,  438,  437,

      436,  434,  433,  432,  430,  429,  428,  427,  425,  424,
      423,  422,  419,  418,  416,  415,  414,  413,  412,  410,
      409,  408,  374,  368,  365,  359,  348,  342,  339,  333,
      315,  309,  305,  299,  289,  283,  279,  273,  268,  267,
      266,  260,  256,  255,  186,  184,  179,  177,  172,  167,
      157,  133,  127,  122,  116,  110,  109,  103,  101,  100,
       94,   89,   83,   73,   71,   70,   67,   66,   43,   37,
       19,    9,    8,    7,    4,    3, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,

     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int hxfst_flex_debug;
int hxfst_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *hxfsttext;
#line 1 "xfst-lexer.ll"
#line 4 "xfst-lexer.ll"
//! @file xfst-lexer.ll
//!
//! @brief a lexer for xfst
//!
//! @author Tommi A. Pirinen


//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, version 3 of the License.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if HAVE_CONFIG_H
#  include <config.h>
#endif

namespace hfst {
  class HfstTransducer;
}

#include "xfst-parser.hh"
#include "xfst-utils.h"
#include "XfstCompiler.h"

#include <assert.h>

extern void hxfsterror(const char *text);

int source_stack_size = 0;

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in xfst */
/* non-restricted ASCII */
/* special meaning in xre */
/* non-restricted ASCII in XRE */
/* keywords */
/* RegExp. stuff */
/* String entry part:
 * - any unrestricted ASCII-7,
 * - any high unicode codepoint (past U+007F) UTF-8-encoded
 * - any %-escaped UTF-8
 */
/* White space */



#line 2747 "xfst-lexer.cc"

#define INITIAL 0
#define REGEX_STATE 1
#define SOURCE_STATE 2
#define APPLY_STATE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hxfstlex_destroy (void );

int hxfstget_debug (void );

void hxfstset_debug (int debug_flag  );

YY_EXTRA_TYPE hxfstget_extra (void );

void hxfstset_extra (YY_EXTRA_TYPE user_defined  );

FILE *hxfstget_in (void );

void hxfstset_in  (FILE * in_str  );

FILE *hxfstget_out (void );

void hxfstset_out  (FILE * out_str  );

int hxfstget_leng (void );

char *hxfstget_text (void );

int hxfstget_lineno (void );

void hxfstset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hxfstwrap (void );
#else
extern int hxfstwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( hxfsttext, hxfstleng, 1, hxfstout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( hxfstin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( hxfstin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, hxfstin))==0 && ferror(hxfstin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(hxfstin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hxfstlex (void);

#define YY_DECL int hxfstlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after hxfsttext and hxfstleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( hxfstleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(hxfsttext[hxfstleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 96 "xfst-lexer.ll"


#line 2943 "xfst-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! hxfstin )
			hxfstin = stdin;

		if ( ! hxfstout )
			hxfstout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hxfstensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				hxfst_create_buffer(hxfstin,YY_BUF_SIZE );
		}

		hxfst_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of hxfsttext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2648 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2647 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 98 "xfst-lexer.ll"
{
    return ADD_PROPS;
}
	YY_BREAK
case 2:
*yy_cp = (yy_hold_char); /* undo effects of setting up hxfsttext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hxfsttext again */
YY_RULE_SETUP
#line 102 "xfst-lexer.ll"
{
    if (hfst::xfst::xfst_->getReadInteractiveTextFromStdin()) 
    {
        // let XfstCompiler take care of the input to apply up command
        return APPLY_UP;
    }
    else 
    {
        // read input to apply up command
        BEGIN(APPLY_STATE);
        return APPLY_UP;
    }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "xfst-lexer.ll"
{
    return APPLY_UP;
}
	YY_BREAK
case 4:
*yy_cp = (yy_hold_char); /* undo effects of setting up hxfsttext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hxfsttext again */
YY_RULE_SETUP
#line 120 "xfst-lexer.ll"
{
    if (hfst::xfst::xfst_->getReadInteractiveTextFromStdin()) 
    {
        // let XfstCompiler take care of the input to apply down command
        return APPLY_DOWN;
    }
    else 
    {
        // read input to apply down command    
        BEGIN(APPLY_STATE);
        return APPLY_DOWN;
    }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 134 "xfst-lexer.ll"
{
    return APPLY_DOWN;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 139 "xfst-lexer.ll"
{
    return APPLY_MED;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "xfst-lexer.ll"
{
    return AMBIGUOUS;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 147 "xfst-lexer.ll"
{
    return DEFINE_ALIAS;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 151 "xfst-lexer.ll"
{
    hxfstlval.text = hfst::xfst::strstrip(hxfsttext + strlen("apropos "));
    return APROPOS;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 156 "xfst-lexer.ll"
{
    hxfstlval.text = strdup("");
    return APROPOS;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 161 "xfst-lexer.ll"
{
    return ASSERT;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 165 "xfst-lexer.ll"
{
    return CLEANUP;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 169 "xfst-lexer.ll"
{
    return CLEAR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 173 "xfst-lexer.ll"
{
    return COLLECT_EPSILON_LOOPS;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 177 "xfst-lexer.ll"
{
    return COMPACT_SIGMA;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 181 "xfst-lexer.ll"
{
    return COMPILE_REPLACE_LOWER;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 185 "xfst-lexer.ll"
{
    return COMPILE_REPLACE_UPPER;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 189 "xfst-lexer.ll"
{
    return COMPLETE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "xfst-lexer.ll"
{
    return COMPOSE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 197 "xfst-lexer.ll"
{
    return CONCATENATE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 201 "xfst-lexer.ll"
{
    return LOOKUP_OPTIMIZE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 205 "xfst-lexer.ll"
{
    return REMOVE_OPTIMIZATION;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 210 "xfst-lexer.ll"
{
    return CROSSPRODUCT;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 214 "xfst-lexer.ll"
{
    char * dup = strdup(hxfsttext);
    dup[strlen(dup)-1] = ' '; // get rid of the ';'
    hxfstlval.name = hfst::xfst::strstrip(dup+strlen("define "));
    free(dup);
    return DEFINE_NAME;
}
	YY_BREAK
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up hxfsttext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hxfsttext again */
YY_RULE_SETUP
#line 222 "xfst-lexer.ll"
{
    hxfstlval.name = hfst::xfst::strstrip(hxfsttext+strlen("define "));
    return DEFINE_NAME;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 227 "xfst-lexer.ll"
{
    BEGIN(REGEX_STATE);
    hxfstlval.name = hfst::xfst::strstrip(hxfsttext+strlen("define "));
    return DEFINE_FUNCTION;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 233 "xfst-lexer.ll"
{
    BEGIN(REGEX_STATE);
    hxfstlval.name = hfst::xfst::strstrip(hxfsttext+strlen("define "));
    return DEFINE_NAME;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 239 "xfst-lexer.ll"
{
    return DETERMINIZE;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 243 "xfst-lexer.ll"
{
    hxfstlval.text = hfst::xfst::strstrip(hxfsttext + strlen("echo "));
    return ECHO;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 248 "xfst-lexer.ll"
{
    hxfstlval.text = strdup("");
    return ECHO;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 253 "xfst-lexer.ll"
{
    return EDIT_PROPS;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 257 "xfst-lexer.ll"
{
    return ELIMINATE_FLAG;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 261 "xfst-lexer.ll"
{
    return ELIMINATE_ALL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 265 "xfst-lexer.ll"
{
    return EPSILON_REMOVE;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 269 "xfst-lexer.ll"
{
    return EXTRACT_AMBIGUOUS;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 273 "xfst-lexer.ll"
{
    return EXTRACT_UNAMBIGUOUS;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 277 "xfst-lexer.ll"
{
    hxfstlval.text = hfst::xfst::strstrip(hxfsttext + strlen("help "));
    return DESCRIBE;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 282 "xfst-lexer.ll"
{
    hxfstlval.text = strdup("");
    return DESCRIBE;
}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up hxfsttext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hxfsttext again */
YY_RULE_SETUP
#line 287 "xfst-lexer.ll"
{
    hxfstlval.text = strdup(hxfsttext);
    return HFST;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 292 "xfst-lexer.ll"
{
    return XFST_IGNORE;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 296 "xfst-lexer.ll"
{
    return INTERSECT;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 300 "xfst-lexer.ll"
{
    return INSPECT;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 304 "xfst-lexer.ll"
{
    return INVERT;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 308 "xfst-lexer.ll"
{
    return LABEL_NET;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 312 "xfst-lexer.ll"
{
    return LIST;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 316 "xfst-lexer.ll"
{
    return LOADD;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 320 "xfst-lexer.ll"
{
    return LOADS;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 324 "xfst-lexer.ll"
{
    return LOWER_SIDE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 328 "xfst-lexer.ll"
{
    return MINIMIZE;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 332 "xfst-lexer.ll"
{
    return MINUS;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 336 "xfst-lexer.ll"
{
    return NAME;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 340 "xfst-lexer.ll"
{
    return NEGATE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 344 "xfst-lexer.ll"
{
    return ONE_PLUS;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 348 "xfst-lexer.ll"
{
    return POP;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 352 "xfst-lexer.ll"
{
    return PRINT_ALIASES;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 355 "xfst-lexer.ll"
{
    return PRINT_ARCCOUNT;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 358 "xfst-lexer.ll"
{
    return PRINT_DEFINED;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 361 "xfst-lexer.ll"
{
    return SAVE_DEFINITION;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 365 "xfst-lexer.ll"
{
    return SAVE_DEFINITIONS;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 369 "xfst-lexer.ll"
{
    return PRINT_DIR;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 373 "xfst-lexer.ll"
{
    return SAVE_DOT;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 376 "xfst-lexer.ll"
{
    return WRITE_ATT;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 380 "xfst-lexer.ll"
{
    return PRINT_FILE_INFO;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 383 "xfst-lexer.ll"
{
    return PRINT_FLAGS;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 386 "xfst-lexer.ll"
{
    return PRINT_LABELS;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 389 "xfst-lexer.ll"
{
    return PRINT_LABELMAPS;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 392 "xfst-lexer.ll"
{
    return PRINT_LABEL_COUNT;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 395 "xfst-lexer.ll"
{
    return PRINT_LIST;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 398 "xfst-lexer.ll"
{
    return PRINT_LISTS;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 401 "xfst-lexer.ll"
{
    return PRINT_LONGEST_STRING;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 404 "xfst-lexer.ll"
{
    return PRINT_LONGEST_STRING_SIZE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 407 "xfst-lexer.ll"
{
    return PRINT_LOWER_WORDS;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 410 "xfst-lexer.ll"
{
    return PRINT_NAME;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 413 "xfst-lexer.ll"
{
    return PRINT;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 416 "xfst-lexer.ll"
{
    return PRINT_PROPS;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 419 "xfst-lexer.ll"
{
    return PRINT_RANDOM_LOWER;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 422 "xfst-lexer.ll"
{
    return PRINT_RANDOM_UPPER;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 425 "xfst-lexer.ll"
{
    return PRINT_RANDOM_WORDS;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 428 "xfst-lexer.ll"
{
    return PRINT_SHORTEST_STRING_SIZE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 431 "xfst-lexer.ll"
{
    return PRINT_SHORTEST_STRING;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 434 "xfst-lexer.ll"
{
    return PRINT_SIGMA;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 437 "xfst-lexer.ll"
{
    return PRINT_SIGMA_COUNT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 440 "xfst-lexer.ll"
{
    return PRINT_SIGMA_WORD_COUNT;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 443 "xfst-lexer.ll"
{
    return PRINT_SIZE;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 446 "xfst-lexer.ll"
{
    return PRINT_STACK;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 449 "xfst-lexer.ll"
{
    return PRINT_UPPER_WORDS;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 453 "xfst-lexer.ll"
{
    return PRINT_WORDS;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 456 "xfst-lexer.ll"
{
    return PRUNE_NET;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 461 "xfst-lexer.ll"
{
    return PUSH_DEFINED;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 465 "xfst-lexer.ll"
{
    hxfstlval.name = strdup("");         
    return QUIT;                         
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 470 "xfst-lexer.ll"
{
    return READ_LEXC;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 474 "xfst-lexer.ll"
{
    return READ_ATT;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 478 "xfst-lexer.ll"
{
    return READ_PROPS;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 481 "xfst-lexer.ll"
{
    return READ_PROLOG;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 484 "xfst-lexer.ll"
{
    BEGIN(REGEX_STATE);
    return READ_REGEX;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 488 "xfst-lexer.ll"
{
    return READ_SPACED;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 491 "xfst-lexer.ll"
{
    return READ_TEXT;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 495 "xfst-lexer.ll"
{
    return REVERSE;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 499 "xfst-lexer.ll"
{
    return ROTATE;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 503 "xfst-lexer.ll"
{
    return SAVE_DEFINITIONS;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 507 "xfst-lexer.ll"
{
    return SAVE_STACK;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 511 "xfst-lexer.ll"
{
    return SET;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 515 "xfst-lexer.ll"
{
    return SHOW_ALL;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 519 "xfst-lexer.ll"
{
    return SHOW;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 523 "xfst-lexer.ll"
{
    return SHUFFLE;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 527 "xfst-lexer.ll"
{
    return SIGMA;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 531 "xfst-lexer.ll"
{
    return SORT;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 535 "xfst-lexer.ll"
{
    BEGIN(SOURCE_STATE);
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 539 "xfst-lexer.ll"
{
    return SUBSTITUTE_NAMED;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 543 "xfst-lexer.ll"
{
    return FOR;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 547 "xfst-lexer.ll"
{
    return SUBSTITUTE_LABEL;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 551 "xfst-lexer.ll"
{
    return SUBSTITUTE_SYMBOL;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 555 "xfst-lexer.ll"
{
    return SUBSTRING;
}
	YY_BREAK
case 114:
*yy_cp = (yy_hold_char); /* undo effects of setting up hxfsttext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hxfsttext again */
YY_RULE_SETUP
#line 559 "xfst-lexer.ll"
{
    hxfstlval.text = strdup(hxfsttext+7);
    return SYSTEM;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 564 "xfst-lexer.ll"
{
    return TEST_EQ;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 567 "xfst-lexer.ll"
{
    return TEST_FUNCT;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 570 "xfst-lexer.ll"
{
    return TEST_ID;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 573 "xfst-lexer.ll"
{
    return TEST_INFINITELY_AMBIGUOUS;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 576 "xfst-lexer.ll"
{
    return TEST_LOWER_BOUNDED;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 579 "xfst-lexer.ll"
{
    return TEST_LOWER_UNI;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 582 "xfst-lexer.ll"
{
    return TEST_NONNULL;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 585 "xfst-lexer.ll"
{
    return TEST_NULL;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 588 "xfst-lexer.ll"
{
    return TEST_OVERLAP;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 591 "xfst-lexer.ll"
{
    return TEST_SUBLANGUAGE;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 594 "xfst-lexer.ll"
{
    return TEST_UPPER_BOUNDED;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 597 "xfst-lexer.ll"
{
    return TEST_UPPER_UNI;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 600 "xfst-lexer.ll"
{
    return TEST_UNAMBIGUOUS;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 604 "xfst-lexer.ll"
{
    return TURN;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 608 "xfst-lexer.ll"
{
    return TWOSIDED_FLAGS;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 612 "xfst-lexer.ll"
{
    return UNDEFINE;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 616 "xfst-lexer.ll"
{
    return UNLIST;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 620 "xfst-lexer.ll"
{
    return UNION;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 624 "xfst-lexer.ll"
{
    return UPPER_SIDE;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 628 "xfst-lexer.ll"
{
    return VIEW;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 632 "xfst-lexer.ll"
{
    return SAVE_PROLOG;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 635 "xfst-lexer.ll"
{
    return SAVE_SPACED;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 638 "xfst-lexer.ll"
{
    return SAVE_TEXT;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 642 "xfst-lexer.ll"
{
    return ZERO_PLUS;
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 646 "xfst-lexer.ll"
{
    // ^ to return input to apply up/down command, first read everything

    BEGIN(0);

    // search for a special end string
    std::string str(hxfsttext);
    std::size_t end_found = str.find("<ctrl-d>"); 

    // CASE 1: no end string found: the rest is input to apply 
    if (end_found == std::string::npos) {
        hxfstlval.text = hxfsttext;
        return APPLY_INPUT;
    }

    // CASE 2: there are other commands after the input to apply
    unsigned int total_length = (unsigned int)strlen(hxfsttext);
    unsigned int endpos = (unsigned int)end_found; 

    // copy the input to apply and set is as return value
    char buf [endpos + 1];
    for (unsigned int i=0; i < endpos; i++)
    { 
      buf[i] = hxfsttext[i];
    }
    buf[endpos] = '\0';
    hxfstlval.text = strdup(buf);

    // put back the rest of the input text, excluding the "<ctrl-d>"
    if (total_length > 0) 
    {
      // unput modifies hxfsttext, so it must be copied before unputting
      char * text_read = strdup(hxfsttext);
      // unputting must be done in reverse order
      for(unsigned int i=total_length-1; 
          i >= (endpos + (unsigned int)strlen("<ctrl-d>"));
          i--)
      {
        unput(*(text_read+i));
      }
      free(text_read); 
    }

    return APPLY_INPUT;
}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 693 "xfst-lexer.ll"
{
    // ^ to return input to regex command, first read everything

    BEGIN(0);

    unsigned int chars_read = 0;
    unsigned int total_length = (unsigned int)strlen(hxfsttext);

    // compile regex to find out where it ends
    // as a positive side effect, the regex is also conveniently compiled 
    // into a transducer which is stored in XfstCompiler::latest_regex_compiled
    (void) hfst::xfst::xfst_->compile_regex(hxfsttext, chars_read);

    // copy the input to regex and set is as return value
    char buf [chars_read+1];
    for (unsigned int i=0; i < chars_read; i++)
    { 
      buf[i] = hxfsttext[i];
    }
    buf[chars_read] = '\0';
    hxfstlval.text = strdup(buf);

    // put back the rest of the input text
    if (total_length > 0) 
    {
      // unput modifies hxfsttext, so it must be copied before unputting
      char * text_read = strdup(hxfsttext);
      // unputting must be done in reverse order
      for(unsigned int i=total_length-1; i >= chars_read; i--)
      {
        unput(*(text_read+i));
      }
      free(text_read); 
    }
   
    return REGEX;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 731 "xfst-lexer.ll"
{
  // ^ include directive

  FILE * tmp = NULL;
  if ((tmp = fopen(hfst::xfst::strstrip(hxfsttext), "r" )) != NULL) 
  {
    printf("Opening file '%s'.\n", hfst::xfst::strstrip(hxfsttext));
    // push the included text onto the lexer stack
    hxfstpush_buffer_state(hxfst_create_buffer(tmp, 32000));
    ++source_stack_size;
  } 
  else 
  {
    printf("Error opening file '%s'\n",hfst::xfst::strstrip(hxfsttext));
  } 
  BEGIN(INITIAL); 
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 749 "xfst-lexer.ll"
{
    hxfstlval.file = hfst::xfst::strstrip(hxfsttext+1);
    return REDIRECT_OUT;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 753 "xfst-lexer.ll"
{
    hxfstlval.file = hfst::xfst::strstrip(hxfsttext+1);
    return REDIRECT_IN;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 758 "xfst-lexer.ll"
{
    char* range = hfst::xfst::strstrip(hxfsttext);
    char* s = range;
    hxfstlval.list = static_cast<char**>(malloc(sizeof(char*)*2));
    char* p = hxfstlval.list[0];
    while (*s != '-')
    {
        *p = *s;
        p++;
        s++;
    }
    *p = '\0';
    p = hxfstlval.list[1];
    s++;
    while (*s != '\0')
    {
        *p = *s;
        p++;
        s++;
    }
    *p = '\0';
    free(range);
    return RANGE;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 783 "xfst-lexer.ll"
{
    hxfstlval.name = strdup(hxfsttext);
    return PROTOTYPE;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 788 "xfst-lexer.ll"
{
    return LEFT_PAREN;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 791 "xfst-lexer.ll"
{
    return SEMICOLON;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 794 "xfst-lexer.ll"
{
    return COLON;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 797 "xfst-lexer.ll"
{
    return END_SUB;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 800 "xfst-lexer.ll"
{
    hxfstlval.name = strdup(hxfsttext);
    return NAMETOKEN;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 805 "xfst-lexer.ll"
{
    return CTRLD;
}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 809 "xfst-lexer.ll"
{ /* skip newline */ }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 810 "xfst-lexer.ll"
{ /* skip whitespace */ }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 811 "xfst-lexer.ll"
{ /* skip comments */ }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 812 "xfst-lexer.ll"
{ /* skip comments */ }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 813 "xfst-lexer.ll"
{ /* skip an empty comment */ }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 814 "xfst-lexer.ll"
{ /* skip an empty comment */ }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 815 "xfst-lexer.ll"
{ /* skip an empty comment */ }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 816 "xfst-lexer.ll"
{ /* skip an empty comment */ }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(REGEX_STATE):
case YY_STATE_EOF(SOURCE_STATE):
case YY_STATE_EOF(APPLY_STATE):
#line 818 "xfst-lexer.ll"
{
    --source_stack_size;
    // end of input
    if (source_stack_size < 0) {
      yyterminate();
    }
    // EOF encountered because reaching end of included input 
    else {
      hxfstpop_buffer_state();
    }
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 830 "xfst-lexer.ll"
{
    hxfsterror("Illegal 8-bit sequence (cannot form valid UTF-8)");
    return XFST_ERROR;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 835 "xfst-lexer.ll"
{
    hxfsterror("Syntax error in lexer (no valid token found at the point)");
    return XFST_ERROR;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 841 "xfst-lexer.ll"
ECHO;
	YY_BREAK
#line 4334 "xfst-lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed hxfstin at a new source and called
			 * hxfstlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = hxfstin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( hxfstwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * hxfsttext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hxfstlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hxfstrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hxfstrestart(hxfstin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hxfstrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2648 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2648 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2647);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up hxfsttext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hxfstrestart(hxfstin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hxfstwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve hxfsttext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hxfstrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        hxfstensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            hxfst_create_buffer(hxfstin,YY_BUF_SIZE );
	}

	hxfst_init_buffer(YY_CURRENT_BUFFER,input_file );
	hxfst_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void hxfst_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hxfstpop_buffer_state();
	 *		hxfstpush_buffer_state(new_buffer);
     */
	hxfstensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hxfst_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (hxfstwrap()) processing, but the only time this flag
	 * is looked at is after hxfstwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void hxfst_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	hxfstin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hxfst_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hxfstalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hxfst_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hxfstalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hxfst_create_buffer()" );

	b->yy_is_our_buffer = 1;

	hxfst_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hxfst_create_buffer()
 * 
 */
    void hxfst_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hxfstfree((void *) b->yy_ch_buf  );

	hxfstfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hxfstrestart() or at EOF.
 */
    static void hxfst_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	hxfst_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hxfst_init_buffer was _probably_
     * called from hxfstrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void hxfst_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hxfst_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void hxfstpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	hxfstensure_buffer_stack();

	/* This block is copied from hxfst_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hxfst_switch_to_buffer. */
	hxfst_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void hxfstpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	hxfst_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		hxfst_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hxfstensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)hxfstalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hxfstensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)hxfstrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hxfstensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hxfst_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hxfstalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hxfst_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hxfst_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hxfstlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hxfst_scan_bytes() instead.
 */
YY_BUFFER_STATE hxfst_scan_string (yyconst char * yystr )
{
    
	return hxfst_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to hxfstlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hxfst_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hxfstalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hxfst_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hxfst_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hxfst_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hxfsttext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		hxfsttext[hxfstleng] = (yy_hold_char); \
		(yy_c_buf_p) = hxfsttext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		hxfstleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int hxfstget_lineno  (void)
{
        
    return hxfstlineno;
}

/** Get the input stream.
 * 
 */
FILE *hxfstget_in  (void)
{
        return hxfstin;
}

/** Get the output stream.
 * 
 */
FILE *hxfstget_out  (void)
{
        return hxfstout;
}

/** Get the length of the current token.
 * 
 */
int hxfstget_leng  (void)
{
        return hxfstleng;
}

/** Get the current token.
 * 
 */

char *hxfstget_text  (void)
{
        return hxfsttext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void hxfstset_lineno (int  line_number )
{
    
    hxfstlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see hxfst_switch_to_buffer
 */
void hxfstset_in (FILE *  in_str )
{
        hxfstin = in_str ;
}

void hxfstset_out (FILE *  out_str )
{
        hxfstout = out_str ;
}

int hxfstget_debug  (void)
{
        return hxfst_flex_debug;
}

void hxfstset_debug (int  bdebug )
{
        hxfst_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hxfstlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    hxfstin = stdin;
    hxfstout = stdout;
#else
    hxfstin = (FILE *) 0;
    hxfstout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hxfstlex_init()
     */
    return 0;
}

/* hxfstlex_destroy is for both reentrant and non-reentrant scanners. */
int hxfstlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hxfst_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hxfstpop_buffer_state();
	}

	/* Destroy the stack itself. */
	hxfstfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hxfstlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hxfstalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *hxfstrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hxfstfree (void * ptr )
{
	free( (char *) ptr );	/* see hxfstrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 841 "xfst-lexer.ll"
