#line 2 "pmatch_lex.cc"

#line 4 "pmatch_lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pmatch_create_buffer
#define yy_delete_buffer pmatch_delete_buffer
#define yy_flex_debug pmatch_flex_debug
#define yy_init_buffer pmatch_init_buffer
#define yy_flush_buffer pmatch_flush_buffer
#define yy_load_buffer_state pmatch_load_buffer_state
#define yy_switch_to_buffer pmatch_switch_to_buffer
#define yyin pmatchin
#define yyleng pmatchleng
#define yylex pmatchlex
#define yylineno pmatchlineno
#define yyout pmatchout
#define yyrestart pmatchrestart
#define yytext pmatchtext
#define yywrap pmatchwrap
#define yyalloc pmatchalloc
#define yyrealloc pmatchrealloc
#define yyfree pmatchfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pmatchrestart(pmatchin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pmatchleng;

extern FILE *pmatchin, *pmatchout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE pmatchlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-pmatchlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < pmatchleng; ++yyl )\
                    if ( pmatchtext[yyl] == '\n' )\
                        --pmatchlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pmatchtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pmatchrestart()), so that the user can continue scanning by
	 * just pointing pmatchin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pmatchtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pmatchleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pmatchwrap()'s to do buffer switches
 * instead of setting up a fresh pmatchin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pmatchrestart (FILE *input_file  );
void pmatch_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pmatch_create_buffer (FILE *file,int size  );
void pmatch_delete_buffer (YY_BUFFER_STATE b  );
void pmatch_flush_buffer (YY_BUFFER_STATE b  );
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pmatchpop_buffer_state (void );

static void pmatchensure_buffer_stack (void );
static void pmatch_load_buffer_state (void );
static void pmatch_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pmatch_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pmatch_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pmatch_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pmatch_scan_bytes (yyconst char *bytes,int len  );

void *pmatchalloc (yy_size_t  );
void *pmatchrealloc (void *,yy_size_t  );
void pmatchfree (void *  );

#define yy_new_buffer pmatch_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pmatchwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pmatchin = (FILE *) 0, *pmatchout = (FILE *) 0;

typedef int yy_state_type;

extern int pmatchlineno;

int pmatchlineno = 1;

extern char *pmatchtext;
#define yytext_ptr pmatchtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pmatchtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pmatchleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 112
#define YY_END_OF_BUFFER 113
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[462] =
    {   0,
      109,  109,  113,  111,  109,  109,  105,  105,  103,   30,
      111,   26,  105,   87,   88,   32,   31,   98,   27,  105,
       34,  101,   93,  108,   37,  105,   38,  102,  111,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,   85,   25,   86,  111,   65,  105,  105,  105,
      111,   35,   24,  111,  111,  111,  111,  111,  111,  111,
      111,   93,  109,   91,    0,  110,  105,    0,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  105,   99,
        0,  106,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  105,    0,  106,    0,    0,    0,    0,    0,    0,

        0,    0,   28,   29,  104,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,   51,  105,    0,  105,
        0,  105,  105,   84,   74,   76,  105,  105,   73,   75,
      105,   62,   92,    0,    0,  107,   53,   49,   36,   50,
       60,    0,    0,   58,    0,    0,    0,    0,    0,    0,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,   83,  100,
        0,    0,   63,   72,    0,    0,    0,   65,    0,  105,
      105,    0,    0,   61,    0,    0,    0,    0,    0,    0,
        0,   90,   89,  105,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   96,
       96,  105,   96,  105,    0,    0,    0,    0,    0,    0,
        0,    0,   96,    0,    0,    0,    0,    0,    0,    0,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,  103,
        0,    0,   66,   33,   40,   42,   39,   43,   41,   94,
        0,   55,   48,    0,   57,    0,    0,    0,    0,    0,
        0,  105,  105,  105,  105,  105,   17,  105,  105,  105,
      105,    8,   21,  105,  105,   18,  105,  105,  105,  105,
       64,   47,   67,    0,   72,   71,   70,    0,   46,  105,

      105,   95,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   52,   54,    0,
       45,   44,  105,    0,  107,   77,    0,    0,    0,    0,
        0,    0,   22,  105,  105,  105,  105,  105,   14,  105,
       23,   19,   20,  105,  105,  105,  105,  105,  105,   68,
       71,   70,    0,    0,  105,  105,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   56,   94,    0,    0,    0,
        0,    0,    0,    5,  105,  105,  105,  105,  105,  105,

        9,  105,  105,  105,  105,   68,    0,  105,    2,    0,
        0,   80,   81,    0,    0,    4,    3,    1,  105,  105,
      105,  105,  105,  105,  105,    0,   69,    1,    0,    0,
       78,   15,   16,  105,   11,  105,  105,  105,  105,   82,
       79,  105,   12,   13,  105,  105,  105,  105,  105,  105,
      105,   10,  105,  105,  105,  105,  105,  105,    7,    6,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   12,   31,   32,   33,   34,
       12,   12,   35,   12,   12,   36,   37,   38,   39,   40,
       12,   41,   12,   42,   43,   12,   44,   12,   12,   12,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   12,   12,   60,   61,   62,
       63,   64,   12,   65,   66,   67,   68,   12,   69,   70,
       12,   12,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,    1,    1,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   79,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   81,   82,   82,   83,
       84,   84,   84,   85,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[86] =
    {   0,
        1,    1,    1,    1,    2,    3,    4,    3,    2,    3,
        2,    3,    3,    2,    2,    2,    2,    2,    3,    2,
        3,    3,    2,    2,    2,    3,    2,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        2,    2,    5,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[477] =
    {   0,
        0, 1467, 1489, 1491,   84,   88,  111,  196,  272,   75,
       17, 1491,  280,  266, 1491, 1491, 1491, 1471, 1459,  358,
     1461,  301,  284,  294,  274,  309, 1447, 1491,  392,  391,
      257,  264,  265,  275,  270,  307,  282,  271,  309,  364,
      336,  373,  285,  324, 1491,  423,  245,  370,  365,  394,
     1425, 1394, 1491,   29, 1384,   33,  222,  337,  252,  385,
     1381,  461,  475,  483, 1411, 1491,    0,  494, 1397,  406,
      330,  431,  392,  443,  413,  450,  331,  484, 1382,  454,
      579,  486,  492,  514,  508,  517,  521,  538,  522,  541,
      549,  462,  522, 1491,  426, 1311,  434,  297,  458,  428,

      464, 1311, 1491, 1491,  493,  467, 1293,  474,  437,  482,
      440,  489, 1274, 1316, 1310, 1491, 1268,  589,  250,  590,
     1259,  591,  592, 1491,  574,  581,  607,  627,  582,  583,
      628, 1491, 1491,  515,  668,  614, 1244, 1243, 1491, 1491,
     1491,    0, 1238, 1491, 1202, 1203, 1149, 1121, 1088, 1071,
      636,  584,  615,  631,  634,  663,  639,  642,  655,  666,
      657,  665,  645,  654,  669,  684,  671,  673, 1491, 1491,
     1116, 1092, 1069,  717, 1069, 1053, 1051,  681, 1023,  686,
      683,  515,  664, 1491,  562,  672,  675,  678,  681,  684,
      687, 1491, 1491,    0,  695,  710,  725,  733,  742,  762,

      765,  770,  771,  774,  777,  780,  783,  786,  789, 1491,
      728, 1048,  731, 1045,  760,  797,  821,  824,  826,  837,
      861,  864,  516,  866,  869,  872,  875,  878,  881,  884,
      737,  718,  948,  735,  471,  738,  555,  745,  911,  748,
      817,  829,  856,  887,  890,  893,  926,  771, 1491,  743,
      897,  871,  952, 1491,  767,  769,  848,  849,  851,  757,
      856, 1491, 1491,  877, 1491,  813,  799,  827,  825,  760,
      749,  959,  935,  940,  938,  964, 1491,  941,  968,  969,
      970,  857, 1491,  953,  950, 1491,  951,  956,  949,  967,
     1491, 1491, 1491,  774, 1000,  859,  898, 1014, 1491,  980,

      977, 1491,  753,  966,  969,  972,  982,  989, 1020, 1023,
     1030, 1035, 1047, 1050, 1053, 1057,  783, 1044, 1062, 1067,
     1070, 1085, 1094, 1102, 1107, 1110, 1128,  986,  995, 1003,
     1006, 1009, 1012, 1027, 1074, 1082, 1088, 1491, 1491,  770,
     1491, 1491, 1135,  901,  904, 1491,  775,  631,    0,    0,
      614,  672, 1491, 1016, 1128, 1129, 1130, 1142, 1491, 1134,
     1491, 1491, 1491, 1159, 1160, 1162, 1168, 1169, 1163,  907,
      913, 1072,  618, 1191, 1173, 1176, 1149, 1172, 1178, 1210,
     1214, 1223, 1162, 1165, 1168, 1491, 1194,    0,  616,  548,
      545,  448,    0, 1212, 1213, 1214, 1221, 1244, 1224, 1219,

     1228, 1254, 1255, 1258, 1256, 1242, 1246, 1257, 1264,  440,
        0, 1491, 1491,    0,  428, 1265, 1267, 1293, 1294, 1270,
     1300, 1282, 1285, 1288, 1291, 1312, 1491, 1297,  334,  330,
     1491, 1491, 1491, 1298, 1491, 1324, 1327, 1303, 1308, 1491,
     1491, 1306, 1491, 1491, 1318, 1314, 1341, 1342, 1337, 1338,
     1339, 1343, 1344, 1345, 1352, 1353, 1355, 1356, 1357, 1358,
     1491, 1416, 1419, 1424, 1428, 1433, 1438, 1443, 1447, 1452,
     1457, 1462, 1467, 1472, 1477, 1482
    } ;

static yyconst flex_int16_t yy_def[477] =
    {   0,
      461,    1,  461,  461,  461,  461,  461,  461,  462,  461,
      463,  461,  462,  461,  461,  461,  461,  461,  461,  462,
      461,  462,  461,  461,  461,  462,  461,  461,  461,  462,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  461,  461,  461,  461,   30,   30,   30,   30,
      464,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  465,  461,    7,  466,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  467,    8,   30,
      468,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,   30,  469,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,   30,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,   30,  461,   30,
      461,   30,   30,  461,   30,   30,   30,   30,   30,   30,
       30,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  470,  461,  461,  461,  461,  461,  461,  461,  461,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  461,  461,
      461,  461,  461,  461,  461,  461,  461,   30,  461,   30,
       30,  464,  464,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,    7,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  461,
       30,    8,   30,    8,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
       30,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,   30,
      461,  461,   30,  461,   30,   30,   30,   30,   30,  461,
      461,  461,  461,  470,  461,  461,  461,  461,  461,  461,
      461,   30,   30,   30,   30,   30,  461,   30,   30,   30,
       30,   30,  461,   30,   30,  461,   30,   30,   30,   30,
      461,  461,  461,  461,  461,  461,  461,  461,  461,   30,

       30,  461,  464,  461,  461,  461,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,    8,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,   30,  461,  461,  461,  461,  461,  471,  472,
      461,  461,  461,   30,   30,   30,   30,   30,  461,   30,
      461,  461,  461,   30,   30,   30,   30,   30,   30,  461,
      461,  461,  461,  461,   30,   30,  465,  465,  465,  467,
      467,  467,  461,  461,  461,  461,  461,  473,  461,  471,
      472,  461,  474,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,  461,  461,   30,   30,  473,
      475,  461,  461,  476,  474,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  461,  461,   30,  475,  476,
      461,  461,  461,   30,  461,   30,   30,   30,   30,  461,
      461,   30,  461,  461,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
        0,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461
    } ;

static yyconst flex_int16_t yy_nxt[1577] =
    {   0,
        4,    5,    6,    5,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   13,   23,   24,   25,   26,   27,   28,   29,   30,
       13,   31,   32,   13,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       13,   13,   13,   49,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   50,   13,   13,   13,   13,   13,
       51,   52,    4,   53,    4,    4,    4,   54,   55,   56,
       57,   58,   59,   60,   61,   63,   63,   63,   63,   63,
       63,   63,   63,  103,  106,  107,  108,  109,  110,  111,

      112,  113,  104,   92,   92,   92,   64,  186,  186,  186,
       64,   65,   65,   66,   65,   65,   67,   67,   67,   65,
       68,   65,   67,   69,   65,   65,   65,   65,   65,   67,
       65,   67,   67,   65,   65,   65,   67,   65,   65,   65,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   65,   65,   65,   65,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   65,   65,   65,   65,   65,   65,   65,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   78,   78,   78,

       78,   79,   80,   79,   78,   81,   78,   79,   82,   78,
       78,   78,   78,   78,   79,   78,   79,   79,   78,   78,
       78,   79,   78,   78,   78,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       78,   83,   78,   78,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   78,   78,   78,   78,
       78,   78,   78,   84,   85,   86,   87,   88,   89,   90,
       91,   93,   92,  114,   94,  133,  133,  133,  133,   93,
      115,  137,   94,  178,   92,  135,  187,  187,  135,  138,

      139,   92,   92,  169,   92,  156,  134,   92,   92,  251,
       93,  153,   92,   94,  136,  136,   92,  252,   93,   92,
      158,   94,  162,   92,   92,  154,  155,  189,  189,   92,
       92,  170,   66,   66,   92,  140,  441,  157,  164,  165,
      440,   92,  159,  171,   92,  163,   92,  160,  172,   95,
       96,   97,   98,   99,  100,  101,  102,   95,   96,   97,
       98,   99,  100,  101,  102,  118,   92,   93,   92,  173,
       94,  187,  187,   92,  161,  119,  120,  121,   95,   96,
       97,   98,   99,  100,  101,  102,   95,   96,   97,   98,
       99,  100,  101,  102,   66,   92,  122,  123,  142,  167,

       93,   92,   92,   94,  124,  209,  203,   92,   66,  143,
       92,  188,  188,  188,  179,   66,  125,  126,  144,  180,
      127,  128,  129,   92,   92,  130,  166,  131,  151,   92,
      168,   92,   92,   66,  431,   95,   96,   97,   98,   99,
      100,  101,  102,  145,  174,   66,  346,  175,  181,  176,
      152,  146,   66,   92,  414,  147,  148,  149,  150,  190,
      190,  190,  133,  192,  133,  133,  205,  205,   95,   96,
       97,   98,   99,  100,  101,  102,   63,   63,   63,   63,
       67,   67,   67,  134,  193,  193,  193,  193,  207,  207,
      210,   92,  210,  177,   65,   65,   66,   65,  223,   92,

       92,   92,   92,  189,  189,  204,  204,  204,  186,  186,
      186,  242,  242,   92,  210,  244,  244,  206,  206,  206,
      210,   92,  210,  210,  208,  208,  208,  210,  210,   83,
       92,   83,  188,  188,  188,  260,  260,   83,  190,  190,
      190,  105,  105,  105,  210,  330,  330,  210,  241,  241,
      241,  413,   92,   83,  412,  210,  243,  243,  243,   83,
      183,   83,   83,  245,  245,  245,   83,   83,   65,   65,
       65,  195,  196,  197,  198,  199,  200,  201,  202,   78,
       78,   78,   78,   83,  224,  213,   83,  302,   79,   79,
       79,  225,  225,  225,   83,  226,  226,  228,  228,  232,

      233,  234,  235,  236,  237,  238,  239,  250,  253,  255,
      256,   92,  227,  227,  227,  229,  229,  229,   92,   92,
       92,   92,  411,  230,  214,  257,   92,   92,   92,   92,
      332,  332,  261,   92,  136,  136,   92,   92,   92,  407,
       92,   92,   92,   92,   92,  258,  259,  273,   92,   92,
       92,   92,   92,   78,   78,   78,  215,  216,  217,  218,
      219,  220,  221,  222,   92,   92,   92,  272,   92,  135,
      274,   92,  135,   92,   92,  277,   92,  283,  393,   92,
      392,  286,   92,  389,  275,  280,   92,   92,  136,  136,
       92,   92,   92,   92,   92,   92,  281,   66,   92,  276,

       92,   92,   92,   92,   92,  279,   92,  278,   92,  183,
       92,  284,   66,   92,   92,  285,   92,  282,   92,  287,
       92,   92,   92,   92,   92,   92,  288,   66,   92,  178,
       92,  290,   92,  294,  289,   66,  303,  295,  295,  301,
       92,  300,   92,   92,   66,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,  304,  304,  304,  305,  305,
      305,  306,  306,  306,   66,   92,  210,   66,   92,  194,
      194,  194,   66,   66,   92,  344,   66,  260,  260,   66,
       92,  388,   66,  386,  339,   66,  307,   92,   66,  211,
       92,   66,  231,  231,  231,  370,   92,  340,  183,  308,

      308,  308,   92,  210,   92,   83,   92,  309,  309,  329,
      329,  329,  331,  331,  331,  352,  310,  310,  310,  333,
      333,  333,  105,  105,  105,  302,   92,  210,   92,  351,
      210,  350,  210,  349,  212,  212,  212,  311,  311,  312,
      312,  312,   83,  210,  313,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,  314,  314,  314,
      315,  315,  315,  316,  316,  316,   83,  210,  348,   83,
      210,   83,  210,  318,  347,  210,  345,  345,  210,  371,
      371,  210,   83,  346,  210,   92,   92,  210,   92,  342,
      210,  105,  105,  105,   92,  319,  319,  319,  320,  320,

      321,  321,  321,  105,  105,  105,   83,   92,   92,   83,
       92,   83,  322,  322,   83,  341,   92,   83,  372,  372,
       83,  387,  387,   83,  345,  345,   83,  406,  406,   83,
      105,  105,  105,  371,  371,  323,  323,  323,  324,  338,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,  325,  325,  325,  326,  326,  326,  327,  327,
      327,  335,  335,  335,  336,  336,  336,  337,  337,  337,
      343,  353,   92,  355,  356,   92,  359,   92,   92,  358,
      361,  362,  363,  364,   66,  334,   92,   92,   92,   92,
       92,   66,  354,   92,   92,  360,   92,   92,  357,   92,

       92,   92,  365,  368,   92,   92,   92,   92,   92,   92,
       92,   92,   92,  366,   92,   92,  294,   92,   92,  367,
      295,  295,   66,   92,  328,   66,   92,   92,   92,   92,
      373,  376,   66,  369,  374,  374,   92,   66,  375,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   66,
      210,  317,   66,   92,  211,   66,  194,  194,  194,   66,
      231,  231,  231,  194,  194,  194,  394,  299,  210,  231,
      231,  231,  298,  210,  297,   92,  210,  231,  231,  231,
      231,  231,  231,  383,  383,  383,  384,  384,  384,   83,
      296,  210,  372,  372,  194,  194,  194,  194,  194,  194,

      210,  385,  385,  385,  377,  377,  377,   83,  210,  378,
      378,  378,   83,  210,  293,   83,  210,  292,  212,  212,
      212,  379,  379,  379,   67,   67,   67,   67,   67,   67,
       83,   67,   67,   67,  210,  291,  212,  212,  212,   83,
      271,  212,  212,  212,  212,  212,  212,   83,  105,  105,
      105,   66,   83,  120,  270,   83,  105,  105,  105,  380,
      380,  380,  105,  105,  105,   92,   92,   92,  381,  381,
      381,   92,   92,   83,   66,  269,  382,  382,  382,   92,
       66,   79,   79,   79,   79,   79,   79,   92,   92,   92,
      396,  397,  398,   92,   92,  395,   92,   92,  399,   92,

       92,   92,   79,   79,   79,   92,   92,  373,  268,  400,
       92,  374,  374,   92,  387,  387,  210,  405,   92,   92,
      210,   92,   92,  194,  194,  194,  401,   92,   92,  210,
      402,  403,   92,  404,  408,   92,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  409,  194,  194,  194,   92,
       92,   92,  194,  194,  194,   83,   92,  267,   92,   83,
      266,   92,  406,  406,  265,   92,  426,  426,   83,  263,
      262,   92,   92,   92,  416,  418,  420,  254,   92,  417,
       92,   92,  421,   92,  212,  212,  212,   92,  212,  212,
      212,   92,   92,   92,   92,   92,  249,  212,  212,  212,

      419,   92,   92,   92,   92,  432,  433,   92,  422,  423,
      424,  428,  435,   92,   92,   92,   92,   92,  427,   92,
      434,  425,   92,   92,   92,   92,   92,  248,   92,   92,
       92,   92,  426,  426,   92,   92,  443,   92,  438,  444,
       92,   92,  247,   92,   92,   92,  436,   92,  246,  437,
       92,   92,   92,   92,  439,   92,   92,   92,  446,   92,
      447,   92,   92,  442,   92,   92,  449,   92,  445,  240,
      450,  451,  448,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,  427,  191,   92,  185,  211,   92,
       92,  452,   92,   92,   92,   92,   92,  453,  454,   66,

       92,   92,   92,   92,   92,  459,  460,  455,  456,  457,
      458,   92,   92,   66,   92,   92,   92,   92,   92,   92,
      105,  105,  105,  105,  182,  182,  182,  182,   65,   65,
       65,   65,   65,  194,  194,  194,  194,  194,   78,   78,
       78,   78,   78,  212,  212,  212,  212,  212,  231,  231,
      231,  231,  264,  264,  264,  191,  264,  390,  390,  390,
      185,  390,  391,  391,  391,  184,  391,  410,  410,  410,
      183,  410,  415,  415,  415,  141,  415,  429,  429,  429,
      132,  429,  430,  430,  430,  117,  430,  116,  461,   62,
        3,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461
    } ;

static yyconst flex_int16_t yy_chk[1577] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    6,
        6,    6,    6,   10,   11,   11,   11,   11,   11,   11,

       11,   11,   10,   54,   54,   54,    5,   56,   56,   56,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    9,   47,   14,    9,   23,   23,   23,   23,   13,
       14,   25,   13,   47,   31,   24,   57,   57,   24,   25,

       25,   32,   33,   43,   47,   34,   23,   35,   38,  119,
       22,   31,   34,   22,   24,   24,   31,  119,   26,   37,
       35,   26,   37,   32,   33,   32,   33,   59,   59,   35,
       38,   43,   71,   77,   34,   26,  430,   34,   38,   39,
      429,   37,   36,   44,   36,   37,   39,   36,   44,    9,
        9,    9,    9,    9,    9,    9,    9,   13,   13,   13,
       13,   13,   13,   13,   13,   20,   36,   20,   39,   44,
       20,   98,   98,   41,   36,   20,   20,   20,   22,   22,
       22,   22,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   73,   41,   20,   20,   29,   41,

       30,   40,   49,   30,   20,   77,   71,   48,   70,   29,
       42,   58,   58,   58,   48,   75,   20,   20,   29,   49,
       20,   20,   20,   40,   49,   20,   40,   20,   30,   48,
       42,   50,   42,   72,  415,   20,   20,   20,   20,   20,
       20,   20,   20,   29,   46,   74,  410,   46,   50,   46,
       30,   29,   76,   50,  392,   29,   29,   29,   29,   60,
       60,   60,   62,   62,   62,   62,   73,   73,   30,   30,
       30,   30,   30,   30,   30,   30,   63,   63,   63,   63,
       70,   70,   70,   62,   64,   64,   64,   64,   75,   75,
       78,   80,   82,   46,   68,   68,   68,   68,   83,   92,

       95,   95,   95,  100,  100,   72,   72,   72,   97,   97,
       97,  109,  109,   80,   85,  111,  111,   74,   74,   74,
       84,   92,  223,   86,   76,   76,   76,   87,   89,   78,
      105,   82,   99,   99,   99,  134,  134,   83,  101,  101,
      101,  106,  106,  106,   88,  235,  235,   90,  108,  108,
      108,  391,  105,   85,  390,   91,  110,  110,  110,   84,
      182,  223,   86,  112,  112,  112,   87,   89,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   81,
       81,   81,   81,   88,   85,   81,   90,  182,   84,   84,
       84,   86,   86,   86,   91,   87,   87,   89,   89,   93,

       93,   93,   93,   93,   93,   93,   93,  118,  120,  122,
      123,  125,   88,   88,   88,   90,   90,   90,  126,  129,
      130,  152,  389,   91,   81,  127,  118,  120,  122,  123,
      237,  237,  136,  125,  136,  136,  185,  185,  185,  373,
      126,  129,  130,  152,  127,  128,  131,  152,  118,  120,
      122,  123,  153,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,  128,  131,  127,  151,  154,  135,
      153,  155,  135,  151,  153,  156,  157,  162,  352,  158,
      351,  165,  163,  348,  154,  159,  128,  131,  135,  135,
      154,  164,  159,  155,  161,  151,  160,  195,  157,  155,

      156,  158,  162,  160,  163,  158,  165,  157,  167,  183,
      168,  163,  196,  164,  159,  164,  161,  161,  178,  166,
      181,  166,  156,  180,  162,  160,  166,  197,  165,  178,
      167,  168,  168,  174,  167,  198,  183,  174,  174,  181,
      178,  180,  181,  166,  199,  180,  186,  186,  186,  187,
      187,  187,  188,  188,  188,  189,  189,  189,  190,  190,
      190,  191,  191,  191,  200,  211,  215,  201,  213,  195,
      195,  195,  202,  203,  231,  260,  204,  260,  260,  205,
      250,  347,  206,  340,  248,  207,  196,  211,  208,  317,
      213,  209,  232,  232,  232,  294,  231,  248,  303,  197,

      197,  197,  250,  216,  255,  215,  256,  198,  198,  234,
      234,  234,  236,  236,  236,  271,  199,  199,  199,  238,
      238,  238,  240,  240,  240,  303,  255,  217,  256,  270,
      218,  269,  219,  268,  215,  215,  215,  200,  200,  201,
      201,  201,  216,  220,  202,  203,  203,  203,  204,  204,
      204,  205,  205,  205,  206,  206,  206,  207,  207,  207,
      208,  208,  208,  209,  209,  209,  217,  221,  267,  218,
      222,  219,  224,  216,  266,  225,  261,  261,  226,  296,
      296,  227,  220,  264,  228,  257,  258,  229,  259,  252,
      230,  241,  241,  241,  282,  217,  217,  217,  218,  218,

      219,  219,  219,  242,  242,  242,  221,  257,  258,  222,
      259,  224,  220,  220,  225,  251,  282,  226,  297,  297,
      227,  344,  344,  228,  345,  345,  229,  370,  370,  230,
      243,  243,  243,  371,  371,  221,  221,  221,  222,  247,
      224,  224,  224,  225,  225,  225,  226,  226,  226,  227,
      227,  227,  228,  228,  228,  229,  229,  229,  230,  230,
      230,  244,  244,  244,  245,  245,  245,  246,  246,  246,
      253,  272,  273,  274,  274,  275,  276,  274,  278,  275,
      279,  280,  281,  284,  307,  239,  289,  285,  287,  253,
      284,  308,  273,  288,  273,  278,  272,  275,  274,  274,

      278,  276,  285,  289,  290,  279,  280,  281,  289,  285,
      287,  253,  284,  287,  301,  288,  295,  300,  272,  288,
      295,  295,  309,  276,  233,  310,  290,  279,  280,  281,
      298,  301,  311,  290,  298,  298,  301,  312,  300,  300,
      304,  304,  304,  305,  305,  305,  306,  306,  306,  313,
      318,  214,  314,  354,  212,  315,  307,  307,  307,  316,
      328,  328,  328,  308,  308,  308,  354,  179,  319,  329,
      329,  329,  177,  320,  176,  354,  321,  330,  330,  330,
      331,  331,  331,  332,  332,  332,  333,  333,  333,  318,
      175,  322,  372,  372,  309,  309,  309,  310,  310,  310,

      323,  334,  334,  334,  311,  311,  311,  319,  324,  312,
      312,  312,  320,  325,  173,  321,  326,  172,  318,  318,
      318,  313,  313,  313,  314,  314,  314,  315,  315,  315,
      322,  316,  316,  316,  327,  171,  319,  319,  319,  323,
      150,  320,  320,  320,  321,  321,  321,  324,  335,  335,
      335,  377,  325,  343,  149,  326,  336,  336,  336,  322,
      322,  322,  337,  337,  337,  355,  356,  357,  323,  323,
      323,  360,  343,  327,  378,  148,  324,  324,  324,  358,
      379,  325,  325,  325,  326,  326,  326,  355,  356,  357,
      356,  357,  358,  360,  343,  355,  364,  365,  360,  366,

      369,  358,  327,  327,  327,  367,  368,  374,  147,  364,
      375,  374,  374,  376,  387,  387,  380,  369,  364,  365,
      381,  366,  369,  377,  377,  377,  365,  367,  368,  382,
      366,  367,  375,  368,  375,  376,  383,  383,  383,  384,
      384,  384,  385,  385,  385,  376,  378,  378,  378,  394,
      395,  396,  379,  379,  379,  380,  400,  146,  397,  381,
      145,  399,  406,  406,  143,  401,  407,  407,  382,  138,
      137,  394,  395,  396,  395,  397,  399,  121,  400,  396,
      397,  398,  400,  399,  380,  380,  380,  401,  381,  381,
      381,  402,  403,  405,  408,  404,  117,  382,  382,  382,

      398,  409,  416,  398,  417,  418,  419,  420,  402,  403,
      404,  408,  421,  402,  403,  405,  408,  404,  407,  422,
      420,  405,  423,  409,  416,  424,  417,  115,  425,  420,
      418,  419,  426,  426,  428,  434,  436,  421,  424,  437,
      438,  422,  114,  442,  423,  439,  422,  424,  113,  423,
      425,  446,  418,  419,  425,  445,  428,  434,  439,  421,
      442,  436,  438,  434,  437,  442,  446,  439,  438,  107,
      447,  448,  445,  446,  449,  450,  451,  445,  447,  448,
      452,  453,  454,  436,  426,  102,  437,   96,   79,  455,
      456,  449,  457,  458,  459,  460,  449,  450,  451,   69,

      447,  448,  452,  453,  454,  457,  458,  453,  454,  455,
      456,  455,  456,   65,  457,  458,  459,  460,  462,  462,
      463,  463,  463,  463,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  466,  466,  466,  466,  466,  467,  467,
      467,  467,  467,  468,  468,  468,  468,  468,  469,  469,
      469,  469,  470,  470,  470,   61,  470,  471,  471,  471,
       55,  471,  472,  472,  472,   52,  472,  473,  473,  473,
       51,  473,  474,  474,  474,   27,  474,  475,  475,  475,
       21,  475,  476,  476,  476,   19,  476,   18,    3,    2,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[113] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
    1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int pmatch_flex_debug;
int pmatch_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pmatchtext;
#line 1 "pmatch_lex.ll"
#line 4 "pmatch_lex.ll"


#include <string.h>

#include "HfstTransducer.h"
#include "HfstInputStream.h"
#include "HfstXeroxRules.h"

#include "pmatch_utils.h"
#include "pmatch_parse.hh"


#undef YY_INPUT
#define YY_INPUT(buf, retval, maxlen)   (retval = hfst::pmatch::getinput(buf, maxlen))

extern
void pmatcherror(char *text);

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in pmatch */
/* non-restricted ASCII */
/* token character */
#line 1035 "pmatch_lex.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pmatchlex_destroy (void );

int pmatchget_debug (void );

void pmatchset_debug (int debug_flag  );

YY_EXTRA_TYPE pmatchget_extra (void );

void pmatchset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pmatchget_in (void );

void pmatchset_in  (FILE * in_str  );

FILE *pmatchget_out (void );

void pmatchset_out  (FILE * out_str  );

int pmatchget_leng (void );

char *pmatchget_text (void );

int pmatchget_lineno (void );

void pmatchset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pmatchwrap (void );
#else
extern int pmatchwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pmatchtext, pmatchleng, 1, pmatchout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pmatchin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pmatchin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pmatchin))==0 && ferror(pmatchin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pmatchin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pmatchlex (void);

#define YY_DECL int pmatchlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pmatchtext and pmatchleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pmatchleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pmatchtext[pmatchleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 56 "pmatch_lex.ll"


#line 1226 "pmatch_lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pmatchin )
			pmatchin = stdin;

		if ( ! pmatchout )
			pmatchout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pmatchensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
		}

		pmatch_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pmatchtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 462 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 461 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < pmatchleng; ++yyl )
				if ( pmatchtext[yyl] == '\n' )
					   
    pmatchlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "pmatch_lex.ll"
{
    return DEFINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 62 "pmatch_lex.ll"
{
return REGEX;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "pmatch_lex.ll"
{
    return DEFINS;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 70 "pmatch_lex.ll"
{
    return DEFFUN;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "pmatch_lex.ll"
{
    return ALPHA;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "pmatch_lex.ll"
{
    return UPPERALPHA;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "pmatch_lex.ll"
{
    return LOWERALPHA;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 86 "pmatch_lex.ll"
{
    return NUM;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "pmatch_lex.ll"
{
    return PUNCT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "pmatch_lex.ll"
{
    return WHITESPACE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 98 "pmatch_lex.ll"
{
    return OPTCAP_LEFT;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 102 "pmatch_lex.ll"
{
    return TOLOWER_LEFT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 106 "pmatch_lex.ll"
{
    return TOUPPER_LEFT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 110 "pmatch_lex.ll"
{
    return INS_LEFT;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "pmatch_lex.ll"
{
    return DEFINE_LEFT;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 118 "pmatch_lex.ll"
{
    return ENDTAG_LEFT;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 122 "pmatch_lex.ll"
{
    return LC_LEFT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 126 "pmatch_lex.ll"
{
    return RC_LEFT;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 130 "pmatch_lex.ll"
{
    return NLC_LEFT;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 134 "pmatch_lex.ll"
{
    return NRC_LEFT;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 138 "pmatch_lex.ll"
{
    return OR_LEFT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 142 "pmatch_lex.ll"
{
    return AND_LEFT;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 146 "pmatch_lex.ll"
{
    return MAP_LEFT;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 150 "pmatch_lex.ll"
{ return COMPLEMENT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 151 "pmatch_lex.ll"
{ return TERM_COMPLEMENT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 152 "pmatch_lex.ll"
{ return INTERSECTION; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "pmatch_lex.ll"
{ return MINUS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 155 "pmatch_lex.ll"
{ return CONTAINMENT_ONCE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 156 "pmatch_lex.ll"
{ return CONTAINMENT_OPT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 157 "pmatch_lex.ll"
{ return CONTAINMENT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 159 "pmatch_lex.ll"
{ return PLUS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 160 "pmatch_lex.ll"
{ return STAR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 162 "pmatch_lex.ll"
{ return IGNORE_INTERNALLY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 163 "pmatch_lex.ll"
{ return IGNORING; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 165 "pmatch_lex.ll"
{ return UNION; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "pmatch_lex.ll"
{ return SHUFFLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "pmatch_lex.ll"
{ return BEFORE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "pmatch_lex.ll"
{ return AFTER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 171 "pmatch_lex.ll"
{ return COMPOSITION; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 172 "pmatch_lex.ll"
{ return LENIENT_COMPOSITION; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 173 "pmatch_lex.ll"
{ return CROSS_PRODUCT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 174 "pmatch_lex.ll"
{ return UPPER_PRIORITY_UNION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 175 "pmatch_lex.ll"
{ return LOWER_PRIORITY_UNION; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 176 "pmatch_lex.ll"
{ return UPPER_MINUS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "pmatch_lex.ll"
{ return LOWER_MINUS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "pmatch_lex.ll"
{ return SUBSTITUTE_LEFT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 181 "pmatch_lex.ll"
{ return LEFT_RESTRICTION; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 182 "pmatch_lex.ll"
{ return LEFT_RIGHT_ARROW; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 183 "pmatch_lex.ll"
{ return LEFT_ARROW; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 184 "pmatch_lex.ll"
{ return RIGHT_ARROW; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 185 "pmatch_lex.ll"
{ return REPLACE_RIGHT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 186 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_RIGHT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 187 "pmatch_lex.ll"
{ return REPLACE_LEFT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 188 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 189 "pmatch_lex.ll"
{ return REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 190 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 192 "pmatch_lex.ll"
{ return LTR_LONGEST_MATCH; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 193 "pmatch_lex.ll"
{ return LTR_SHORTEST_MATCH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 194 "pmatch_lex.ll"
{ return RTL_LONGEST_MATCH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 195 "pmatch_lex.ll"
{ return RTL_SHORTEST_MATCH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UU; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LU; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UL; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LL; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "pmatch_lex.ll"
{ return CENTER_MARKER; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "pmatch_lex.ll"
{ return MARKUP_MARKER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 204 "pmatch_lex.ll"
{ return LEFT_QUOTIENT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 206 "pmatch_lex.ll"
{ 
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 211 "pmatch_lex.ll"
{
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 216 "pmatch_lex.ll"
{ 
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_PLUS; 
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 221 "pmatch_lex.ll"
{ 
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_MINUS;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 226 "pmatch_lex.ll"
{ 
    pmatchlval.value = strtol(pmatchtext + 1, 0, 10);
    return CATENATE_N;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 231 "pmatch_lex.ll"
{ return REVERSE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 232 "pmatch_lex.ll"
{ return INVERT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 233 "pmatch_lex.ll"
{ return UPPER; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 234 "pmatch_lex.ll"
{ return LOWER; }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 236 "pmatch_lex.ll"
{ 
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_BIN;
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 241 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_TEXT;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 246 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_SPACED;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 251 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_PROLOG;
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 256 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_RE;
}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 261 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_LEXC;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 266 "pmatch_lex.ll"
{ return LEFT_BRACKET_DOTTED; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 267 "pmatch_lex.ll"
{ return RIGHT_BRACKET_DOTTED; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 268 "pmatch_lex.ll"
{ return LEFT_BRACKET; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 269 "pmatch_lex.ll"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 270 "pmatch_lex.ll"
{ return LEFT_PARENTHESIS; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 271 "pmatch_lex.ll"
{ return RIGHT_PARENTHESIS; }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 273 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 274 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 275 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_LEFT; }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 276 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_RIGHT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 277 "pmatch_lex.ll"
{ return PAIR_SEPARATOR; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 279 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return WEIGHT;
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 283 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '{', '}');
    return CURLY_LITERAL;
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 288 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::parse_quoted(pmatchtext); 
    return QUOTED_LITERAL;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 293 "pmatch_lex.ll"
{ return COMMACOMMA; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 294 "pmatch_lex.ll"
{ return COMMA; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 296 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 297 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 298 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 299 "pmatch_lex.ll"
{ return ANY_TOKEN; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 300 "pmatch_lex.ll"
{ return BOUNDARY_MARKER; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 302 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::strip_percents(pmatchtext);
    return QUOTED_LITERAL;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 307 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::strip_percents(pmatchtext);
    return SYMBOL;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 312 "pmatch_lex.ll"
{
    char * label = (char *) malloc(strlen(pmatchtext));;
    strncpy(label, pmatchtext, strlen(pmatchtext));
    label[strlen(pmatchtext) - 1] = '\0';
    pmatchlval.label = hfst::pmatch::strip_percents(label);
    free(label);
    return SYMBOL_WITH_LEFT_PAREN;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 321 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 326 "pmatch_lex.ll"
{ 
    return END_OF_EXPRESSION;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 330 "pmatch_lex.ll"
{ /* ignorable whitespace */ }
	YY_BREAK
case 110:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 332 "pmatch_lex.ll"
{ /* ignore comments */ }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 334 "pmatch_lex.ll"
{ 
    return LEXER_ERROR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 338 "pmatch_lex.ll"
ECHO;
	YY_BREAK
#line 2002 "pmatch_lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pmatchin at a new source and called
			 * pmatchlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pmatchin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pmatchwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pmatchtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pmatchlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pmatchrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pmatchrestart(pmatchin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pmatchrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 462 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 462 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 461);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pmatchrestart(pmatchin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pmatchwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pmatchtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    pmatchlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pmatchrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pmatchensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
	}

	pmatch_init_buffer(YY_CURRENT_BUFFER,input_file );
	pmatch_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pmatch_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pmatchpop_buffer_state();
	 *		pmatchpush_buffer_state(new_buffer);
     */
	pmatchensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pmatch_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pmatchwrap()) processing, but the only time this flag
	 * is looked at is after pmatchwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pmatch_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pmatchin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pmatch_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pmatchalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pmatch_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pmatch_create_buffer()
 * 
 */
    void pmatch_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pmatchfree((void *) b->yy_ch_buf  );

	pmatchfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pmatchrestart() or at EOF.
 */
    static void pmatch_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pmatch_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pmatch_init_buffer was _probably_
     * called from pmatchrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pmatch_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pmatch_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pmatchensure_buffer_stack();

	/* This block is copied from pmatch_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pmatch_switch_to_buffer. */
	pmatch_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pmatchpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pmatch_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pmatch_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pmatchensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pmatch_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pmatch_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pmatchlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pmatch_scan_bytes() instead.
 */
YY_BUFFER_STATE pmatch_scan_string (yyconst char * yystr )
{
    
	return pmatch_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pmatchlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pmatch_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pmatchalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pmatch_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pmatch_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pmatchtext[pmatchleng] = (yy_hold_char); \
		(yy_c_buf_p) = pmatchtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pmatchleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pmatchget_lineno  (void)
{
        
    return pmatchlineno;
}

/** Get the input stream.
 * 
 */
FILE *pmatchget_in  (void)
{
        return pmatchin;
}

/** Get the output stream.
 * 
 */
FILE *pmatchget_out  (void)
{
        return pmatchout;
}

/** Get the length of the current token.
 * 
 */
int pmatchget_leng  (void)
{
        return pmatchleng;
}

/** Get the current token.
 * 
 */

char *pmatchget_text  (void)
{
        return pmatchtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pmatchset_lineno (int  line_number )
{
    
    pmatchlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pmatch_switch_to_buffer
 */
void pmatchset_in (FILE *  in_str )
{
        pmatchin = in_str ;
}

void pmatchset_out (FILE *  out_str )
{
        pmatchout = out_str ;
}

int pmatchget_debug  (void)
{
        return pmatch_flex_debug;
}

void pmatchset_debug (int  bdebug )
{
        pmatch_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pmatchlex_destroy(), so don't allocate here.
     */

    /* We do not touch pmatchlineno unless the option is enabled. */
    pmatchlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pmatchin = stdin;
    pmatchout = stdout;
#else
    pmatchin = (FILE *) 0;
    pmatchout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pmatchlex_init()
     */
    return 0;
}

/* pmatchlex_destroy is for both reentrant and non-reentrant scanners. */
int pmatchlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pmatch_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pmatchpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pmatchfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pmatchlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pmatchalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pmatchrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pmatchfree (void * ptr )
{
	free( (char *) ptr );	/* see pmatchrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 338 "pmatch_lex.ll"



