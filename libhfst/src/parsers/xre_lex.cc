#line 2 "xre_lex.cc"

#line 4 "xre_lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE xrerestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via xrerestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void xrerestart (FILE *input_file ,yyscan_t yyscanner );
void xre_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE xre_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void xre_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xre_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xrepush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void xrepop_buffer_state (yyscan_t yyscanner );

static void xreensure_buffer_stack (yyscan_t yyscanner );
static void xre_load_buffer_state (yyscan_t yyscanner );
static void xre_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER xre_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE xre_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE xre_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE xre_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *xrealloc (yy_size_t ,yyscan_t yyscanner );
void *xrerealloc (void *,yy_size_t ,yyscan_t yyscanner );
void xrefree (void * ,yyscan_t yyscanner );

#define yy_new_buffer xre_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        xreensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xre_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        xreensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xre_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define xrewrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[429] =
    {   0,
        0,    0,   94,   92,   89,   89,   91,   92,   83,    8,
       92,    4,   83,   67,   68,   10,    9,   77,    5,   83,
       12,   79,   73,   88,   15,   83,   16,   81,   92,   65,
        3,   66,   92,   43,   24,   92,   13,    2,   92,   92,
       92,   92,   92,   92,   92,   92,   73,   89,   71,   91,
       90,    0,   78,   83,   91,   84,   91,   91,   91,   91,
       91,   91,   91,   91,    6,    7,   83,    0,    0,    0,
        0,    0,    0,    0,    0,   83,    0,   84,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   76,   29,
       83,    0,   83,    0,   83,   83,   64,   52,   54,   83,

       83,   51,   53,   83,   40,   82,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   72,    0,    0,    0,   31,
       27,   14,   28,   38,    0,    0,   36,    0,    0,    0,
        0,    0,   63,   80,   42,    0,   41,   50,   50,    0,
        0,    0,   43,    0,    0,    0,    0,   39,   83,    0,
        0,    0,    0,    0,    0,    0,   70,   69,   75,   83,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,    0,    0,    0,    0,    0,
        0,    0,   83,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       37,   83,    0,    0,   44,   11,   18,   20,   17,   21,
       19,   85,   82,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   74,
        0,   86,    0,   87,   33,   26,    0,   35,    0,    0,
        0,    0,    0,    0,   25,   45,    0,   50,   49,   49,
       48,   48,    0,    0,    1,    0,    1,    0,    0,    0,
        0,    1,    0,    0,    0,    0,    1,    0,    0,    0,
        0,    0,    0,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,   32,    0,   62,

       23,   22,   83,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   55,    0,    0,    0,
        0,    0,   61,   46,   46,   49,   48,    0,    0,    0,
        1,    0,    0,    0,    0,    1,    0,    0,    0,    0,
        1,    0,    0,    0,    0,    1,    0,    0,    0,    0,
        0,    1,    0,    0,    0,    0,    1,    0,    0,    0,
        0,    1,    0,    0,    0,   91,   91,   91,    0,    0,
        0,   34,    0,    0,    0,   74,   86,   87,    0,    0,
        0,    0,    0,   60,   46,    0,    0,    0,    1,    0,
        0,    0,    0,    1,    0,    0,    0,    0,    1,    0,

        0,    0,    0,    1,    0,    0,    0,    0,    1,    0,
        0,    0,    0,    1,    0,    0,    0,    0,   58,   59,
        0,    0,   47,    0,    0,   56,   57,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   30,   31,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       32,   33,   34,   35,   36,   37,   12,   38,   12,   12,

       39,   12,   12,   12,   40,   12,   12,   41,   12,   42,
       43,   44,   12,   45,   46,   47,   48,   12,   12,   49,
       12,   12,   50,   51,   52,   53,    1,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   57,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   59,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   61,   62,   62,   63,
       64,   64,   64,   65,   66,   66,   66,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    1,    3,    3,    4,    5,    3,    5,
        3,    5,    6,    3,    3,    3,    3,    3,    5,    3,
        5,    5,    3,    3,    3,    5,    3,    3,    3,    5,
        5,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    3,
        3,    7,    3,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[461] =
    {   0,
        0,  973,  995, 5396,   65,   69,  991,  986,   90,   56,
       18, 5396,  146,   69, 5396, 5396, 5396,  975,  964,  204,
      970,  103,  102,   84,   92,  260,  960, 5396,  151,   80,
      150, 5396,  152,  952,  960,  269,  935, 5396,   41,  929,
       68,   36,   86,   88,   91,  930,  216,  182,  188,  980,
     5396,  975, 5396,    0,  335,  978,  173,  157,  177,  200,
      234,  237,  253,  256, 5396, 5396,  953,  145,  923,  220,
      117,  223,  126,  226,  924,  950,  236, 5396,  229,  920,
      248,  203,  257,  205,  260,  921,  947,  955, 5396,  943,
      321,   60,  322,  941,  323,  324, 5396,  932,  931,  325,

      326,  930,  928,  327, 5396,  392,  297,  309,  898,  312,
      217,  315,  250,  318,  899, 5396,  359,  366,  398,  925,
      924, 5396, 5396, 5396,    0,  923, 5396,  909,  906,  906,
      897,  894,  934, 5396, 5396,  915,  907,  922,  387,  357,
      364,  385,  902,  406,  470,  534,  598, 5396,  910,  356,
      367,  370,  373,  376,  379,  382, 5396, 5396, 5396,    0,
      436,  437,  440,  443,  445,  456,  459,  471,  484,  499,
      502,  505,  513,  516,  520,  421,  424,  427,  430,  487,
      490,  493,  909,  496,  879,  508,  363,  523,  386,  526,
      880,  529,  533,  548,  551,  554,  557,  560,  919,  433,

     5396,  349,  913,  912,  490, 5396,  903,  902,  901,  900,
      896, 5396,    0,  563,  866,  566,  390,  569,  433,  572,
      842,  575,  578,  581,  584,  587,  590,  593,  482,  499,
      485,  632,  544,  646, 5396, 5396,  761, 5396,  697,  721,
      716,  603,  543,  507, 5396, 5396,  648,  654, 5396,  651,
     5396,  656,  432,  662, 5396,  633,  648,  712,  776,  840,
      904,  458,  968, 1032, 1096, 1160,    0, 1224, 1288, 1352,
      626,  632,  647,  663,  671,  686,  701,  726,  729,  732,
      735,  740,  743,  666,  693,  696,  704,  707,  711,  746,
      749,  752,  755,  758,  761,  764, 5396, 5396,  401, 5396,

     5396, 5396,  697,  767,  770,  775,  790,  793,  796,  799,
      802,  805,  808,  709,  712,  715, 5396,  406,    0,    0,
      300,  310,  257, 5396,  723,  732,  771,  844,  850, 1367,
     1382, 1446, 1510, 1574, 1638, 1702, 1766, 1830, 1894, 1958,
     2022, 2086, 2150, 2214, 2278,  521, 2342, 2406, 2470,  824,
     2534, 2598, 2662, 2726, 2790, 2854,  283, 2918, 2982, 3046,
     3110,  233, 3174, 3238, 3302,  829,  865,  870,  823,  826,
      832, 5396,  835,  839,  854,  848,  853,  890,    0,  208,
      187,  181,    0, 5396,  892,  105,  894, 3317, 3332, 3396,
     3460, 3524, 3588, 3652, 3716, 3780, 3844, 3908, 3972, 4036,

     4100, 4164, 4228, 4292, 4356, 4420, 4484, 4548, 4612, 4676,
     4740, 4804, 4868, 4932, 4996, 5060, 5124,  119, 5396, 5396,
        0,  110, 5396,  896,  108, 5396, 5396, 5396, 5190, 5197,
     5202, 5205,   80, 5211, 5217, 5222, 5227, 5234, 5241, 5248,
     5255, 5262, 5269, 5276, 5283, 5290, 5297, 5304, 5311, 5318,
     5325, 5332, 5339, 5346, 5353, 5360, 5367, 5374, 5381, 5388
    } ;

static yyconst flex_int16_t yy_def[461] =
    {   0,
      428,    1,  428,  428,  428,  428,  429,  430,  429,  428,
      431,  428,  432,  428,  428,  428,  428,  428,  428,  428,
      428,  433,  428,  428,  428,  432,  428,  428,  428,  428,
      428,  428,  428,  428,   26,  434,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  429,
      428,  430,  428,    9,  435,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  428,  428,   26,  428,  428,  428,
      428,  428,  428,  428,  428,   26,  436,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
       26,  428,   26,  428,   26,   26,  428,   26,   26,   26,

       26,   26,   26,   26,  428,  433,  437,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  438,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  434,  439,  440,  441,  428,   26,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,    9,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  428,  428,  428,  428,  428,
      428,  428,   26,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,   26,  428,  428,   26,  428,   26,   26,   26,   26,
       26,  428,  106,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  438,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  434,  434,  439,  440,  441,
      439,  434,  442,  443,  444,  445,  446,  447,  448,  449,
      428,  428,  428,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,   26,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  450,  451,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  434,
      434,  439,  440,  441,  439,  439,  442,  443,  444,  445,
      445,  447,  448,  449,  439,  434,  442,  443,  444,  434,
      439,  439,  442,  443,  444,  442,  439,  452,  453,  454,
      447,  445,  455,  456,  457,  429,  429,  429,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  458,  450,
      451,  428,  459,  428,  428,  428,  428,  434,  434,  439,
      440,  441,  439,  439,  442,  443,  444,  445,  445,  447,

      448,  449,  439,  439,  442,  443,  444,  442,  442,  452,
      453,  454,  447,  447,  455,  456,  457,  458,  428,  428,
      460,  459,  428,  428,  460,  428,  428,    0,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428
    } ;

static yyconst flex_int16_t yy_nxt[5463] =
    {   0,
        4,    5,    6,    5,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   13,   23,   24,   25,   26,   27,   28,   29,   13,
       13,   30,   31,   32,   33,   34,   35,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   36,
       37,    4,   38,    4,    4,    4,    4,   39,   40,   41,
       42,   43,   44,   45,   46,    4,   48,   48,   48,   48,
       48,   48,   48,   48,   65,   68,   69,   70,   71,   72,
       73,   74,   75,   66,  106,  118,   87,   49,  119,  152,
      152,   49,   51,   88,  149,  149,  149,   54,  133,   55,

      203,   54,   56,  116,  116,  116,  116,  204,   54,  120,
       54,   54,  107,  134,  427,   54,  426,  121,  122,   54,
       54,  151,  151,  151,  117,  317,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  153,
      153,  153,  154,  154,  155,  155,  155,   57,   58,   59,
       60,   61,   62,   63,   64,   77,  423,  125,   78,   51,
      108,  109,  110,  111,  112,  113,  114,  115,  126,  135,
      178,  178,  138,  139,  136,   51,  140,  127,  141,   51,
      180,  180,  137,   48,   48,   48,   48,  421,  128,  158,
      158,  158,  158,  420,  129,  130,  131,  132,   67,   67,

       67,  142,   51,   79,   80,   81,   82,   83,   84,   85,
       86,   91,  169,   77,  419,   76,   78,  116,  157,  116,
      116,   92,   93,   94,   76,   76,   54,   54,   54,   76,
      170,  170,  170,   95,   96,  428,   51,   97,  117,   51,
       76,   76,   76,   98,   99,   76,  100,  101,  102,   76,
       76,  103,  104,  171,  171,   51,  194,  194,   51,  196,
      196,   79,   80,   81,   82,   83,   84,   85,   86,   77,
      224,  224,   78,  177,  177,  177,  179,  179,  179,  181,
      181,  181,   76,   76,   76,  428,  123,  172,  172,  172,
      384,  173,  173,  184,  185,  186,  187,  188,  189,  190,

      191,  193,  193,  193,  226,  226,  174,  174,  174,  175,
      195,  195,  195,  197,  197,  197,  383,   79,   80,   81,
       82,   83,   84,   85,   86,  145,  145,  146,  146,  146,
      146,  147,  147,  147,  147,   50,   50,   51,   50,  202,
      205,  207,  208,  209,  210,  211,  382,  428,  428,  428,
      428,  428,  428,  428,  214,  215,  216,  217,  218,  219,
      220,  221,  106,  106,  106,  223,  223,  223,  225,  225,
      225,  227,  227,  227,  229,  428,  229,  249,  250,  230,
      230,  231,  300,  231,  251,  252,  232,  232,   50,   50,
       50,   50,  161,  162,  163,  164,  165,  166,  167,  168,

       50,  107,  119,  247,  212,  253,  254,  248,  248,  149,
      149,  149,  379,  233,  372,  233,  289,  289,  234,  234,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  271,
      271,  271,  272,  272,  272,  273,  273,  273,   51,   51,
      291,  291,   51,  306,  306,   51,  298,   51,  328,  108,
      109,  110,  111,  112,  113,  114,  115,  255,   51,  299,
      428,   51,  145,  145,  146,  146,  146,  146,  147,  147,
      147,  147,  144,   51,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   51,  308,  308,  160,
      160,  160,  274,  275,  275,  275,  276,  276,  277,  277,

      277,   51,  230,  230,   51,  232,  232,   51,  303,  144,
      278,  278,  279,  279,  279,   51,  428,  314,   51,  230,
      230,  257,   51,  428,  280,  323,  258,  258,  259,  259,
      259,  259,  260,  260,  260,  260,  144,   54,   54,   54,
      284,  284,  284,  285,  285,  285,  286,  286,  286,  183,
      183,  183,   54,   54,   54,   54,   54,   54,   54,   54,
       54,  288,  288,  288,  234,  234,  281,  281,  281,  282,
      282,  282,  144,  283,  283,  283,  290,  290,  290,  292,
      292,  292,   76,   76,   76,  262,   76,   76,   76,  322,
      263,  263,  264,  264,  264,  264,  265,  265,  265,  265,

      144,   76,   76,   76,   76,   76,   76,  294,  294,  294,
      295,  295,  295,  296,  296,  296,  213,  213,  213,  305,
      305,  305,  307,  307,  307,  309,  309,  309,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      311,  311,  311,  312,  312,  312,  313,  313,  313,  267,
      315,  321,  232,  232,  268,  268,  269,  269,  269,  269,
      270,  270,  270,  270,  316,   51,  234,  234,  324,  325,
      247,  326,  326,   51,  248,  248,  327,  327,  328,  149,
      149,  149,  329,  329,  255,  149,  149,  149,   51,  145,
      145,  146,  146,  146,  146,  147,  147,  147,  147,  255,

      149,  149,  149,   51,  145,  145,  146,  146,  146,  146,
      147,  147,  147,  147,  144,   93,  160,  160,  160,   67,
       67,   67,  320,  428,  160,  160,  160,  319,   51,  376,
      376,   51,  377,  377,   51,  378,  378,   51,  318,  160,
      160,  160,   51,  385,  385,   51,   67,   67,   67,   67,
       67,   67,  326,  326,  160,  160,  160,  183,  183,  183,
      183,  183,  183,  257,  183,  183,  183,  317,  258,  258,
      259,  259,  259,  259,  260,  260,  260,  260,  144,  366,
      366,  366,  367,  367,  367,  368,  368,  368,   54,   54,
       54,  327,  327,   54,   54,   54,   54,   54,   54,  183,

      183,  183,  369,  369,  369,  370,  370,  370,  371,  371,
      371,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      213,  213,  213,  213,  213,  213,  428,  262,  213,  213,
      213,   51,  263,  263,  264,  264,  264,  264,  265,  265,
      265,  265,  144,  213,  213,  213,  373,  373,  373,  374,
      374,  374,  375,  375,  375,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  386,  387,  328,   51,  376,  376,
      329,  329,   51,  377,  377,  144,  183,  183,  183,  183,
      183,  183,  160,  160,  160,  183,  183,  183,  213,  213,
      213,  267,  213,  213,  213,  310,  268,  268,  269,  269,

      269,  269,  270,  270,  270,  270,  144,  213,  213,  213,
      378,  378,  385,  385,  424,  424,  424,  424,  160,  160,
      160,  304,  428,  160,  160,  160,  428,  428,  428,  428,
      302,  301,  297,  293,  287,  428,  428,  143,  247,  246,
      245,  244,  243,  242,  241,  423,  240,  423,  239,  238,
      236,  235,  228,  222,  428,  257,  428,  428,  428,  206,
      258,  258,  259,  259,  259,  259,  260,  260,  260,  260,
      144,  201,  200,  199,  198,  192,  428,  182,  176,  428,
       51,  159,   51,  156,  150,  148,  428,  143,  124,  105,
       90,   89,   53,   51,  428,   47,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  331,
      428,  428,  428,  428,  332,  332,  333,  333,  333,  333,
      334,  334,  334,  334,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  336,  428,  428,  428,  428,  337,  337,
      338,  338,  338,  338,  339,  339,  339,  339,  144,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  341,  428,  428,
      428,  428,  342,  342,  343,  343,  343,  343,  344,  344,
      344,  344,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  346,  428,  428,  428,  428,  347,  347,  348,  348,
      348,  348,  349,  349,  349,  349,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  352,  428,  428,  428,  428,
      353,  353,  354,  354,  354,  354,  355,  355,  355,  355,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  357,
      428,  428,  428,  428,  358,  358,  359,  359,  359,  359,
      360,  360,  360,  360,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  362,  428,  428,  428,  428,  363,  363,
      364,  364,  364,  364,  365,  365,  365,  365,  255,  428,
      428,  428,  428,  145,  145,  146,  146,  146,  146,  147,
      147,  147,  147,  255,  428,  428,  428,  428,  145,  145,
      146,  146,  146,  146,  147,  147,  147,  147,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  257,  428,  428,

      428,  428,  258,  258,  259,  259,  259,  259,  260,  260,
      260,  260,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  262,  428,  428,  428,  428,  263,  263,  264,  264,
      264,  264,  265,  265,  265,  265,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  267,  428,  428,  428,  428,
      268,  268,  269,  269,  269,  269,  270,  270,  270,  270,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  257,
      428,  428,  428,  428,  258,  258,  259,  259,  259,  259,

      260,  260,  260,  260,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  257,  428,  428,  428,  428,  258,  258,
      259,  259,  259,  259,  260,  260,  260,  260,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  331,  428,  428,
      428,  428,  332,  332,  333,  333,  333,  333,  334,  334,
      334,  334,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  336,  428,  428,  428,  428,  337,  337,  338,  338,
      338,  338,  339,  339,  339,  339,  144,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  341,  428,  428,  428,  428,
      342,  342,  343,  343,  343,  343,  344,  344,  344,  344,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  346,
      428,  428,  428,  428,  347,  347,  348,  348,  348,  348,
      349,  349,  349,  349,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  346,  428,  428,  428,  428,  347,  347,
      348,  348,  348,  348,  349,  349,  349,  349,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  352,  428,  428,
      428,  428,  353,  353,  354,  354,  354,  354,  355,  355,
      355,  355,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  357,  428,  428,  428,  428,  358,  358,  359,  359,
      359,  359,  360,  360,  360,  360,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  362,  428,  428,  428,  428,
      363,  363,  364,  364,  364,  364,  365,  365,  365,  365,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  257,
      428,  428,  428,  428,  258,  258,  259,  259,  259,  259,
      260,  260,  260,  260,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  331,  428,  428,  428,  428,  332,  332,

      333,  333,  333,  333,  334,  334,  334,  334,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  336,  428,  428,
      428,  428,  337,  337,  338,  338,  338,  338,  339,  339,
      339,  339,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  341,  428,  428,  428,  428,  342,  342,  343,  343,
      343,  343,  344,  344,  344,  344,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  257,  428,  428,  428,  428,
      258,  258,  259,  259,  259,  259,  260,  260,  260,  260,

      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  257,
      428,  428,  428,  428,  258,  258,  259,  259,  259,  259,
      260,  260,  260,  260,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  331,  428,  428,  428,  428,  332,  332,
      333,  333,  333,  333,  334,  334,  334,  334,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  336,  428,  428,
      428,  428,  337,  337,  338,  338,  338,  338,  339,  339,
      339,  339,  144,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  341,  428,  428,  428,  428,  342,  342,  343,  343,
      343,  343,  344,  344,  344,  344,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  331,  428,  428,  428,  428,
      332,  332,  333,  333,  333,  333,  334,  334,  334,  334,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  389,
      428,  428,  428,  428,  390,  390,  391,  391,  391,  391,
      392,  392,  392,  392,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  394,  428,  428,  428,  428,  395,  395,
      396,  396,  396,  396,  397,  397,  397,  397,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  399,  428,  428,

      428,  428,  400,  400,  401,  401,  401,  401,  402,  402,
      402,  402,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  352,  428,  428,  428,  428,  353,  353,  354,  354,
      354,  354,  355,  355,  355,  355,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  404,  428,  428,  428,  428,
      405,  405,  406,  406,  406,  406,  407,  407,  407,  407,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  409,
      428,  428,  428,  428,  410,  410,  411,  411,  411,  411,

      412,  412,  412,  412,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  414,  428,  428,  428,  428,  415,  415,
      416,  416,  416,  416,  417,  417,  417,  417,  255,  428,
      428,  428,  428,  145,  145,  146,  146,  146,  146,  147,
      147,  147,  147,  255,  428,  428,  428,  428,  145,  145,
      146,  146,  146,  146,  147,  147,  147,  147,  144,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  257,  428,  428,
      428,  428,  258,  258,  259,  259,  259,  259,  260,  260,
      260,  260,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  262,  428,  428,  428,  428,  263,  263,  264,  264,
      264,  264,  265,  265,  265,  265,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  267,  428,  428,  428,  428,
      268,  268,  269,  269,  269,  269,  270,  270,  270,  270,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  257,
      428,  428,  428,  428,  258,  258,  259,  259,  259,  259,
      260,  260,  260,  260,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  257,  428,  428,  428,  428,  258,  258,
      259,  259,  259,  259,  260,  260,  260,  260,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  331,  428,  428,
      428,  428,  332,  332,  333,  333,  333,  333,  334,  334,
      334,  334,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  336,  428,  428,  428,  428,  337,  337,  338,  338,
      338,  338,  339,  339,  339,  339,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  341,  428,  428,  428,  428,

      342,  342,  343,  343,  343,  343,  344,  344,  344,  344,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  346,
      428,  428,  428,  428,  347,  347,  348,  348,  348,  348,
      349,  349,  349,  349,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  346,  428,  428,  428,  428,  347,  347,
      348,  348,  348,  348,  349,  349,  349,  349,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  352,  428,  428,
      428,  428,  353,  353,  354,  354,  354,  354,  355,  355,

      355,  355,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  357,  428,  428,  428,  428,  358,  358,  359,  359,
      359,  359,  360,  360,  360,  360,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  362,  428,  428,  428,  428,
      363,  363,  364,  364,  364,  364,  365,  365,  365,  365,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  257,
      428,  428,  428,  428,  258,  258,  259,  259,  259,  259,
      260,  260,  260,  260,  144,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  257,  428,  428,  428,  428,  258,  258,
      259,  259,  259,  259,  260,  260,  260,  260,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  331,  428,  428,
      428,  428,  332,  332,  333,  333,  333,  333,  334,  334,
      334,  334,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  336,  428,  428,  428,  428,  337,  337,  338,  338,
      338,  338,  339,  339,  339,  339,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  341,  428,  428,  428,  428,
      342,  342,  343,  343,  343,  343,  344,  344,  344,  344,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  331,

      428,  428,  428,  428,  332,  332,  333,  333,  333,  333,
      334,  334,  334,  334,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  331,  428,  428,  428,  428,  332,  332,
      333,  333,  333,  333,  334,  334,  334,  334,  144,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  389,  428,  428,
      428,  428,  390,  390,  391,  391,  391,  391,  392,  392,
      392,  392,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  394,  428,  428,  428,  428,  395,  395,  396,  396,

      396,  396,  397,  397,  397,  397,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  399,  428,  428,  428,  428,
      400,  400,  401,  401,  401,  401,  402,  402,  402,  402,
      144,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  352,
      428,  428,  428,  428,  353,  353,  354,  354,  354,  354,
      355,  355,  355,  355,  144,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  352,  428,  428,  428,  428,  353,  353,
      354,  354,  354,  354,  355,  355,  355,  355,  144,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  404,  428,  428,
      428,  428,  405,  405,  406,  406,  406,  406,  407,  407,
      407,  407,  144,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  409,  428,  428,  428,  428,  410,  410,  411,  411,
      411,  411,  412,  412,  412,  412,  144,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  414,  428,  428,  428,  428,
      415,  415,  416,  416,  416,  416,  417,  417,  417,  417,
       50,   50,   50,   50,   50,   50,   50,   52,   52,   52,

       52,   52,   52,   52,   67,   67,   67,   67,   67,   76,
       76,  144,  144,  144,  144,  144,  144,  160,  160,  160,
      160,  160,  160,  160,  183,  183,  183,  183,  183,  213,
      213,  213,  213,  213,  237,  237,  237,  428,  237,  237,
      237,  256,  256,  256,  256,  256,  256,  256,  261,  261,
      261,  261,  261,  261,  261,  266,  266,  266,  266,  266,
      266,  266,  330,  330,  330,  330,  330,  330,  330,  335,
      335,  335,  335,  335,  335,  335,  340,  340,  340,  340,
      340,  340,  340,  345,  345,  345,  345,  345,  345,  345,
      350,  428,  350,  350,  350,  350,  350,  351,  351,  351,

      351,  351,  351,  351,  356,  356,  356,  356,  356,  356,
      356,  361,  361,  361,  361,  361,  361,  361,  380,  380,
      380,  428,  380,  380,  380,  381,  381,  381,  428,  381,
      381,  381,  388,  388,  388,  388,  388,  388,  388,  393,
      393,  393,  393,  393,  393,  393,  398,  398,  398,  398,
      398,  398,  398,  403,  403,  403,  403,  403,  403,  403,
      408,  408,  408,  408,  408,  408,  408,  413,  413,  413,
      413,  413,  413,  413,  418,  418,  418,  428,  418,  418,
      418,  422,  422,  422,  428,  422,  422,  422,  425,  425,
      425,  428,  425,  425,  425,    3,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428
    } ;

static yyconst flex_int16_t yy_chk[5463] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        6,    6,    6,    6,   10,   11,   11,   11,   11,   11,
       11,   11,   11,   10,  433,   24,   14,    5,   24,   42,
       42,    6,    9,   14,   39,   39,   39,    9,   30,    9,

       92,    9,    9,   23,   23,   23,   23,   92,    9,   25,
        9,    9,   22,   30,  425,    9,  422,   25,   25,    9,
        9,   41,   41,   41,   23,  418,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   43,
       43,   43,   44,   44,   45,   45,   45,    9,    9,    9,
        9,    9,    9,    9,    9,   13,  386,   29,   13,   58,
       22,   22,   22,   22,   22,   22,   22,   22,   29,   31,
       71,   71,   33,   33,   31,   57,   33,   29,   33,   59,
       73,   73,   31,   48,   48,   48,   48,  382,   29,   49,
       49,   49,   49,  381,   29,   29,   29,   29,   68,   68,

       68,   33,   60,   13,   13,   13,   13,   13,   13,   13,
       13,   20,   58,   20,  380,   20,   20,   47,   47,   47,
       47,   20,   20,   20,   20,   20,   57,   57,   57,   20,
       59,   59,   59,   20,   20,  362,   61,   20,   47,   62,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   60,   60,   63,   82,   82,   64,   84,
       84,   20,   20,   20,   20,   20,   20,   20,   20,   26,
      111,  111,   26,   70,   70,   70,   72,   72,   72,   74,
       74,   74,   79,   79,   79,  357,   26,   61,   61,   61,
      323,   62,   62,   77,   77,   77,   77,   77,   77,   77,

       77,   81,   81,   81,  113,  113,   63,   63,   63,   64,
       83,   83,   83,   85,   85,   85,  322,   26,   26,   26,
       26,   26,   26,   26,   26,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   55,   55,   55,   55,   91,
       93,   95,   96,  100,  101,  104,  321,   91,   93,   95,
       96,  100,  101,  104,  107,  107,  107,  107,  107,  107,
      107,  107,  108,  108,  108,  110,  110,  110,  112,  112,
      112,  114,  114,  114,  117,  202,  117,  140,  140,  117,
      117,  118,  202,  118,  141,  141,  118,  118,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,  106,  119,  139,  106,  142,  142,  139,  139,  150,
      150,  150,  318,  119,  299,  119,  187,  187,  119,  119,
      151,  151,  151,  152,  152,  152,  153,  153,  153,  154,
      154,  154,  155,  155,  155,  156,  156,  156,  161,  162,
      189,  189,  163,  217,  217,  164,  200,  165,  253,  106,
      106,  106,  106,  106,  106,  106,  106,  144,  166,  200,
      262,  167,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  145,  168,  176,  176,  176,  177,  177,  177,
      178,  178,  178,  179,  179,  179,  169,  219,  219,  161,
      161,  161,  162,  163,  163,  163,  164,  164,  165,  165,

      165,  170,  229,  229,  171,  231,  231,  172,  205,  262,
      166,  166,  167,  167,  167,  173,  205,  230,  174,  230,
      230,  145,  175,  346,  168,  244,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  146,  169,  169,  169,
      180,  180,  180,  181,  181,  181,  182,  182,  182,  184,
      184,  184,  170,  170,  170,  171,  171,  171,  172,  172,
      172,  186,  186,  186,  233,  233,  173,  173,  173,  174,
      174,  174,  346,  175,  175,  175,  188,  188,  188,  190,
      190,  190,  192,  192,  192,  146,  193,  193,  193,  243,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      147,  194,  194,  194,  195,  195,  195,  196,  196,  196,
      197,  197,  197,  198,  198,  198,  214,  214,  214,  216,
      216,  216,  218,  218,  218,  220,  220,  220,  222,  222,
      222,  223,  223,  223,  224,  224,  224,  225,  225,  225,
      226,  226,  226,  227,  227,  227,  228,  228,  228,  147,
      232,  242,  232,  232,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  234,  274,  234,  234,  247,  247,
      248,  250,  250,  275,  248,  248,  252,  252,  254,  271,
      271,  271,  254,  254,  256,  272,  272,  272,  276,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  257,

      273,  273,  273,  277,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  258,  303,  274,  274,  274,  284,
      284,  284,  241,  303,  275,  275,  275,  240,  278,  314,
      314,  279,  315,  315,  280,  316,  316,  281,  239,  276,
      276,  276,  282,  325,  325,  283,  285,  285,  285,  286,
      286,  286,  326,  326,  277,  277,  277,  287,  287,  287,
      288,  288,  288,  258,  289,  289,  289,  237,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  259,  278,
      278,  278,  279,  279,  279,  280,  280,  280,  281,  281,
      281,  327,  327,  282,  282,  282,  283,  283,  283,  290,

      290,  290,  291,  291,  291,  292,  292,  292,  293,  293,
      293,  294,  294,  294,  295,  295,  295,  296,  296,  296,
      304,  304,  304,  305,  305,  305,  350,  259,  306,  306,
      306,  366,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  260,  307,  307,  307,  308,  308,  308,  309,
      309,  309,  310,  310,  310,  311,  311,  311,  312,  312,
      312,  313,  313,  313,  328,  328,  329,  367,  376,  376,
      329,  329,  368,  377,  377,  350,  369,  369,  369,  370,
      370,  370,  366,  366,  366,  371,  371,  371,  373,  373,
      373,  260,  374,  374,  374,  221,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  261,  375,  375,  375,
      378,  378,  385,  385,  387,  387,  424,  424,  367,  367,
      367,  215,  211,  368,  368,  368,  210,  209,  208,  207,
      204,  203,  199,  191,  185,  183,  149,  143,  138,  137,
      136,  133,  132,  131,  130,  387,  129,  424,  128,  126,
      121,  120,  115,  109,  103,  261,  102,   99,   98,   94,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      263,   90,   88,   87,   86,   80,   76,   75,   69,   67,
       56,   52,   50,   46,   40,   37,   35,   34,   27,   21,
       19,   18,    8,    7,    3,    2,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  263,
        0,    0,    0,    0,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  264,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  264,    0,    0,    0,    0,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  265,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  265,    0,    0,
        0,    0,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  266,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  266,    0,    0,    0,    0,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  268,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  268,    0,    0,    0,    0,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  269,
        0,    0,    0,    0,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  270,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  270,    0,    0,    0,    0,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  330,    0,
        0,    0,    0,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  331,    0,    0,    0,    0,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  332,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  332,    0,    0,

        0,    0,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  333,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  333,    0,    0,    0,    0,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  334,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  334,    0,    0,    0,    0,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      335,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  335,
        0,    0,    0,    0,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  336,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  336,    0,    0,    0,    0,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  337,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  337,    0,    0,
        0,    0,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  338,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  338,    0,    0,    0,    0,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  339,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  339,    0,    0,    0,    0,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      340,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  340,
        0,    0,    0,    0,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  341,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  341,    0,    0,    0,    0,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  342,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  342,    0,    0,
        0,    0,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  343,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  343,    0,    0,    0,    0,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  344,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  344,    0,    0,    0,    0,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      345,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  345,
        0,    0,    0,    0,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  347,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  347,    0,    0,    0,    0,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  348,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  348,    0,    0,
        0,    0,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  349,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  349,    0,    0,    0,    0,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  351,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  351,    0,    0,    0,    0,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      352,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  352,
        0,    0,    0,    0,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  353,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  353,    0,    0,    0,    0,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  354,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  354,    0,    0,
        0,    0,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  355,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  355,    0,    0,    0,    0,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  356,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  356,    0,    0,    0,    0,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      358,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  358,
        0,    0,    0,    0,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  359,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  359,    0,    0,    0,    0,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  360,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  360,    0,    0,

        0,    0,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  361,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  361,    0,    0,    0,    0,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  363,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      364,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
        0,    0,    0,    0,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  364,  365,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  365,    0,    0,    0,    0,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  388,    0,
        0,    0,    0,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  389,    0,    0,    0,    0,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  390,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  390,    0,    0,
        0,    0,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  391,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  391,    0,    0,    0,    0,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  392,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  392,    0,    0,    0,    0,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      393,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  393,
        0,    0,    0,    0,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  394,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  394,    0,    0,    0,    0,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  395,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  395,    0,    0,
        0,    0,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  396,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  396,    0,    0,    0,    0,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  397,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  397,    0,    0,    0,    0,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      398,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  398,
        0,    0,    0,    0,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  399,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  399,    0,    0,    0,    0,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  400,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  400,    0,    0,
        0,    0,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  400,  401,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  401,    0,    0,    0,    0,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  402,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  402,    0,    0,    0,    0,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      403,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  403,
        0,    0,    0,    0,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  404,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  404,    0,    0,    0,    0,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  405,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  405,    0,    0,
        0,    0,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  406,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  406,    0,    0,    0,    0,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  407,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  407,    0,    0,    0,    0,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      408,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  408,

        0,    0,    0,    0,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  409,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  409,    0,    0,    0,    0,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  410,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  410,    0,    0,
        0,    0,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  411,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  411,    0,    0,    0,    0,  411,  411,  411,  411,

      411,  411,  411,  411,  411,  411,  412,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  412,    0,    0,    0,    0,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      413,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  413,
        0,    0,    0,    0,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  414,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  414,    0,    0,    0,    0,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  415,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  415,    0,    0,
        0,    0,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  416,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  416,    0,    0,    0,    0,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  417,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  417,    0,    0,    0,    0,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      429,  429,  429,  429,  429,  429,  429,  430,  430,  430,

      430,  430,  430,  430,  431,  431,  431,  431,  431,  432,
      432,  434,  434,  434,  434,  434,  434,  435,  435,  435,
      435,  435,  435,  435,  436,  436,  436,  436,  436,  437,
      437,  437,  437,  437,  438,  438,  438,    0,  438,  438,
      438,  439,  439,  439,  439,  439,  439,  439,  440,  440,
      440,  440,  440,  440,  440,  441,  441,  441,  441,  441,
      441,  441,  442,  442,  442,  442,  442,  442,  442,  443,
      443,  443,  443,  443,  443,  443,  444,  444,  444,  444,
      444,  444,  444,  445,  445,  445,  445,  445,  445,  445,
      446,    0,  446,  446,  446,  446,  446,  447,  447,  447,

      447,  447,  447,  447,  448,  448,  448,  448,  448,  448,
      448,  449,  449,  449,  449,  449,  449,  449,  450,  450,
      450,    0,  450,  450,  450,  451,  451,  451,    0,  451,
      451,  451,  452,  452,  452,  452,  452,  452,  452,  453,
      453,  453,  453,  453,  453,  453,  454,  454,  454,  454,
      454,  454,  454,  455,  455,  455,  455,  455,  455,  455,
      456,  456,  456,  456,  456,  456,  456,  457,  457,  457,
      457,  457,  457,  457,  458,  458,  458,    0,  458,  458,
      458,  459,  459,  459,    0,  459,  459,  459,  460,  460,
      460,    0,  460,  460,  460,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "xre_lex.ll"
#line 4 "xre_lex.ll"


#include <string.h>

#include "HfstTransducer.h"
#include "HfstInputStream.h"
#include "HfstXeroxRules.h"

#include "xre_parse.hh"
#include "xre_utils.h"

#undef YY_INPUT
#define YY_INPUT(buf, retval, maxlen)   (retval = hfst::xre::getinput(buf, maxlen))

// These variablese are used when scanning a regex for a given SYMBOL
// when performing variable substitution in function definition.
namespace hfst { 
  namespace xre {
    extern unsigned int cr; // number of characters read
    extern std::set<unsigned int> positions; // positions of a given SYMBOL
    extern char * position_symbol;  // the given SYMBOL
} }

// a macro that increments the number of characters read
#define CR hfst::xre::cr += (unsigned int)strlen(yytext);

extern int xrelex ( YYSTYPE * lvalp, yyscan_t scanner );

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in xre testing " */
/* non-restricted ASCII testing " */
/* token character */
/* curly brackets */
#line 1829 "xre_lex.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int xrelex_init (yyscan_t* scanner);

int xrelex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int xrelex_destroy (yyscan_t yyscanner );

int xreget_debug (yyscan_t yyscanner );

void xreset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE xreget_extra (yyscan_t yyscanner );

void xreset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *xreget_in (yyscan_t yyscanner );

void xreset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *xreget_out (yyscan_t yyscanner );

void xreset_out  (FILE * out_str ,yyscan_t yyscanner );

int xreget_leng (yyscan_t yyscanner );

char *xreget_text (yyscan_t yyscanner );

int xreget_lineno (yyscan_t yyscanner );

void xreset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * xreget_lval (yyscan_t yyscanner );

void xreset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int xrewrap (yyscan_t yyscanner );
#else
extern int xrewrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int xrelex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int xrelex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 69 "xre_lex.ll"





#line 2076 "xre_lex.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			xreensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				xre_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		xre_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 429 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 428 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 74 "xre_lex.ll"
{
  CR;
  yylval->label = hfst::xre::strip_curly(yytext);
  return CURLY_BRACKETS;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 82 "xre_lex.ll"
{ CR; return COMPLEMENT; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 83 "xre_lex.ll"
{ CR; return TERM_COMPLEMENT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 84 "xre_lex.ll"
{ CR; return INTERSECTION; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 85 "xre_lex.ll"
{ CR; return MINUS; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "xre_lex.ll"
{ CR; return CONTAINMENT_ONCE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "xre_lex.ll"
{ CR; return CONTAINMENT_OPT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "xre_lex.ll"
{ CR; return CONTAINMENT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 91 "xre_lex.ll"
{ CR; return PLUS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 92 "xre_lex.ll"
{ CR; return STAR; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "xre_lex.ll"
{ CR; return IGNORE_INTERNALLY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "xre_lex.ll"
{ CR; return IGNORING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "xre_lex.ll"
{ CR; return UNION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 99 "xre_lex.ll"
{ CR; return SHUFFLE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 100 "xre_lex.ll"
{ CR; return BEFORE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 101 "xre_lex.ll"
{ CR; return AFTER; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 103 "xre_lex.ll"
{ CR; return COMPOSITION; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 104 "xre_lex.ll"
{ CR; return LENIENT_COMPOSITION; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 105 "xre_lex.ll"
{ CR; return CROSS_PRODUCT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 106 "xre_lex.ll"
{ CR; return UPPER_PRIORITY_UNION; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 107 "xre_lex.ll"
{ CR; return LOWER_PRIORITY_UNION; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 108 "xre_lex.ll"
{ CR; return UPPER_MINUS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 109 "xre_lex.ll"
{ CR; return LOWER_MINUS; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 110 "xre_lex.ll"
{   CR; return SUBSTITUTE_LEFT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 112 "xre_lex.ll"
{ CR; return LEFT_RESTRICTION; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 113 "xre_lex.ll"
{ CR; return LEFT_RIGHT_ARROW; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 114 "xre_lex.ll"
{ CR; return LEFT_ARROW; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 115 "xre_lex.ll"
{ CR; return RIGHT_ARROW; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 117 "xre_lex.ll"
{ CR; return REPLACE_RIGHT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 118 "xre_lex.ll"
{ CR; return OPTIONAL_REPLACE_RIGHT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 119 "xre_lex.ll"
{ CR; return REPLACE_LEFT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 120 "xre_lex.ll"
{ CR; return OPTIONAL_REPLACE_LEFT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 121 "xre_lex.ll"
{ CR; return REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 122 "xre_lex.ll"
{ CR; return OPTIONAL_REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 123 "xre_lex.ll"
{ CR; return LTR_LONGEST_MATCH; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 124 "xre_lex.ll"
{ CR; return LTR_SHORTEST_MATCH; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 125 "xre_lex.ll"
{ CR; return RTL_LONGEST_MATCH; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 126 "xre_lex.ll"
{ CR; return RTL_SHORTEST_MATCH; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 128 "xre_lex.ll"
{ CR; return REPLACE_CONTEXT_UU; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 129 "xre_lex.ll"
{ CR; return REPLACE_CONTEXT_LU; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 130 "xre_lex.ll"
{ CR; return REPLACE_CONTEXT_UL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 131 "xre_lex.ll"
{ CR; return REPLACE_CONTEXT_LL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 132 "xre_lex.ll"
{ CR; return CENTER_MARKER; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 133 "xre_lex.ll"
{ CR; return MARKUP_MARKER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 135 "xre_lex.ll"
{ CR; return LEFT_QUOTIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 137 "xre_lex.ll"
{ 
    CR;
    yylval->values = hfst::xre::get_n_to_k(yytext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 143 "xre_lex.ll"
{
    CR;
    yylval->values = hfst::xre::get_n_to_k(yytext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 149 "xre_lex.ll"
{ 
    CR;
    yylval->value = strtol(yytext + 2, 0, 10);
    return CATENATE_N_PLUS; 
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 155 "xre_lex.ll"
{ 
    CR;
    yylval->value = strtol(yytext + 2, 0, 10);
    return CATENATE_N_MINUS;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "xre_lex.ll"
{ 
    CR;
    yylval->value = strtol(yytext + 1, 0, 10);
    return CATENATE_N;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 167 "xre_lex.ll"
{ CR; return REVERSE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 168 "xre_lex.ll"
{ CR; return INVERT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 169 "xre_lex.ll"
{ CR; return UPPER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 170 "xre_lex.ll"
{ CR; return LOWER; }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 172 "xre_lex.ll"
{ 
    CR;
    yylval->label = hfst::xre::get_quoted(yytext);
    return READ_BIN;
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 178 "xre_lex.ll"
{
    CR;
    yylval->label = hfst::xre::get_quoted(yytext);
    return READ_TEXT;
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 184 "xre_lex.ll"
{
    CR;
    yylval->label = hfst::xre::get_quoted(yytext);
    return READ_SPACED;
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 190 "xre_lex.ll"
{
    CR;
    yylval->label = hfst::xre::get_quoted(yytext);
    return READ_PROLOG;
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 196 "xre_lex.ll"
{
    CR;
    yylval->label = hfst::xre::get_quoted(yytext);
    return READ_RE;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 202 "xre_lex.ll"
{ hfst::xre::cr += 5; yylval->label = strdup(".#."); return SYMBOL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 203 "xre_lex.ll"
{ hfst::xre::cr += 1; unput('.'); unput('#'); unput('.'); return LEFT_BRACKET; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 204 "xre_lex.ll"
{ hfst::xre::cr += 3; unput(']'); yylval->label = strdup(".#."); return SYMBOL; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 205 "xre_lex.ll"
{ CR; return LEFT_BRACKET_DOTTED; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 206 "xre_lex.ll"
{ CR; return RIGHT_BRACKET_DOTTED; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 207 "xre_lex.ll"
{ CR; return LEFT_BRACKET; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 208 "xre_lex.ll"
{ CR; return RIGHT_BRACKET; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 209 "xre_lex.ll"
{ CR; return LEFT_PARENTHESIS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 210 "xre_lex.ll"
{ CR; return RIGHT_PARENTHESIS; }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 213 "xre_lex.ll"
{ CR; return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 70:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 214 "xre_lex.ll"
{ CR; return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 215 "xre_lex.ll"
{ CR; return PAIR_SEPARATOR_WO_LEFT; }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 216 "xre_lex.ll"
{ CR; return PAIR_SEPARATOR_WO_RIGHT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "xre_lex.ll"
{ CR; return PAIR_SEPARATOR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 219 "xre_lex.ll"
{
    CR; 
    yylval->weight = hfst::xre::get_weight(yytext + 2);
    return WEIGHT;
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 225 "xre_lex.ll"
{
    yylval->label = hfst::xre::parse_quoted(yytext);
    CR;
    return QUOTED_LITERAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 232 "xre_lex.ll"
{ CR; return COMMACOMMA; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 233 "xre_lex.ll"
{ CR; return COMMA; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 235 "xre_lex.ll"
{ CR; return EPSILON_TOKEN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 236 "xre_lex.ll"
{ CR; return EPSILON_TOKEN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 237 "xre_lex.ll"
{ CR; return EPSILON_TOKEN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 238 "xre_lex.ll"
{ CR; return ANY_TOKEN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 240 "xre_lex.ll"
{
    if (hfst::xre::position_symbol != NULL) {
      if (strcmp(hfst::xre::position_symbol, yytext) == 0) {
        hfst::xre::positions.insert(hfst::xre::cr);
      }
    }
    yylval->label = hfst::xre::strip_percents(yytext);
    CR;
    return SYMBOL;
}  
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 251 "xre_lex.ll"
{
    if (hfst::xre::position_symbol != NULL) {
      if (strcmp(hfst::xre::position_symbol, yytext) == 0) {
        hfst::xre::positions.insert(hfst::xre::cr);
      }
    }
    yylval->label = hfst::xre::strip_percents(yytext);
    CR;
    return SYMBOL;
}  
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 262 "xre_lex.ll"
{
    CR;
    yylval->label = yytext;
    return FUNCTION_NAME;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 268 "xre_lex.ll"
{
    CR;
    yylval->label = yytext;
    return FUNCTION_NAME;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 274 "xre_lex.ll"
{
    CR; 
    yylval->weight = hfst::xre::get_weight(yytext + 2);
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 280 "xre_lex.ll"
{
    CR; 
    yylval->weight = hfst::xre::get_weight(yytext + 2);
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 286 "xre_lex.ll"
{ 
    CR; 
    return END_OF_EXPRESSION;
}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 291 "xre_lex.ll"
{ CR; /*fprintf(stderr, "ignoring whitespace '%s'..\n", yytext); */ /* ignorable whitespace */ }
	YY_BREAK
case 90:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 293 "xre_lex.ll"
{ CR; /* fprintf(stderr, "ignoring comment '%s'..\n", yytext); */ /* ignore comments */ }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 295 "xre_lex.ll"
{ CR; /* fprintf(stderr, "ignoring comment '%s'..\n", yytext); */ /* ignore comments */ }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 297 "xre_lex.ll"
{ 
    CR; 
    return LEXER_ERROR;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 302 "xre_lex.ll"
ECHO;
	YY_BREAK
#line 2732 "xre_lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * xrelex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( xrewrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of xrelex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					xrerealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			xrerestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) xrerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 429 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 429 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 428);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					xrerestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( xrewrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void xrerestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        xreensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            xre_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	xre_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	xre_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void xre_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		xrepop_buffer_state();
	 *		xrepush_buffer_state(new_buffer);
     */
	xreensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	xre_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (xrewrap()) processing, but the only time this flag
	 * is looked at is after xrewrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void xre_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE xre_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) xrealloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xre_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) xrealloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in xre_create_buffer()" );

	b->yy_is_our_buffer = 1;

	xre_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with xre_create_buffer()
 * @param yyscanner The scanner object.
 */
    void xre_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		xrefree((void *) b->yy_ch_buf ,yyscanner );

	xrefree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a xrerestart() or at EOF.
 */
    static void xre_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	xre_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then xre_init_buffer was _probably_
     * called from xrerestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void xre_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		xre_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void xrepush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	xreensure_buffer_stack(yyscanner);

	/* This block is copied from xre_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from xre_switch_to_buffer. */
	xre_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void xrepop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	xre_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		xre_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void xreensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xrealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xreensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xrerealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xreensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE xre_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) xrealloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xre_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	xre_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to xrelex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       xre_scan_bytes() instead.
 */
YY_BUFFER_STATE xre_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return xre_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to xrelex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE xre_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) xrealloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in xre_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = xre_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in xre_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE xreget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int xreget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int xreget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *xreget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *xreget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int xreget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *xreget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void xreset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xreset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xreset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xreset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xreset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see xre_switch_to_buffer
 */
void xreset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void xreset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int xreget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void xreset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * xreget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void xreset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* xrelex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int xrelex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) xrealloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* xrelex_init_extra has the same functionality as xrelex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to xrealloc in
 * the yyextra field.
 */

int xrelex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    xreset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) xrealloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    xreset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from xrelex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * xrelex_init()
     */
    return 0;
}

/* xrelex_destroy is for both reentrant and non-reentrant scanners. */
int xrelex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		xre_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		xrepop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	xrefree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        xrefree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * xrelex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    xrefree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *xrealloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *xrerealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void xrefree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see xrerealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 302 "xre_lex.ll"



